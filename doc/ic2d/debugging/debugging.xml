<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	xml:id="debuggingGeneralSection">
	<info>
		<title>Using IC2D debugging features</title>
	</info>
	<para>IC2D comes with several plug-ins to help developers with the process of
	debugging their applications built above ProActive.</para>


	<section xml:id="debugging">
	<info>
		<title>Debugging a ProActive Application using IC2D</title>
	</info>
	<para> The communication between a debugger (like JDB or Eclipse) and a
		Java Virtual Machine (JVM) uses a socket connection. The debugger has therefore to know the URL of the
		JVM and the port number available for this socket connection. However, no port number
		is available by default on the JVM. Thus, in order to be able to launch the JVM
		with the correct arguments, the IC2D debugger connection tool is intended to give
		the informations needed to the debugger connection.</para>
		<para>
		First of all, JVMs (ProActive Runtimes) have to be started with the debug command line argument,
		otherwise it is not possible to establish a remote connection to these JVMs. The additional argument is of the following form:
		 <programlisting>-DdebugID=padebug_someDeploymentId -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=0,launch='java -cp path/to/ProActive.jar org.objectweb.proactive.core.debug.dconnection.DebuggeePortSetter padebug_someDdeploymentId'</programlisting>
		 In order to facilitate the use of the debugging features, the GCMA descriptor has been extended to easily start runtimes
		 in debug mode.
		 One has to add the tag &lt;debug/&gt; as a child of the application/proactive tag. An example is shown hereafter:
		  <programlisting><textobject><textdata fileref="debugging/GCMA.xml"/></textobject></programlisting>
		</para>
	<section xml:id="Connection">
		<info>
			<title>The connection</title>
		</info>
		<para> The IC2D debugger connection differs slightly from a
			simple debugger connection. When a user wants to connect a debugger
			to a remote JVM, he actually has to connect it to the local IC2D JVM. 
			Then, it is an active object (created when the user sends the
			connection request) that is in charge of transmitting, through a proactive connection, 
			the debugger informations and requests to the JVM.</para>
		<figure xml:id="connectionfig">
			<info>
				<title>connection</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/debuggerConnection.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section xml:id="UseDebugger">
		<info>
			<title>How to use the IC2D debugger connection tools</title>
		</info>
		<para> When a user right clicks on a monitored JVM, he can
			select an option (connect a debugger) that shows him the port number
			of his local debugger.</para>
		<figure xml:id="menu">
			<info>
				<title>Menu</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/context.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<figure xml:id="popup">
			<info>
				<title>Popup</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/popup.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<para> Next the user has just to connect his debugger. For example:
			The Eclipse debugger</para>
		<figure xml:id="eclipseConnection">
			<info>
				<title>Eclipse connection</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/eclipseConnection.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<figure xml:id="eclipseDebugger">
			<info>
				<title>Eclipse debugger</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/eclipse.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
		<figure xml:id="communication">
			<info>
				<title>Communication</title>
			</info>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						fileref="debugging/addDebugger/images/SocketServClient.png" format="PNG" />
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	</section>

	<section xml:id="StepByStep">

	<info><title>Step by step mode</title></info>

    <figure xml:id="StepByStepFigure"><info><title>Step by step preview</title></info>
       <mediaobject>
         <imageobject>
             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/all.png" format="PNG"/>
         </imageobject>
       </mediaobject>
    </figure>

	<section xml:id="BreakpointsOverview"><info><title>Breakpoints Overview</title></info>

	  <para>
		The <emphasis role="bold">step by step</emphasis> mode allows to control the execution of an active object at the service level.
		There are several types of breakpoints located at different steps of the service execution.
		These breakpoints are used to stop (when it is enabled) and restart (when it is disabled) an active object execution.
	  </para>

	  <section xml:id="StandardBreakpoints"><info><title>Standard breakpoints</title></info>

		  <para>
			The standard breakpoints are located inside the service thread of an active object.
			These breakpoints do not block the other threads (like immediate services, JMX, ...).
			There are 3 points:
		  </para>

			<itemizedlist>
			    <listitem>
			      <para>
				<emphasis role="bold">New service: </emphasis>
				This breakpoint is located before the beginning of the service.
				If the breakpoint is enabled, then the service will not start.
			      </para>
			      <para>
				Enabled by default.
			      </para>
			    </listitem>

			    <listitem>
			      <para>
				<emphasis role="bold">End service: </emphasis>
				This breakpoint is located after the end of the service.
				Once the service finished, no other service will start if the breakpoint is enabled.
			      </para>
				<para>
				Enabled by default.
			      </para>
			    </listitem>

			    <listitem>
			      <para>
				<emphasis role="bold">Send request: </emphasis>
				This breakpoint is located before sending a request to an active object.
				The request is not added to the request queue of the active object.
			      </para>
				<para>
				Disabled by default.
			      </para>
			    </listitem>
			</itemizedlist>

		</section>

		<section xml:id="ImmediateService"><info><title>Immediate service breakpoints</title></info>

			<para>
				The immediate service breakpoints are located inside each immediate service thread.
				The functionalities of these breakpoints is the same than those of standard breakpoints.
				For one object, there may be several immediate services blocked at the same time.
				There are 2 points for this specific service:
			</para>

			<itemizedlist>
		    <listitem>
		      <para>
			<emphasis role="bold">New immediate service: </emphasis>
						This breakpoint is located before the beginning of the immediate service.
		      </para>
			<para>
			Enabled by default.
		      </para>
		    </listitem>

		    <listitem>
		      <para>
			<emphasis role="bold">End immediate service: </emphasis>
			This breakpoint is located after the end of the immediate service.
		      </para>
			<para>
			Enabled by default.
		      </para>
		    </listitem>
			</itemizedlist>

		</section>
		
	</section>

		<section xml:id="Controls"><info><title>Step by step controls</title></info>

			<section xml:id="EnableDisableNextStep"><info><title>Enable / Disable / NextStep</title></info>

				<para>
					 The main functionality of the step by step mode is to stop and restart an active object (enable/disable button).
					 This functionality is available for one object or for each object in a node, a JVM, a host or a world (all object visible on IC2D monitoring).
					 If an active object has been stopped, it is possible to restart it up to the next enabled breakpoint (next step button).
				</para>

				<figure xml:id="PauseFigure"><info><title>Pause</title></info>
		       <mediaobject>
		         <imageobject>
		             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/suspendResume.png" format="PNG"/>
		         </imageobject>
		       </mediaobject>
		    </figure>

			</section>


		  <section xml:id="Filters"><info><title>Filters</title></info>

			  <para>
				The filter tool allows to enable or disable some specific breakpoints.
				For example, it is possible to enable a new service and send request breakpoints, and disable the others.
			  </para>
			  
			  <figure xml:id="FiltersFigure"><info><title>filters</title></info>
		       <mediaobject>
		         <imageobject>
		             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/filter.png" format="PNG"/>
		         </imageobject>
		       </mediaobject>
		      </figure>

			  <figure xml:id="FiltersPopupFigure"><info><title>Popup filters</title></info>
		       <mediaobject>
		         <imageobject>
		             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/filterPopup.png" format="PNG"/>
		         </imageobject>
		       </mediaobject>
		      </figure>

			</section>

		    <section xml:id="SlowMotion"><info><title>Slow motion</title></info>

			  <para>
				This tool enables to introduce a delay after the breakpoints.
				Using this tool, the active object will stop at each breakpoint and will automatically restart after the delay.
			  </para>

				<figure xml:id="SlowMotionFigure"><info><title>slow motion</title></info>
		       <mediaobject>
		         <imageobject>
		             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/slowMotion.png" format="PNG"/>
		         </imageobject>
		       </mediaobject>
		    </figure>

			</section>

		<section xml:id="Informations"><info><title>Informations</title></info>

			  <para>
				  This view displays some informations of an active object when it is selected.
				  From this view, one can restart a previously blocked active object.
			  </para>
			  <para>
				  This tool also enables to choose the blocked service to restart (immediate or not).
			  </para>

			  <figure xml:id="InformationFigure"><info><title>Information</title></info>
		       <mediaobject>
		         <imageobject>
		             <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="debugging/stepByStep/images/information.png" format="PNG"/>
		         </imageobject>
		       </mediaobject>
		    </figure>

			</section>

		</section>

	</section>

</chapter>
