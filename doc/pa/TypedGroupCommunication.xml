<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="TypedGroupCommunication"><info><title xml:id="TypedGroupCommunication_66">Typed Group Communication</title></info>


<section xml:id="TypedGroupCommunication_html_overview"><info><title xml:id="Overview_66">Overview</title></info>


   <para>Group communication is a crucial feature for high-performance and
   Grid computing. While previous works and libraries proposed such a
   characteristic (e.g. MPI or object-oriented frameworks), the use of
   groups imposed specific constraints on programmers such as
   the use of dedicated interfaces to trigger group communications. We aim at a more
   flexible mechanism by proposing a scheme where,
   given a Java class, one can initiate group communications using the
   standard public methods of the class together with the classical dot
   notation. In this way, group communications remains typed.
   </para>

   <para>In order to ease the use of group communications, we provide a
   set of static methods in the <literal>org.objectweb.proactive.api.PAGroup</literal> class and a
   set of methods in the <literal>org.objectweb.proactive.core.group.Group</literal> interface. ProActive
   also provides <literal>typed group communication</literal>, meaning that only methods defined on
   classes or interfaces implemented by members of the group
   can be called.	
   </para>

   <para>
   There are two ways to create groups of active objects: using the <literal>PAGroup.newGroup(...)</literal>
   static method or using the <literal>PAGroup.newGroupInParallel(...)</literal> one.
   Once the group created, it is possible to turn it into active using the <literal>PAGroup.turnActiveGroup(...)</literal>
   static method.
   Group creation takes several parameters similar to those of active object creation.
   To understand parameters that are not explained here, please refer to <xref linkend="ActiveObjectCreation"/>
   as it contains a detailed explanation of every active object creation parameter.
   The following diagrams contain
   all the methods in the <literal>PAGroup</literal> class and <literal>Group</literal> interface:
   </para>     

   <figure xml:id="PAGroupclassandGroupinterface_66"><info><title>PAGroup class  and Group interface</title></info>
      <mediaobject>
         <imageobject>
            <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/PAGroupAndGroup.png" format="PNG" align="center"/>
         </imageobject>
      </mediaobject>
   </figure>

   <para>
   In this chapter, we will describe how to create a group, send a request to
   members of this group and retrieve the results.
   For this purpose, we will use the following
   classes which can be instantiated as an active	object:
   </para>	

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/class_A.snip"/></textobject></programlisting>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/class_B.snip"/></textobject></programlisting>

</section>

<section xml:id="TypedGroupCommunication_html_Creation"><info><title xml:id="InstantiationTypedGroupCreation_66">Instantiation Typed Group Creation</title></info>

   <indexterm><primary>Group</primary><secondary>Creation</secondary></indexterm>

   <para>Any object which is reifiable can be included in a
   group. Groups are created using the
   <literal>PAGroup.newGroup(...)</literal> static method or the <literal>PAGroup.newGroupInParallel(...)</literal> one.
   The common superclass for every group member has to be specified, giving therefore a minimal
   type to the group. For instance, using the class <literal>A</literal> previously defined,
   the example hereafter shows how to instantiate a group of A's:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_0.snip"/></textobject></programlisting>

   <para>For now, we have just created a group of A's. To know how to fill this group with A object, please refer to <xref linkend="TypedGroupCommunication_html_repr"/>.</para>


   <para>We can also specify parameters for the creation as shown below. Giving a set of nodes, the group will be created filled with as many A active objects as provided nodes
   (one A active object per node). In this case, we can also choose parameters for active object creation. Parameters can be either the sames for every A active object or different
   depending on the node.</para>
   <para>The following example points out the two main ways to create a group using a GCM deployment:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_1.snip"/></textobject></programlisting>

   <para>Once created, each group member is accessible using the <literal>PAGroup.get(Object group, int index)</literal> static method:</para>
   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_2.snip"/></textobject></programlisting>

   <para>It is also possible, once a group instantiated, to turn it into an active object. For that, <literal>PAGroup</literal> provides several
   <literal>turnActiveGroup(...)</literal> methods:</para>
   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_turnActive.snip"/></textobject></programlisting>
</section>

<section xml:id="TypedGroupCommunication_html_repr"><info><title xml:id="Grouprepresentationandmanipulation_66">Group representation and manipulation</title></info>


   <para>The <emphasis role="bold">typed group representation</emphasis> we
   have presented corresponds to the functional view of object groups. In
   order to provide a dynamic management of groups, a second and
   complementary representation of a group has been designed. In order to
   manage a group, this second representation has to be used instead. This
   second representation, <emphasis role="bold">the management
   representation</emphasis>, follows a more standard pattern for grouping
   objects: the <literal>Group</literal> interface.</para>

   <para>We paid attention to the strong coherence between both
   representations of the same group, which implies that modifications
   executed through one representation are immediately reported to the other.
   In order to switch from one representation to the other, two methods
   have been defined: the static method named
   <literal>PAGroup.getGroup</literal> which returns the Group form
   associated to the given group object and the
   <literal>getGroupByType</literal> static method defined in the <literal>Group</literal>
   interface which does the opposite.</para>

   <para>The following example underlines when and how to use each representation of a
   group:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_3.snip"/></textobject></programlisting>

   <para>It is important to note that elements can be included into a typed group only if their classes
   are or extend the class specified at the group creation. In our example,
   an object of class B (B extending A) is included into the group of type A.
   However, based on Java typing, only the methods defined in the class A can
   be invoked on the group.</para>
</section>

<section xml:id="TypedGroupCommunication_html_result"><info><title xml:id="Groupasresultofgroupcommunications_66">Group as result of group communications</title></info>

   <para>The particularity of our group communication mechanism is that the
   <emphasis role="bold">result</emphasis> of a typed group communication
   <emphasis role="bold">is also a group</emphasis>. The result group is
   transparently built at invocation time, with a future for each elementary
   reply. It will be dynamically updated with the incoming results, thus
   gathering results. Nevertheless, the result group can be immediately used
   to execute another method call, even if all the results are not available.
   In that case the <emphasis role="bold">wait-by-necessity</emphasis>
   mechanism implemented by ProActive is used.</para>


   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_4.snip"/></textobject></programlisting>

   <para>As said in the Group creation section, groups whose type is based on
   final classes or primitive types cannot be built. So, the construction of
   a dynamic group as a result of a group method call is also limited.
   Consequently, only methods whose return type is either void or is a
   'reifiable type', in the sense of the Meta Object Protocol of ProActive,
   may be called on a group of objects; otherwise, they will raise an
   exception at run-time, because the transparent construction of a group of
   futures of non-reifiable types fails.</para>

   <para>To take advantage with the asynchronous remote method call model of
   ProActive, some new synchronization mechanisms have been added. Static
   methods defined in the <literal>PAGroup</literal> class enable to
   execute various forms of synchronisation. For instance:
   <literal>waitOne</literal>, <literal>waitN</literal>,
   <literal>waitAll</literal>, <literal>waitTheNth</literal>,
   <literal>waitAndGetOne</literal>. Here is an exemple:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_5.snip"/></textobject></programlisting>

</section>

<section xml:id="TypedGroupCommunication_html_comms"><info><title xml:id="BroadcastvsDispatching_66">Broadcast vs Dispatching</title></info>

   <para>Regarding the parameters of a method call towards a group of
   objects, the default behaviour is to broadcast them to all members. But
   sometimes, only a specific portion of the parameters, usually dependent of
   the rank of the member in the group, may be really useful for the method
   execution, and so, parts of the parameter transmissions are useless. In
   other words, in some cases, there is a need to transmit different
   parameters to the various members.</para>

   <para>A common way to achieve the scattering of a global parameter is to
   use the rank of each member of the group, in order to select the
   appropriate part that it should get in order to execute the method. There
   is a natural traduction of this idea inside our group communication
   mechanism: <emphasis role="bold">the use of a group of objects in order to
   represent a parameter of a group method call that must be scattered to its
   members</emphasis>.</para>

   <para>The default behaviour regarding parameters passing for method call
   on a group is to pass a deep copy of the group of type P to all members.
   Thus, in order to scatter this group of elements of type P, the
   programmer must apply the static method <literal>setScatterGroup</literal>
   of the <literal>PAGroup</literal> class to the group. In order to
   switch back to the default behaviour, the static method
   <literal>unsetScatterGroup</literal> is available.</para>

   <para>Here is an example where we define a group of 2 StringWrappers and then call the <literal>setStrWrapper</literal> method on a group of 3 A's:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_6.snip"/></textobject></programlisting>

   <para>We can notice that only the two first elements of groupA have been modified. The last one remains unchanged.
   If we had defined more parameters than there are group members, a cycle would be operated. In other words, if had defined a parameter group consisted of 4 elements,
   then the <literal>setStrWrapper</literal> method would be called twice on the first A member: the first time with the first parameter and the second one with the fourth
   parameter.</para>
</section>

<section xml:id="AccessByName_66"><info><title>Access By Name</title></info>

   <para> If also possible, when we insert an element into a group, to specify a name. In that case, this group member will be accessible either by its index as previously
   or by its name.
   The example hereafter shows how to insert an element with a name using the <literal>addNamedElement(String key,E value)</literal> method of <literal>Group</literal> and
   how to retrieve this element using its name with the <literal>getNamedElement(String)</literal> method:</para>

   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_7.snip"/></textobject></programlisting>

</section>

<section xml:id="Uniqueserialization_66"><info><title>Unique serialization</title></info>
   <para>Unique serialization is an optimization option that allows performing argument serialization
   before streaming them. If unique serialization is activated, then arguments will
   be transformed into a byte array once and streamed afterward. Unique serialization is
   useful if the size of arguments is significant and considering that bandwidth is more
   important than the ability to stream serialized objects as soon as possible. This behaviour
   can be toggled using the <literal>setUniqueSerialization(Object)</literal> and
   <literal> unsetUniqueSerialization(Object) </literal> static methods of
   <literal>PAGroup</literal>:</para>
   <programlisting language="java"><textobject><textdata fileref="./automatic_snippets/group_A_8.snip"/></textobject></programlisting>
   <para>To learn more about groups, see the
   <!-- This url can only work in the html generated files: in pdf there's no ".." -->
   <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/release-doc/pa/api_published/index.html">JavaDoc</link>
   <phrase os="pdf"> of org.objectweb.proactive.core.group</phrase>
   and the paper <citation><xref linkend="BBC02" endterm="BBC02.abbrev"/></citation>.
   </para>

</section>

</chapter>
