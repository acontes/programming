<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ScilabDoc">
    <info>
        <title>Interface with Matlab/Scilab</title>
    </info>


    <section xml:id="SciMat_Overwiew">
        <info>
            <title>Presentation</title>
        </info>
        <section xml:id="SciMat_Motivations">
            <info>
                <title>Motivations</title>
            </info>
            <para>
                <emphasis>Scilab</emphasis>
                is a scientific software for numerical computations.
                Developed since 1990 by researchers from INRIA and ENPC, it
                is now maintained and developed by Scilab Consortium since
                its creation in May 2003. Scilab includes hundreds of
                mathematical functions with the possibility to add
                interactively programs from various languages (C,
                Fortran...). It has sophisticated data structures (including
                lists, polynomials, rational functions, linear systems...),
                an interpreter and a high level programming language. Scilab
                works on most Unix systems (including GNU/Linux) and Windows
                (9X/2000/XP).
            </para>

            <para>
                <emphasis>Matlab</emphasis>
                is a numerical computing environment and programming
                language. Created by The MathWorks, Matlab allows easy
                matrix manipulation, plotting of functions and data,
                implementation of algorithms, creation of user interfaces,
                and interfacing with programs in other languages. Although
                it specializes in numerical computing, an optional toolbox
                interfaces with the Maple symbolic engine, allowing it to be
                part of a full computer algebra system.

                As of 2004, MATLAB was used by more than one million people
                in industry and academia.
            </para>

            <para>
                The goal of the ProActive Interface is to equip Scilab and
                Matlab with a generic interface to Grid computing. This
                extension allows the deployment of Scilab/Matlab instances
                on several nodes of the grid (and to use these instances
                like computing engines) and submitting of Scilab/Matlab
                tasks over the grid. These engines are monitored by a
                central ProActive API. A natural condition is to deploy an
                application (based on this interface) strictly on hosts
                where the Scilab or Matlab software is installed.
            </para>
        </section>
        <section xml:id="SciMat_Features">
            <info>
                <title>Features</title>
            </info>
            <para>
                The interface with Matlab and Scilab inside ProActive comes as a a GUI that can launch remote Matlab or
                Scilab scripts and visualize
                results (without dependencies between tasks or transfering results from one task to the other).
                The usage of this application is explained in the following section :
                <xref linkend="SciMat_GUI"/>. More possibilities exist inside the ProActive Scheduler. Please refer to
                the scheduler documentation for more info.
            </para>
        </section>
    </section>


    <section xml:id="SciMat_GUI">
        <info>
            <title>
                Graphical User Interface (Matlab/Scilab Grid ToolBox)
            </title>
        </info>


        <para>
            This interface allows to launch remote Matlab/Scilab scripts (m or sci files), and visualize results
            textually. Before using it a couple of installation and configuration steps are required,for both Matlab and
            Scilab use.
        </para>

        <section xml:id="SciMat_Scilab_Installation">
            <info>
                <title>Installation for Scilab</title>
            </info>
            <para>
                This ProActive interface supports Scilab's release 4.1.2 and
                manipulates the following types: Double, String, Double
                Matrix, String Matrix, Complex, Complex Matrix.
            </para>

            <para>
                First, scilab needs to be installed or compiled, the instructions are in the file
                PROACTIVE/examples/scilab/README :
            </para>

            <programlisting><textobject><textdata fileref="../examples/scilab/README"/></textobject></programlisting>
        </section>
        <section xml:id="SciMat_Matlab_Installation">
            <info>
                <title>Installation for Matlab</title>
            </info>

            <para>
                This ProActive interface supports many Matlab releases (from
                7.1 on) and manipulates the following types: Double
                Matrixes, String Matrixes, Complex Matrixes, Integer
                Matrixes, Cells and Structs.
            </para>

            <para>
                For Matlab use, Matlab's link to Java (from the
                <link xlink:href="http://ptolemy.eecs.berkeley.edu/ptolemyII/index.htm">ptolemy</link>
                project
                ) needs to be compiled, the instructions for compiling it
                are described in the file PROACTIVE/dev/matlab/README :
            </para>

            <programlisting><textobject><textdata fileref="../dev/matlab/README"/></textobject></programlisting>
        </section>
        <section xml:id="SciMat_Configuration">
            <info>
                <title>Configuration of the GUI</title>
            </info>

            <para>
                For both Scilab and Matlab, a configuration step is required, this step is described
                in PROACTIVE/examples/scilab/README above.
            </para>


        </section>

        <section xml:id="LaunchingMatlabScilabGridToolBox">
            <info>
                <title>Launching Matlab/Scilab Grid ToolBox</title>
            </info>


            <para>
                To launch the application, you have to execute the
                script:
            </para>

            <para>On Unix:</para>

            <screen>cd examples/scilab scilab.sh</screen>

            <para>On Windows:</para>

            <screen>cd examples\scilab scilab.bat</screen>

            <para>
                if you use a local version of Matlab or Scilab, you must
                declare the environment variables in the file:
            </para>

            <screen>examples/scilab/scilab_env.[sh|bat]</screen>

            <para>
                Once the application is started, the main frame is
                displayed. This frame is composed in three parts:
            </para>

            <itemizedlist>
                <listitem>
                    <para>The tree of Matlab/Scilab engines .</para>
                </listitem>

                <listitem>
                    <para>
                        The ltables of pending, running, and terminated
                        tasks.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The text area to display the log of user
                        operations.
                    </para>
                </listitem>
            </itemizedlist>

            <figure xml:id="Mainframe">
                <info>
                    <title>Main frame</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="scilab/pics/ScilabToolBox.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section xml:id="Deploymentoftheapplication">
            <info>
                <title>Deployment of the application</title>
            </info>


            <para>
                The first step is to deploy the topology of the
                application. A dialog enables to choice the descriptor
                and to select the virtual node. The button
                <emphasis>deploy</emphasis>
                launches the deployment of Matlab/Scilab engines over
                the nodes.
            </para>

            <figure xml:id="Deploymentoftheapplication_17">
                <info>
                    <title>Deployment of the application</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="scilab/pics/ScilabToolBox1.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section xml:id="Tasklaunching">
            <info>
                <title>Task launching</title>
            </info>


            <para>
                The next step is the task launching. A dialog enables to
                select the script and possibly to define the script
                initialization, the return values, and the task
                priority. The button
                <emphasis>start</emphasis>
                creates and sends the task.
            </para>

            <figure xml:id="Creationofatask">
                <info>
                    <title>Creation of a task</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="scilab/pics/ScilabToolBox2.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section xml:id="Displayofresults">
            <info>
                <title>Display of results</title>
            </info>


            <para>
                The last step is the display of results. A
                <emphasis>double click</emphasis>
                on a task in the table of terminated tasks sets visible
                a dialog. This dialog displays the tasks properties and
                the result (with the possibility to save it in a file)
            </para>

            <figure xml:id="Displayaresult">
                <info>
                    <title>Display a result</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="scilab/pics/ScilabToolBox4.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>

        <section xml:id="Taskmonitoring">
            <info>
                <title>Task monitoring</title>
            </info>


            <para>
                In the main frame, several tables of tasks (pending,
                executing , terminated) allow to monitor the
                application. These tables allows to show just for each
                task the relevant informations. A double click on a task
                in these tables sets visible a dialog. This dialog
                displays the tasks properties (path, script
                initialization, results).
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The table of pending tasks enables to cancel
                        selected tasks and to clear all cancelled tasks
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The table of executing tasks enables to kill
                        selected tasks and to clear all killed tasks
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The table of terminated tasks enables to get the
                        status of tasks (SUCCESS or ABORT), to save the
                        first selected task in file the result, to
                        remove selected tasks.
                    </para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="Enginemonitoring">
            <info>
                <title>Engine monitoring</title>
            </info>


            <para>
                In the main frame, a tree describes all nodes used by
                the application. Over the execution of the application,
                if a task is aborted, the engine of this task may be
                unstable ( this one is displayed with a red foreground).
                A rigth-click on it show a popup menu to restart it.
            </para>

            <figure xml:id="StateofEngines">
                <info>
                    <title>State of Engines</title>
                </info>


                <mediaobject>
                    <imageobject>
                        <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="scilab/pics/ScilabToolBox3.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
    </section>

    <section xml:id="SciMat_Advanced">
        <info>
            <title>Advanced Usage</title>
        </info>

        <section xml:id="SciMat_Architecture">
            <info>
                <title>Matlab/Scilab GUI Architecture</title>
            </info>


            <para>
                The interface architecture is based on the Master-Workers
                model. In this communication model, the master entity
                monitors the workers entities. In our case:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The role of the master is to deploy the topology of
                        matlab/scilab instances (slaves) and to distribute
                        tasks (between the different engines);
                    </para>
                </listitem>
            </itemizedlist>

            <itemizedlist>
                <listitem>
                    <para>
                        The role of the worker is to perform the submitted
                        tasks (by the master).
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                There are four classes which are intented for the user:
            </para>

            <para>
                The Class
                <literal>MSService</literal>
                implements all functionalities to deploy engines, to
                distribute tasks, and to retrieve results (of computed
                tasks).
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        The deployment is made thank to a ProActive
                        descriptor. This deployment descriptor describes the
                        different nodes of the grid taking part at the
                        computation. A singularity of this descriptor is the
                        declaration of specific matlab/scilab environment
                        variables for each node. The deployment is achieved
                        by a call of the method "deployEngine". This method
                        takes in parameters the VirtualNode id, the
                        descriptor path, and the number of engines to
                        create.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        The distribution of a Matlab/Scilab task is made
                        thanks to the call of the method "sendTask". After
                        the call, the task is set in pending queue. This
                        queue is managed like a FIFO with priority. The task
                        is in head of the queue is sent when a engine is
                        available.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        After the computation of a task, the matlab/scilab
                        engine returns the result. To retrieve this result,
                        it is necessary to listen the event "SciEventTask"
                        thank to the method "addEnventListenerTask".
                    </para>
                </listitem>

                <listitem>
                    <para>
                        This class offers also the possibilities to cancel a
                        pending task, to kill a running task , and to
                        restart a engine.
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                The Class
                <literal>GenTaskInfo</literal>
                contains all informations about a Matlab/Scilab task. Among
                these informations, there are:
            </para>

            <itemizedlist>
                <listitem>
                    <para>The state of the tasks:</para>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>WAIT</emphasis>
                                : The task is in the pending queue
                            </para>
                        </listitem>
                    </itemizedlist>

                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>RUN</emphasis>
                                : The task is computing by an engine
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>SUCCES</emphasis>
                                : The computation of the task is terminated
                                with success
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>ABORT</emphasis>
                                : The computation of the task was avorted
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>KILL</emphasis>
                                : The task was killed by the user during the
                                computation
                            </para>
                        </listitem>

                        <listitem>
                            <para>
                                <emphasis>CANCEL</emphasis>
                                : The Task was cancelled by the user before
                                its computation
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>

                <listitem>
                    <para>The global and execution time</para>
                </listitem>

                <listitem>
                    <para>
                        The priority of the task (
                        <emphasis>LOW</emphasis>
                        ,
                        <emphasis>NORMAL</emphasis>
                        ,
                        <emphasis>HIGH</emphasis>
                        )
                    </para>
                </listitem>

                <listitem>
                    <para>The task itself</para>
                </listitem>

                <listitem>
                    <para>
                        The result of the associated task ( It is available
                        when the state is
                        <emphasis>ABORT</emphasis>
                        or
                        <emphasis>SUCCESS</emphasis>
                        )
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                The class
                <literal>SciTask</literal>
                describes a scilab task. It defines In and Out data, the job
                and the job initialization. A job is a scilab script
                (*.sce), it contains all instructions executed by a remote
                engine. In data and the job initialization allow to
                customize the execution and Out data define the values to
                return after the execution.
            </para>
            <para>
                The class
                <literal>MatlabTask</literal>
                describes a matlab task. It defines similar data as the
                scilab task. A job is a scilab script (*.m).
            </para>

            <para>
                The class
                <literal>GeneralResult</literal>
                describes a result of a Scilab or Matlab task. A result is
                the list of return values (defining in the task).
            </para>

            <para>
                The following example
                <xref linkend="sciex1"/>
                presents how to compute a basic scilab task and to display
                the result. In our case the task initializes the variable
                <literal>"n"</literal>
                and increments it. The next example shows a possibly
                deployment descriptor
                <xref linkend="sciex2"/>
                .
            </para>

            <example xml:id="sciex1">
                <info>
                    <title>Example: Interface Matlab/Scilab</title>
                </info>


                <programlisting xml:lang="java"><textobject><textdata fileref="../src/Extensions/org/objectweb/proactive/extensions/scilab/test/SciTest2.java"/></textobject></programlisting>
            </example>
            <example xml:id="sciex2">
                <info>
                    <title>Descriptor deployment</title>
                </info>

                <programlisting xml:lang="xml"><textobject><textdata fileref="../examples/scilab/GCMA.xml"/></textobject></programlisting>
            </example>
        </section>
    </section>
</chapter>
