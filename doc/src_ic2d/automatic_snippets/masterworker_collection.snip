   /**
    * Wait for all results, will block until all results are computed <br>
    * The ordering of the results depends on the result reception mode in use <br>
    * @return a collection of objects containing the result
    * @throws org.objectweb.proactive.extensions.masterworker.TaskException if a task threw an Exception
    */
   List<R> waitAllResults() throws TaskException;

   /**
    * Wait for the first result available <br>
    * Will block until at least one Result is available. <br>
    * Note that in SubmittedOrder mode, the method will block until the next result in submission order is available<br>
    * @return an object containing the result
    * @throws TaskException if the task threw an Exception
    */
   R waitOneResult() throws TaskException;

   /**
   * Wait for at least one result is available <br>
    * If there are more results availables at the time the request is executed, then every currently available results are returned
   * Note that in SubmittedOrder mode, the method will block until the next result in submission order is available and will return
   * as many successive results as possible<br>
   * @return a collection of objects containing the results
   * @throws TaskException if the task threw an Exception
   */
   List<R> waitSomeResults() throws TaskException;

   /**
    * Wait for a number of results<br>
    * Will block until at least k results are available. <br>
    * The ordering of the results depends on the result reception mode in use <br>
    * @param k the number of results to wait for
    * @return a collection of objects containing the results
    * @throws TaskException if the task threw an Exception
    */
   List<R> waitKResults(int k) throws TaskException;

   /**
    * Tells if the master is completely empty (i.e. has no result to provide and no tasks submitted)
    * @return the answer
    */
   boolean isEmpty();

   /**
    * Returns the number of available results <br/>
    * @return the answer
    */
   int countAvailableResults();

