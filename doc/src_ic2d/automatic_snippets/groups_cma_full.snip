   public static void main(String args[]) {
       try {
           Vector<CMAgentMigrator> agents = new Vector<CMAgentMigrator>();
           BufferedReader inputBuffer = new BufferedReader(new InputStreamReader(System.in));
           GCMVirtualNode vn = deploy(args[0]);
           //TODO 1. Create a new empty group
           CMAgentMigrator monitorsGroup = (CMAgentMigrator) PAGroup.newGroup(CMAgentMigrator.class
                   .getName());

           //TODO 2. Create a collection of active objects with on object on each node
           for (Node node : vn.getCurrentNodes()) {
               CMAgentMigrator ao = (CMAgentMigrator) PAActiveObject.newActive(CMAgentMigrator.class
                       .getName(), new Object[] {}, node);
               agents.add(ao);
           }

           //TODO 3. Get a management representation of the monitors group
           Group<CMAgentMigrator> gA = PAGroup.getGroup(monitorsGroup);
           //ask for adding or removing nodes
           //get statistics
           int k = 1;
           int choice;
           while (k != 0) {
                //display the menu
               k = 1;
               System.out.println("Toggle monitored nodes (*) or display statistics: ");
               for (CMAgentMigrator agent : agents) {
                   if (gA.contains(agent))

                       //TODO 5. Print the node URL
                       System.out.println(" " + k + ".* " + PAActiveObject.getActiveObjectNodeUrl(agent));
                   else
                       System.out.println(" " + k + ".  " + PAActiveObject.getActiveObjectNodeUrl(agent));
                   k++;
               }
               System.out.println("-1.  Display statistics for monitored nodes");
               System.out.println(" 0.  Exit");

               //select a node
               do {
                   System.out.print("Choose a node to add or remove  :> ");
                   try {
                       // Read am option from keyboard
                       choice = Integer.parseInt(inputBuffer.readLine().trim());
                   } catch (NumberFormatException noExcep) {
                       choice = -1;
                   }
               } while (!(choice >= 1 && choice < k || choice == 0 || choice == -1));
               if (choice == 0)
                   break;
               if (choice == -1) {

                   State resultsGroup = monitorsGroup.getCurrentState();
                   while (PAGroup.size(resultsGroup) > 0) {
                       //TODO 5. Use PAGroup.waitAndGetOneThenRemoveIt() to control the list of State futures
                       State statistic = (State) PAGroup.waitAndGetOneThenRemoveIt(resultsGroup);
                       System.out.println(statistic.toString());
                   }
               } else {
                   if (gA.contains(agents.elementAt(choice - 1)))
                       gA.remove(agents.elementAt(choice - 1));
                   else
                       gA.add(agents.elementAt(choice - 1));
               }
           }

           //stopping all the objects and JVMS
           pad.kill();
           PALifeCycle.exitSuccess();
       } catch (NodeException nodeExcep) {
           System.err.println(nodeExcep.getMessage());
       } catch (ActiveObjectCreationException aoExcep) {
           System.err.println(aoExcep.getMessage());
       } catch (IOException e) {
           e.printStackTrace();
       } catch (ClassNotReifiableException e) {
           e.printStackTrace();
       } catch (ClassNotFoundException e) {
           e.printStackTrace();
       }
   }
