package org.objectweb.proactive.examples.userguide.cmagent.deployed;

import java.io.File;

import org.objectweb.proactive.ActiveObjectCreationException;
import org.objectweb.proactive.api.PAActiveObject;
import org.objectweb.proactive.api.PALifeCycle;
import org.objectweb.proactive.core.ProActiveException;
import org.objectweb.proactive.core.node.NodeException;
import org.objectweb.proactive.examples.userguide.cmagent.initialized.CMAgentInitialized;
import org.objectweb.proactive.extensions.gcmdeployment.PAGCMDeployment;
import org.objectweb.proactive.gcmdeployment.GCMApplication;
import org.objectweb.proactive.gcmdeployment.GCMVirtualNode;


public class Main {
   private static GCMApplication pad;

   //deployment method
   private static GCMVirtualNode deploy(String descriptor) {
       try {
           pad = PAGCMDeployment.loadApplicationDescriptor(new File(descriptor));
           //TODO 2. Activate all Virtual Nodes
           pad.startDeployment();
           pad.waitReady();

           //TODO 3. Get the first Virtual Node specified in the descriptor file
           GCMVirtualNode vn = pad.getVirtualNode("remoteNode");

           //TODO 4. Return the virtual node
           return vn;
       } catch (NodeException nodeExcep) {
           System.err.println(nodeExcep.getMessage());
       } catch (ProActiveException proExcep) {
           System.err.println(proExcep.getMessage());
       }
       return null;
   }

   public static void main(String args[]) {
       try {
           //TODO 5. Get the virtual node through the deploy method
           GCMVirtualNode vn = deploy(args[0]);
           //TODO 6. Create the active object using a node on the virtual node
           CMAgentInitialized ao = (CMAgentInitialized) PAActiveObject.newActive(CMAgentInitialized.class
                   .getName(), new Object[] {}, vn.getANode());
           //TODO 7. Get the current state from the active object
           String currentState = ao.getCurrentState().toString();

           //TODO 8. Print the state
           System.out.println(currentState);

           //TODO 9. Stop the active object
           PAActiveObject.terminateActiveObject(ao, false);

           //TODO 10. Stop the virtual node
           pad.kill();
           PALifeCycle.exitSuccess();
       } catch (NodeException nodeExcep) {
           System.err.println(nodeExcep.getMessage());
       } catch (ActiveObjectCreationException aoExcep) {
           System.err.println(aoExcep.getMessage());
       }
   }
}
