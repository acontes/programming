<?xml version="1.0" encoding="utf-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Migration">
	<info><title>Making ProActive programming easier: the ProActive Java Annotations System</title></info>
	
	<section><info><title>Annotation Overview</title></info>
		<para>TODO</para>
	</section>
	
	<section><info><title>Compile-time annotations</title></info>
		
		<section>
			<info><title>Motivation</title></info>
		<para>
		These annotations provide a way to check at compile-time the constraints imposed 
			on Java code by the ProActive library. Usually, these constraints are documented 
			in the ProActive manual, and it is left to the responsability of the programmer to 
			obey these rules. If the rules are broken, the effects are usually seen at runtime,
			translated into specific runtime exceptions, which are difficult to interpret 
			by the unexperienced ProActive programmers. The compile-time annotation system  
			makes it possible to verify these rules at compile-time, in order to avoid long debugging
			sessions made out of stacktraces eyeballing. Ideally, the runtime errors that the programmer
			will receive will be more related to the logic of the application, and less 
			to the misusage of the ProActive library...   
		</para>
		</section>
		
		<section>
			<info><title>General usage</title></info>
		<para>
		First of all, note that the annotation system is <emphasis role="bold">non-intrusive</emphasis>. 
			You can easily program using the ProActive library without bothering about annotations. 
			They only serve as helpers for the developper, as mentioned previously.
		</para>
			<para>
		Second of all, the compile-time annotations are implemented using tools provided 
			in the standard JDK distribution, starting from version 1.5. 
			The following backward-compatibility goal was kept in mind while developping 
			the annotation system: the code written by the ProActive library user should compile using JDK 1.5.
			But if you want the "full" power of the annotation system, it is advised to use JDK 1.6 or more. If you 
		    (still) develop using JDK 1.5, some of the checks will not be performed. 
			This documentation specifies which checks are disabled for 1.5.    
			</para>
			<para>
		The compile-time checks are integrated into the compilation process. 
			This means that the checks will be performed when you will compile your code, 
			if you specify several command-line switches for the compilation command.
			Depending on the JDK version you are using, different compilation commands must be used.
			If you use JDK 1.5, you must compile using 
		<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/j2se/1.5.0/docs/guide/apt/GettingStarted.html">apt</link>. 
			If you use JDK 1.6, you can simply use javac, with the appropriate command-line switches.
			These will be described in the following paragraphs.
			</para>
		
		<para>
		The general way to use annotations is the following. 
			For every annotation @Annotation provided by the ProActive library:
			<itemizedlist>
			   <listitem>
				<para>
					Annotate the applicable programming language construct with the @Annotation
				</para>
			   </listitem>
			   <listitem>
				<para>
					When compiling, use one of the following compilation commands:
					<itemizedlist>
						<listitem>
							<para>For JDK 1.5:
							  <screen>$apt -cp $CLASSPATH:$JAVA_HOME/lib/tools.jar [input_files]</screen>
							</para>
						</listitem>
						<listitem>
							<para>For JDK 1.6:
							  <screen>$javac -processor org.objectweb.proactive.extra.annotation.ProActiveProcessorCTree -cp $CLASSPATH:$JAVA_HOME/lib/tools.jar [input_files]</screen>
							</para>
						</listitem>
					</itemizedlist>
					The above snippets assume that the ProActive distribution library and its dependencies are in the classpath, and that $JAVA_HOME environment variable points to you JDK distribution.
				</para>
			   </listitem>
			   <listitem>
				<para>
					Correct the compile-time errors, and repeat. 
				</para>
			   </listitem>
			</itemizedlist>
			ProActive.jar must already be in the classpath.  
		</para>
			
			<para>
			You can also use the annotation processing inside IDEs. 
			Following is a description on how you can use it with major IDEs:
			<itemizedlist>
			  <listitem>
				<para>
					<emphasis role="bold">Eclipse</emphasis>
					To configure Eclipse, the following steps must be undertaken:
<orderedlist>
  <listitem>
   <para>Right-click on the project you are working on, and select Properties to bring on the
      Project Properties property page</para>
  </listitem>
<listitem>
   <para>Go to Java Compiler ->Annotation Processing</para>
  </listitem>
<listitem>
   <para>Check the 'Enable project specific settings', 'Enable annotation processing' and 'Enable
      processing in editor' checkboxes</para>
  </listitem>
<listitem>
   <para>Go to Factory Path under Annotation Processing</para>
  </listitem>
<listitem>
   <para>Select 'Add External JARs' and navigate to the location of ProActive.jar</para>
  </listitem>
<listitem>
   <para>Make sure the checkbox next to the ProActive jar is checked</para>
  </listitem>
<listitem>
   <para>Click on apply. You will be prompted with a dialog box that will ask you whether you
      want to do a full project rebuild. If this is what you want, click Yes, otherwise just hit
      No.</para>
  </listitem>
<listitem>
   <para>Click on the OK button.</para>
  </listitem>
</orderedlist>
	Then, you can use the annotations, and when starting a compilation inside
      Eclipse, the violations of the Active Object constraints will appear as error markers inside the
      IDE. Note that this will only verify the constraints checked using apt - this is the 
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dev.eclipse.org/newslists/news.eclipse.tools.jdt/msg22872.html">position of the Eclipse development team</link>.					
				</para>
			  </listitem>
			</itemizedlist>
			<itemizedlist>
			  <listitem>
				<para>
					<emphasis role="bold">NetBeans</emphasis>
					cannot be configured to use APT proactive annotation processor without manual editing of project's build.xml file.
					<para>
					In order to setup annotation processing using javac (applicable for JDK 6) goto
					</para>
					<para>
					Project Properties -> Compiling -> Additional compiler options and add the following option
					</para>
					<para>
					  <screen>-processor org.objectweb.proactive.extra.annotation.ProActiveProcessorCTree</screen>
					</para>
					<para>
					Then build the project.
					</para>
				</para>
			  </listitem>
			</itemizedlist>
			<itemizedlist>
			  <listitem>
				<para>
					<emphasis role="bold">IntelliJ IDEA</emphasis>
					<para>
					To setup javac's annotation processor first make sure that javac compiler is chosen in
					Project Settings -> Compiler.
					</para>
					<para>
					Then add the following option to Additional command line parameters
					</para>
					<para>
					  <screen>-processor org.objectweb.proactive.extra.annotation.ProActiveProcessorCTree</screen>
					</para>
				</para>
			  </listitem>
			</itemizedlist>
		</para>
		</section>
		
		<section>
			<info><title>@ActiveObject</title></info>
			<para>
			The @ActiveObject annotation is applicable on a Java class definition, and it tests 
			whether the class can be the type of an Active Object or not. As you can see in the
			Active Object section of the manual, there are 
			some constraints that a class definition should satisfy in order to be used as an active object type:
			<itemizedlist>
				<listitem>
				   <para>non private no-argument constructor should be explicitly defined</para>
			    </listitem>
				<listitem>
				   <para>the class should not be final</para>
			    </listitem>
				<listitem>
				   <para>the class should be public</para>
			    </listitem>
				<listitem>
				   <para>the class should not have final non-private methods nor final fields</para>
			    </listitem>
				<listitem>
				   <para>a public field without setter and getter is not recommended</para>
			    </listitem>
				<listitem>
				   <para>arguments of constructors must be Serializable, if they are not primitive types</para>
			    </listitem>
				<listitem>
				   <para>arguments of non-private methods must be Serializable, if they are not primitive types</para>
			    </listitem>
				<listitem>
				   <para>an Active Object method should not return null, as this literal cannot be checked on the caller side</para>
			    </listitem>
			</itemizedlist>
			Using JDK 1.6, all the above-mentioned boints will be checked. 
			If you use JDK 1.5, the last point will not be checked, and also only a test to see if a no-arg constructor 
			is present will be run - will not test to see if the constructor has an empty body. 
</para>
		</section>
		
		<section>
			<info><title>@RemoteObject</title></info>
		<para>
			The @RemoteObject annotation is applicable on a Java class definition and it verifies limitations
			of remote objects. The list of limitations is exactly the same as for active objects (see above) with only one exception -
			remote object methods can return null.
		</para>
		</section>
		
		<section>
			<info><title>@Migratable</title></info>
		<para>
			TODO
		</para>
		</section>
		
		<section>
			<info><title>@MigrationSignal</title></info>
		<para>
			@MigrationSignal is applied on a method definition, in order to mark the fact that the annotated method should be used as a migration signal. What is a migration signal? The most common way to implement migration using ProActive is for the active object to export a public method inside which to call <strong>PAMobileAgent.migrateTo()</strong>, and this call should be the last statement inside the method body. This kind of method will be called henceforth a *migration signal*.
			The MigrationSignal annotation enforces the migration guidelines specified in the ProActive manual, section on mobility. At compilation, the annotated method is checked to see if migrateTo() is called, and if this is indeed the last statement.
			Migration signals can be also defined by calling other methods that perform migration - and not directly through calling migrateTo(). 
		</para>
		</section>
		
		<section>
			<info><title>Migration Strategy</title></info>
		<para>
			When implementing mobile agents using ProActive, one can specify methods that should be executed when arriving to, or departing from, a site. The signature of these methods must be:
			<screen>void methodName()</screen>
			namely, the method must be parameterless and with no return value. For further details you can look 
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/userfiles/file/papers/Mobility.pdf">here</link>
			This constraint is checked using two annotations: <emphasis role="bold">@OnDeparture</emphasis> and <emphasis role="bold">@OnArrival</emphasis>. 
			Both of them are applicable on method definitions:
			<itemizedlist>
				<listitem>
				   <para><emphasis role="bold">@OnDeparture</emphasis> marks the method that should be executed when the mobile agents departs from a site</para>
			    </listitem>
				<listitem>
				   <para><emphasis role="bold">@OnArrival</emphasis> marks the method that should be executed when the mobile agents arrives to a site</para>
			    </listitem>
			</itemizedlist>
			At compilation, the methods are checked to match the above-mentioned signature. The check is done for both JDK versions - 1.5 and 1.6. 
		</para>
		</section>
		
		<section>
			<info><title>@NodeAttchedCallback</title></info>
		<para>
		    When a client subscribe to Node attachment notification, the method passed as parameter is invoked each time a Node is attached to the GCMVirtualNode. 
		    The method must have the following signature: 
		    
		    <screen>void method(Node, String)</screen>		    
			
			This constrain is checked by using @NodeAttchedCallback annotation with a method definition. 
			For more information about node attachment notification see 
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/trunk-doc/javadoc/publicApi/org/objectweb/proactive/gcmdeployment/GCMVirtualNode.html#subscribeNodeAttachment(java.lang.Object,%20java.lang.String,%20boolean)">org.objectweb.proactive.gcmdeployment.GCMVirtualNode.subscribeNodeAttachment(...)</link>
		</para>
		</section>
		
		<section>
			<info><title>@VirtualNodesReadyCallback</title></info>
		<para>
			When a client subscribe to isReady notification, the method passed as parameter is invoked when the Virtual Node becomes Ready.
			The method must have the following signature: 
			
			<screen>void method(String)</screen>			
			
			This constrain is checked by using @VirtualNodesReadyCallback annotation with a method definition. 
			For more information about isReady notification see 
			<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://proactive.inria.fr/trunk-doc/javadoc/publicApi/org/objectweb/proactive/gcmdeployment/GCMVirtualNode.html#subscribeIsReady(java.lang.Object,%20java.lang.String)">org.objectweb.proactive.gcmdeployment.GCMVirtualNode.subscribeIsReady(...)</link>
		</para>
		</section>
	</section>
	
	<section><info><title>Run-time annotations</title></info>
		<para>TODO</para>
	</section>
	
</chapter>