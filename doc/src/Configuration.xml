<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Configuration"><info><title xml:id="ProActiveBasicConfiguration_69">ProActive Basic Configuration</title></info>
  

  <section xml:id="Overview_69"><info><title>Overview</title></info>
    

    <para>In order to get easier and more flexible configuration in ProActive,
    we introduced an xml file where all ProActive related configuration is
    located. It represents properties that will be added to the System when an
    application using ProActive is launched. Some well-known
    properties(explained after) will determine the behaviour of ProActive
    services inside a global application. That file can also contain <emphasis role="bold">user-defined</emphasis> properties to be used in their
    application.</para>
  </section>
  

  <section xml:id="Howdoesitwork_69"><info><title>How does it work?</title></info>
    

    <para>Using this file is very straightforward, since all lines must follow
    the model: &lt;prop <emphasis role="bold">key</emphasis>='somekey'
    <emphasis role="bold">value</emphasis>='somevalue'/&gt;</para>

    <para>Those properties will be set in the System using
    System.setProperty(key,value) <emphasis role="bold">if and only
    if</emphasis> this property is not already set in the System.</para>

    <para>If an application is using ProActive, that file is loaded once when
    a method is called through a ProActive 'entry point'. By 'entry point' we
    mean ProActive class, NodeFactory class, RuntimeFactory class (static
    block in all that classes).</para>

    <para>For instance calling <emphasis role="bold">PAActiveObject.newActive or
    NodeFactory.getNode</emphasis> .... loads that file. This only occurs once
    inside a jvm.</para>

    <para>As said before this file can contain <emphasis role="bold">user-defined</emphasis> properties. It means that people used
    to run their application with:</para>

    <para>java .... -Dprop1=value1 -Dprop2=value2 .... -Dpropn=valuen can
    define all their properties in the ProActive configuration file
    with:</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='prop1' <emphasis role="bold">value</emphasis>='value1'/&gt;</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='prop2' <emphasis role="bold">value</emphasis>='value2'/&gt;</para>

    <para>...</para>

    <para>&lt;prop <emphasis role="bold">key</emphasis>='propn' <emphasis role="bold">value</emphasis>='valuen'/&gt;</para>
  </section>

  <section xml:id="Wheretoaccessthisfile"><info><title>Where to access this file?</title></info>
    

	<section xml:id="ProActiveDefaultConfigurationfile_69"><info><title>ProActive Default Configuration file</title></info> 
    <para>There is a default file with default ProActive options located under
    ProActive/src/org/objectweb/proactive/core/config/ProActiveConfiguration.xml.
    This file is automatically copied with the same package structure under
    the classes directory when compiling source files with the
    ProActive/compile/build facility. Hence it is included in the jar file of
    the distribution under
    org/objectweb/proactive/core/config/ProActiveConfiguration.xml (See below
    for default options).</para>
	</section>
	<section xml:id="UserdefinedProActiveConfigurationfile_69"><info><title>User-defined ProActive Configuration file</title></info> 
	<para>
		It is possible for an user to override the default ProActive configuration file
		by setting properties in a file located at the following path :
	    <screen>
	     for unix users : $HOME/.proactive/ProActiveConfiguration.xml
	     for windows users : $HOME\.proactive\ProActiveConfiguration.xml  </screen>
	</para>
    </section>
    <section xml:id="AlternateUserConfigurationfile_69"><info><title>Alternate User Configuration file</title></info> 

    <para>People can specify their own configuration file by running their
    application with proactive.configuration option, i.e</para>


    <para>java ... <emphasis role="bold">-Dproactive.configuration=pathToTheConfigFile</emphasis>. In
    that case, the given xml file is loaded. Some ProActive properties(defined
    below) are required for applications using ProActive to work, so even if
    not defined in user config file, they will be loaded programatically with
    default values. So people can just ignore the config file if they are
    happy with the default configuration or create their own file if they want
    to change ProActive properties values or add their own properties</para>

    <para>A specific tag: <emphasis role="bold">&lt;ProActiveUserPropertiesFile&gt;</emphasis> is provided in
     Deployment Descriptors (see <xref linkend="XML_Descriptors"/>) to notify
    remote jvms which configuration file to load once created:</para>

    <screen>&lt;jvmProcess class='org.objectweb.proactive.core.process.JVMNodeProcesss'&gt;
...
 &lt;ProActiveUserPropertiesFile&gt;
 &lt;absolutePath value='/net/home/rquilici/config.xml'/&gt;
 &lt;/ProActiveUserPropertiesFile&gt;
...
&lt;/jvmProcess&gt; </screen>
</section>
  </section>

  <section xml:id="ProActiveproperties_69"><info><title>ProActive properties</title></info>
    

    <section xml:id="Required_69"><info><title>Required</title></info>
     

        <para><itemizedlist>
            <listitem>
              <para><emphasis role="bold">proactive.communication.protocol</emphasis>
              represents the communication protocol i.e the protocol, objects
              on remote JVMS are exported with. At this stage several
              protocols are supported: <emphasis role="bold">RMI(rmi),
              HTTP(http), IBIS/RMI(ibis), SSH tunneling for RMI/HTTP(rmissh),
              JINI(jini)</emphasis>. It means that once the JVM starts, Nodes,
              Active Objects that will be created on this JVM, will export
              themselves using the protocol specified in <emphasis role="bold">proactive.communication.protocol</emphasis>
              property. They will be reachable transparently through the given
              protocol.</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">schema.validation</emphasis> . Two
              values are possible:<emphasis role="bold">true,
              false</emphasis>. If true, all xml files will be validated
              against provided schema. Default is <emphasis role="bold">true</emphasis></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.future.ac</emphasis> . Two
              values are possible:<emphasis role="bold">true,
              false</emphasis> If 'true' is chosen, Automatic Continuations
              <indexterm><primary>Automatic Continuation</primary><secondary>proactive.future.ac</secondary></indexterm>
              are activated (see <xref linkend="AC"/>). Default is <emphasis role="bold">true</emphasis></para>
            </listitem>
          </itemizedlist></para>

        <para>Note that if not specified those properties are set
        programmatically with the default value.</para>
        
      </section>
      <section xml:id="Faulttoleranceproperties_69"><info><title>Fault-tolerance properties</title></info>
        

        <para>Note that those properties should not be altered if the
        programmer uses deployment descriptor files. See 
        <xref linkend="faultTolerance"/> and more specifically
        <xref linkend="faultTolerance_html_configuration"/>
        for more details.</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">proactive.ft</emphasis> . Two values
            are possible: <emphasis role="bold">true, false</emphasis>. If
            true, the fault-tolerance is enable and a set of servers must be
            defined with the following properties. Default value is <emphasis role="bold">false</emphasis>.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.checkpoint</emphasis> is the URL
             of the checkpoint server.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.location</emphasis> is the URL of
             the location server.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.recovery</emphasis> is the URL of
             the recovery process .</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.resource</emphasis> is the URL of
             the resource server.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.server.global</emphasis>
             is the URL of the global server.
            If this property is set, all others <emphasis role="bold">proactive.fr.server.*</emphasis> are ignored.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">proactive.ft.ttc</emphasis> is the
             value of the Time To Checkpoint counter, in seconds. 
             The default value is 30 sec.</para>
          </listitem>
        </itemizedlist>
       </section>
       
      <section xml:id="rmisshproperties_69"><info><title>rmi ssh properties</title></info>
        
    <para>The following properties are specific to the rmissh protocol 
     (see <xref linkend="SSHTunneling"/>).</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis role="bold">proactive.ssh.port</emphasis>: the port
          number on which all the ssh daemons to which this JVM must connect
          to are expected to listen. If this property is not set, the default
          is 22.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.username</emphasis>: the
          username which will be used during authentication with all the ssh
          daemons to which this JVM will need to connect to. If this property
          is not set, the default is the user.name java property.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.known_hosts</emphasis>: a
          filename which identifies the file which contains the traditional
          ssh known_hosts list. This list of hosts is used during
          authentication with each ssh daemon to which this JVM will need to
          connect to. If the host key does not match the one stored in this
          file, the authentication will fail. If this property is not set, the
          default is System.getProperty ('user.home') +
          '/.ssh/known_hosts'</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.ssh.key_directory</emphasis>:
          a directory which is expected to contain the pairs of public/private
          keys used during authentication. the private keys must not be
          encrypted. The public keys filenames must match '*.pub'. Private
          keys are ignored if their associated public key is not present. If
          this property is not set, the default is System.getProperty
          ('user.home') + '/.ssh/'</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.tunneling.try_normal_first</emphasis>: if this
          property is set to 'yes', the tunneling code always attempts to make
          a direct rmi connection to the remote object before tunneling. If
          this property is not set, the default is not to make these
          direct-connection attempts. This property is especially useful if
          you want to deploy a number of objects on a LAN where only one of
          the hosts needs to run with the rmissh protocol to allow hosts
          outside the LAN to connect to this frontend host. The other hosts
          located on the LAN can use the try_normal_first property to avoid
          using tunneling to make requests to the LAN frontend.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.tunneling.connect_timeout</emphasis>: this
          property specifies how long the tunneling code will wait while
          trying to establish a connection to a remote host before declaring
          that the connection failed. If this property is not set, the default
          value is 2000ms.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.tunneling.use_gc</emphasis>:
          if this property is set to 'yes', the client JVM does not destroy
          the ssh tunnels are soon as they are not used anymore. They are
          queued into a list of unused tunnels which can be reused. If this
          property is not set or is set to another value, the tunnels are
          destroyed as soon as they are not needed anymore by the JVM.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">proactive.tunneling.gc_period</emphasis>: this property
          specifies how long the tunnel garbage collector will wait before
          destroying a unused tunnel. If a tunnel is older than this value, it
          is automatically destroyed. If this property is not set, the default
          value is 10000ms.</para>
        </listitem>
      </itemizedlist></para>
    </section>
    
    <section xml:id="Otherproperties_69"><info><title>Other properties</title></info>

    

        <para><itemizedlist>
            <listitem>
              <para><emphasis role="bold">proactive.rmi.port</emphasis>
              represents the port number on which to start the RMIRegistry.
              Default is 1099. If an RMIRegistry is already running on the
              given port, jms use the existing registry</para>
            </listitem>

            <listitem>
              
             <indexterm><primary>Http</primary><secondary>port</secondary></indexterm>

             <para><emphasis role="bold">proactive.http.port</emphasis>
              represents the port number on which to start the HTTP server.
              Default is 2010. If this port is occupied by another
              application, the http server starts on the first free port(given
              port is incremented transparently)</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.useIPaddress</emphasis> if
              set to <emphasis role="bold">true</emphasis>, IP adresses will
              be used instead of machines names. This property is particularly
              usefull to deal with sites that do not host a DNS</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.hostname</emphasis> when
              this property is set, the host name on which the jvm is started
              is given by the value of the property. This property is
              particularly usefull to deal with machines with two network
              interfaces</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.locationserver</emphasis>
              represents the location server class to instantiate when using
              Active Objects with Location Server</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.locationserver.rmi</emphasis> represents
              the url under which the Location Server is registered in the
              RMIRegistry</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">fractal.provider</emphasis> This
              property defines the bootstrap component for the Fractal
              component model</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">proactive.classloader</emphasis>
              runtimes created with this property enabled fetch missing
              classes using a special mechanism
              (see the 
              
              <!-- This url can only work in the html generated files: in pdf there's no ".." -->
              <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../api_complete/org/objectweb/proactive/core/classloader/package-summary.html" os="html">
              classloader package javadoc</link>
              <phrase os="pdf">org.objectweb.proactive.core.classloader javadoc</phrase>). 
              This is an alternative to RMI dynamic class
              downloading, useful for instance when performing hierarchical
              deployment.</para>
            </listitem>

            <listitem>
              <para>Note that as mentionned above, user-defined properties can
              be added.</para>
            </listitem>
          </itemizedlist></para>
        </section>
  </section>

  <section xml:id="Configurationfileexample_69"><info><title>Configuration file example</title></info>
    

    <para>A configuration file could have following structure:</para>

    <example xml:id="Aconfigurationfileexample_69"><info><title>A configuration file example</title></info>
    
     
    <screen>&lt;ProActiveUserProperties&gt;
 &lt;properties&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='schema.validation' <emphasis role="bold">value</emphasis>='disable'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.future.ac' <emphasis role="bold">value</emphasis>='true'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.communication.protocol' <emphasis role="bold">value</emphasis>='rmi'/&gt;
   &lt;prop <emphasis role="bold">key</emphasis>='proactive.rmi.port' <emphasis role="bold">value</emphasis>='2001-2005'/&gt;
   ....
   &lt;prop <emphasis role="bold">key</emphasis>='myprop' <emphasis role="bold">value</emphasis>='myvalue'/&gt;
 ....
 &lt;/properties&gt;
&lt;/ProActiveUserProperties&gt;</screen>
</example>
    <note><para>
      In order to have ProActive parse correctly the document, the following are mandatory:
      <itemizedlist>
				<listitem><para> the <emphasis role="bold">ProActiveUserProperties</emphasis> tag, </para></listitem>
				<listitem><para> the <emphasis role="bold">properties</emphasis> tag,  </para></listitem>
				<listitem><para> and the model: &lt;prop <emphasis role="bold">key</emphasis>='somekey' 
								<emphasis role="bold">value</emphasis>='somevalue'/&gt;  </para></listitem>
     </itemizedlist>
       
     </para></note>
  </section>
  
  
  <section>
  	<info>
  		<title>Network configuration</title>
  	</info>
  
  
  	<para>
		A ProActive runtime is only able to bind to one and only one InetAddress.
   		Usually, this limitation is not seen by the user and no special configuration
   		is required. ProActive tries to use the most suitable network address available. 
   		But sometimes, ProActive fails to elect the right IP address or the user wants to
   		use a given IP address. In such case, you can specify the IP address to use by using 
   		theses properties: <emphasis>proactive.hostname</emphasis>, 
   		<emphasis>proactive.net.interface</emphasis>,  <emphasis>proactive.net.netmask</emphasis>, 
   		<emphasis>proactive.net.nolocal</emphasis>, <emphasis>proactive.net.noprivate</emphasis>.
   	</para>
  
  	<para>
  		IPv6 can be enabled by setting the <emphasis>proactive.net.disableIPv6</emphasis>
  		property to false. By default ProActive will not use IPv6 addresses.
  	</para>
  	 	
   	<para>
   		If none of the <emphasis>proactive.hostname</emphasis>, 
   		<emphasis>proactive.net.interface</emphasis>,  <emphasis>proactive.net.netmask</emphasis>, 
   		<emphasis>proactive.net.nolocal</emphasis>, <emphasis>proactive.net.noprivate</emphasis>   		
   		 properties is defined, then the following algorithm is used to elect an IP address:
   		<itemizedlist>
   			<listitem>
   				<para>
					If a public IP address is available use it. If several ones are 
					available, one is chosen randomly.					
   				</para>
   			</listitem>
   			<listitem>
   				<para>
   					If a private IP address is available use it. If several ones are
   					available, one is chosen randomly.
   				</para>
   			</listitem>
   			<listitem>
   				<para>
   					If a loopback IP address is available use it. If several ones are
   					available, one is chosen randomly.
   				</para>
   			</listitem>
   			<listitem>
   				<para>
					If no IP address is available at all. Then the runtime exits with an 
					error message.
   				</para>
   			</listitem>
   		</itemizedlist>	
	</para> 
   	
   	<para>
   		If <emphasis>proactive.hostname</emphasis> is set, then the value returned by
   		<emphasis>InetAddress.getByName(proactive.hostname)</emphasis> is elected. If no
   		IP address is found, then the runtime exits with an error message.
   	</para>
   	
   	<para>
	   	If <emphasis>proactive.hostname</emphasis> is not set, and at least one of the
	    <emphasis>proactive.net.interface</emphasis>,  <emphasis>proactive.net.netmask</emphasis>, 
   		<emphasis>proactive.net.nolocal</emphasis>, <emphasis>proactive.net.noprivate</emphasis> 
   		is set, then one of the addresses matching all the requirements is elected. Requirements are:
   		
   		<itemizedlist>
   			<listitem>
   				<para>
   					If <emphasis>proactive.net.interface</emphasis> is set, then the IP address
   					must be bound to the given network interface.
   				</para>
   			</listitem>
   			<listitem>
   				<para>
   					If <emphasis>proactive.net.netmask</emphasis> is set, then the IP address
   					must match the given netmask.
   				</para>
   			</listitem>
   			<listitem>
   				<para>
   					If <emphasis>proactive.net.nolocal</emphasis> is set, then the IP address
   					must not be a loopback address.
   				</para>
   			</listitem>
   			<listitem>
   				<para>
   					If <emphasis>proactive.net.noprivate</emphasis> is set, then the IP address
   					must not be a private address.
   				</para>
   			</listitem>
   		</itemizedlist>
  	</para>

	<para>
		If no address matches theses criteria, the runtime exits with an error message.
  	</para>
  	
  	<para>
  		The easiest way to check if ProActive elect the address you want is to run the following command:
  		<screen>
java -jar dist/lib/ProActive.jar
  		</screen>
  		
  		It shows the elected IP address, and shows all the network interfaces and IP addresses available. It also 
  		displays all the configuration properties and their value.
  		
  		<screen>
  		--------------------
		ProActive 4.1.0-beta
		--------------------


Local IP Address: 192.168.1.22
Config dir: /user/cmathieu/home/.proactive

Network setup:
	eth0	MAC n/a	fe80:0:0:0:222:19ff:fe1d:ad34%2 192.168.1.22 
	lo	MAC n/a	0:0:0:0:0:0:0:1%1 127.0.0.1 

Available properties:
	String	java.security.policy [null]
	Boolean	java.net.preferIPv6Addresses [null]
  		</screen>
  	</para>
  	
  	<para>
  		Some examples follows:
  		
  		<screen>
$ # Use the default algorithm, since no public IP address is available, 192.168.1.22 is elected.
$ java -jar dist/lib/ProActive.jar 		
  		
$ # Use the IP address returned by name resolution system for "britany.activeeon.com"
$ java -Dproactive.hostname=britany.activeeon.com -jar dist/lib/ProActive.jar 

$ # Use only a public IP address bound to eth1
$ java -Dproactive.net.interface=eth1 -Dproactive.net.nolocal=true -Dproactive.net.noprivate=true -jar dist/lib/ProActive.jar 

$ # Use an IP address matching 192.168.2.0/24
$ java -Dproactive.net.netmask="192.168.2.0/24" -Dproactive.net.noprivate=true -jar dist/lib/ProActive.jar 
  		</screen>
  	</para>

	<para>
		The log4j logger <emphasis>proactive.configuration.network</emphasis> can be used to diagnosis why
		an IP address is elected or rejected.
	</para>
  </section>

</chapter>
