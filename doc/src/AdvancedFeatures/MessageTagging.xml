<?xml version="1.0" encoding="utf-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	xml:id="MessageTagging">
	<info>
		<title xml:id="msgtagging_chapter_title">Message Tagging</title>
	</info>


	<section xml:id="msgtagging_overview">
		<info>
			<title>Overview of Message Tagging</title>
		</info>

		<para>
			This Message Tagging allow you to add tags on the ProActive
			messages such as the requests and replies. Each tag has an identifier
			and a unique value, and they can
			take a data of object type. Theses
			tags have a method called at each propagation. This method is the
			only needed method in your implementation of the abstract class Tag.
		</para>

	</section>

	<section xml:id="msgtagging_api">
		<info>
			<title>API</title>
		</info>

		<para>
			To get back the tag list of a request or reply in your application,
			you can use the following API to get back the MessageTags object from
			a request being served :
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>PAMessageTagging.getCurrentTags()</emphasis>
						: Return the current MessageTags object of the current request
						served.
					</para>
				</listitem>
			</itemizedlist>
			From this MessageTags object, you have access to the following API to
			interract with the tags :
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>addTag(Tag tag)</emphasis>
						: append a new Tag to the tag list of this message.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>checkTag(String id)</emphasis>
						: check if a tag with this
						<emphasis>id</emphasis>
						already exist on this message.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getAllTagsId()</emphasis>
						: get back a
						<emphasis>Set of String</emphasis>
						with all the tags ID on this message.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getData(String id)</emphasis>
						: get back the
						<emphasis>data object</emphasis>
						of the tag with this
						<emphasis>id</emphasis>
						.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getTag(String id)</emphasis>
						: get back the tag instance of the tag with this
						<emphasis>id</emphasis>
						.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>removeTag(String id)</emphasis>
						: remove the tag with this
						<emphasis>id</emphasis>
						from the current tag list of this message.
					</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			Once you have get back the Tag istance, you have acces to the
			following methods :
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>getData()</emphasis>
						: get back the data object of this tag.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getID()</emphasis>
						: get back the identifier of this tag.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getLocalMemory()</emphasis>
						: get back the LocalMemory object of this tag.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>setData()</emphasis>
						: set a new data object for this tag.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>apply()</emphasis>
						: execute the job of the tag at the propagation.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>

	<section xml:id="msgtagging_localmemory">
		<info>
			<title>Local Memory Space</title>
		</info>

		<para>
			All the tag have acces to a <emphasis>LocalMemory</emphasis> object, which
			is a local memory space on the Active Object on which the request is currently
			being served. They can save or get back data in this space (key/value).
			This is useful when the Tag need informations of a
			previous passage on this Active Object. Theses local memory space are
			created for a specified lease time. The <emphasis>max lease time</emphasis>
			is specified by the	<emphasis>PAProperty</emphasis>	: <emphasis>proactive.tagmemory.lease.max</emphasis>
			which take the max lease value time in second.
		</para>

		<para>
			You can use this
			<emphasis>local memory space</emphasis>
			with the following API in your implementation of your Tag :
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>createLocalMemory(int lease)</emphasis>
						: create the local space for your tag on the current active object
						with this <emphasis>lease</emphasis> time value (in second) for the
						data saved, and return the LocalMemory instance created.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>getLocalMemory()</emphasis>
						: get a reference to the local memory of your tag.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>clearLocalMemory()</emphasis>
						: clear the local memory of your tag.
					</para>
				</listitem>
			</itemizedlist>

			Once you have your LocalMemory intance, you have access to :
			<itemizedlist>
				<listitem>
					<para><emphasis>put(String key, Object value)</emphasis> : to put a value into that space.</para>
					<para><emphasis>get(String key)</emphasis> : to get back a value previously putted.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>Each time a value is accessed, the current lease value of the LocalMemory space is incremented by half of the initial value. A thread run periodicaly
		(<emphasis>proactive.tagmemory.lease.period</emphasis>) to check the lease value of each LocalMemory, and decrement their current lease.</para>

	</section>

	<section xml:id="msgtagging_Exemple">
		<info><title>Exemple of user Tag implementing the Abstract Class Tag</title></info>

		<para>
			This exemple show how you can create your own tag :
		</para>

		<programlisting language="java"><textobject><textdata fileref="code_snippets/tagexample.txt"/></textobject></programlisting>
	</section>

	<section xml:id="msgtagging_TagDSF">
		<info>
			<title>Distributed Services Flow Tag</title>
		</info>

		<para>
			The Distributed Services Flow Tag (DSF Tag) allow the following
			of all messages (request and reply) to know to which services flow
			these messages belong to.
			This tag is necessary if you wish to do a graphical analysis in IC2D of
			the execution of your application.
		</para>

		<para>
			This tag can be enable or disable with the following ProActive
			Property :
			<emphasis>proactive.tag.dsf</emphasis>
			. Set this property to
			<emphasis>true</emphasis>
			if you wish to enable the DSF Tag propagation in the execution of the
			application.
		</para>

	</section>

</chapter>
