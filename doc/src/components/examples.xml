<?xml version="1.0" encoding="utf-8"?><chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="componentExamples"><info><title xml:id="Componentexamples_55">Component examples</title></info>
  

  <para>Three examples are presented: code snippets for visualizing the transition
  between active objects and components, the 'hello world', from the Fractal
  tutorial, and C3D component version. The programming model is Fractal, and
  one should refer to the Fractal documentation for other detailed examples.</para>

 <section xml:id="examples_html_From_objects_to_active_objects_to_distributed_components"><info><title xml:id="Fromobjectstoactiveobjectstodistributedcomponents_55">From objects to active objects to distributed components</title></info>
    

    <para>In Java, objects are created by instantiation of classes. With
    ProActive, one can create active objects from Java classes, while
    components are created from component definitions. Let us first consider
    the 'A' interface:</para>

    <programlisting language="java">public interface A {
  public String foo(); // dummy method
} </programlisting>

    <para>'AImpl' is the class implementing this interface:</para>

    <programlisting language="java">public class AImpl implements A {
 public AImpl() {}
 public String foo() {
 // do something
 }
}  </programlisting>

    <para>The class is then instantiated in a standard way:</para>

    <programlisting language="java"> A object = new AImpl(); </programlisting>

    <para>Active objects are instantiated using factory methods from the
     ProActive class (see <xref linkend="SimpleCMA"/>). 
     It is also possible to specify the activity of
    the active object, the location (node or virtual node), or a factory for
    meta-objects, using the appropriate factory method.</para>

    <programlisting language="java">A active_object = (A)PAActiveObject.newActive(
 AImpl, // signature of the base class
 new Object[] {}, // Object[]
 aNode, // location, could also be a virtual node
);</programlisting>

    <para>As components are also active objects in this implementation, they
    benefit from the same features, and are configurable in a similar way.
    Constructor parameters, nodes, activity, or factories, that can be
    specified for active objects, are also specifiable for components. The
    definition of a component requires 3 sub-definitions: the type, the
    description of the content, and the description of the controller.</para>

    <section xml:id="Type_55"><info><title>Type</title></info>
      

      <para>The type of the component (i.e. the functional interfaces provided
      and required) is specified in a standard way: (as taken from the Fractal
      tutorial)</para>

      <para>We begin by creating objects that represent the types of the
      components of the application. In order to do this, we must first get a
      bootstrap component. The standard way to do this is the following one
      (this method creates an instance of the class specified in the
      fractal.provider system property, and uses this instance to get the
      bootstrap component):</para>

      <programlisting language="java"> Component boot = Fractal.getBootstrapComponent(); </programlisting>

      <para>We then get the TypeFactory interface provided by this bootstrap
      component:</para>

      <programlisting language="java"> TypeFactory tf = (TypeFactory)boot.getFcInterface('type-factory'); </programlisting>

      <para>We can then create the type of the first component, which only
      provides a A server interface named 'a':</para>

      <programlisting language="java">// type of the a component
ComponentType aType = tf.createFcType(new InterfaceType[] {
 tf.createFcItfType('a', 'A', false, false, false)
}); </programlisting>
    </section>

    <section xml:id="Descriptionofthecontent_55"><info><title>Description of the content</title></info>
      

      <para>The second step in the definition of a component is the definition
      of its content. In this implementation, this is done through the
      ContentDescription class:</para>

      <programlisting language="java">ContentDescription contentDesc = new ContentDescription(
 AImpl, // signature of the base class
 new Object[] {}, // Object[]
 aNode // location, could also be a virtual node
); </programlisting>
    </section>

    <section xml:id="Descriptionofthecontroller_55"><info><title>Description of the controller</title></info>
      

      <para>Properties relative to the controller can be specified in the
      ControllerDescription:</para>

      <programlisting language="java">ControllerDescription controllerDesc = new ControllerDescription(
 'myName', // name of the component
 Constants.PRIMITIVE // the hierarchical type of the component
 // it could be PRIMITIVE, COMPOSITE, or PARALLEL
); </programlisting>

      <para>Eventually, the component definition is instantiated using the
      standard Fractal API. This component can then be manipulated as any
      other Fractal component.</para>

      <programlisting language="java">Component component = componentFactory.newFcInstance(
 componentType, // type of the component (defining the client and server interfaces)
 controllerDesc, // implementation-specific description for the controller
 contentDesc // implementation-specific description for the content
); </programlisting>
    </section>

    <section xml:id="Fromattributestoclientinterfaces_55"><info><title>From attributes to client interfaces</title></info>
      

      <para>There are 2 kinds of interfaces for a component: those that offer
      services, and those that require services. They are named respectively
      server and client interfaces.</para>

      <para>From a Java class, it is fairly natural to identify server
      interfaces: they (can) correspond to the Java interfaces implemented by
      the class. In the above example, 'a' is the name of an interface
      provided by the component, corresponding to the 'A' Java
      interface.</para>

      <para>On the other hand, client interfaces usually correspond to
      attributes of the class, in the case of a primitive component. If the
      component defined above requires a service from another component, say
      the one corresponding to the 'Service' Java interface, the AImpl class
      should be modified. As we use the <emphasis>inversion of
      control</emphasis> pattern, a BindingController is provided, and a
      binding operation on the 'requiredService' interface will actually set
      the value of the 'service' attribute, of type 'Service'.</para>

      <para>First, the type of the component is changed:</para>

      <programlisting language="java">// type of the a component
ComponentType aType = tf.createFcType(new InterfaceType[] {
 tf.createFcItfType('a', 'A', false, false, false),
 tf.createFcItfType('requiredService', 'A', true, false, false)
}); </programlisting>

      <para>The Service interface is the following:</para>

      <programlisting language="java"><textobject><textdata fileref="examples/components/helloworld/Service.java"/></textobject></programlisting>


      <para>And the AImpl class is:</para>
      <indexterm><primary>Binding</primary><secondary>controller</secondary></indexterm>
      <programlisting language="java">// The modified AImpl class
public class AImpl implements A, BindingController {
 Service service; // attribute corresponding to a client interface
 public AImpl() {}
 // implementation of the A interface
 public String foo() {
   return service.bar(); // for example
 }
 // implementation of BindingController
 public Object lookupFc (final String cItf) {
   if (cItf.equals('requiredService')) {
     return service;
   }
   return null;
 }
 // implementation of BindingController
 public void bindFc (final String cItf, final Object sItf) {
   if (cItf.equals('requiredService')) {
     service = (Service)sItf;
   }
 }
 // implementation of BindingController
 public void unbindFc (final String cItf) {
   if (cItf.equals('requiredService')) {
     service = null;
   }
 }
} </programlisting>
    </section>
  </section>

  <section xml:id="helloworldExample"><info><title xml:id="TheHelloWorldexample_55">The HelloWorld example</title></info>
    

    <para>The mandatory helloworld example (from the Fractal tutorial) shows
    the different ways of creating a component system (programmatically and
    using the ADL), and it can easily be implemented using ProActive.</para>

    <section xml:id="Setup_55"><info><title>Set-up</title></info>
      

      <para>You can find the code for this example in the package
      org.objectweb.proactive.examples.components.helloworld of the ProActive
      distribution.</para>

      <para>The code is almost identical to the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://fractal.objectweb.org/tutorials/fractal/index.html">Fractal
      tutorial's example</link>.</para>

      <para>The differences are the following:</para>

      <itemizedlist>
        <listitem>
          <para>The reference example is provided for level 3.3.
          implementation, whereas this current implementation is compliant up
          to level 3.2: templates are not provided. Thus you will have to skip
          the specific code for templates.</para>
        </listitem>

        <listitem>
          <para>The <literal>newFcInstance</literal> method of the
          <literal>GenericFactory</literal> interface, used for directly
          creating components, takes 2 implementation-specific parameters. So
          you should use the
          <literal>org.objectweb.proactive.component.ControllerDescription</literal>
          and
          <literal>org.objectweb.proactive.component.ContentDescription</literal>
          classes to define ProActive components. (It is possible to use the
          same parameters than in Julia, but that hinders you from using some
          functionalities specific to ProActive, such as distributed
          deployment or definition of the activity).</para>
        </listitem>

        <listitem>
          <para>Collective interfaces could be implemented the same way than
          suggested, but using the
          <literal>Fractive.createCollectiveClientInterface</literal> method
          will prove useful with this implementation: you are then able to use
          the functionalities provided by the typed groups API.</para>
        </listitem>

        <listitem>
          <para>Components can be distributed</para>
        </listitem>

        <listitem>
          <para>the ClientImpl provides an empty no-args constructor.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="Architecture_55"><info><title>Architecture</title></info>
      

      <para>The helloworld example is a simple client-server application,
      where the client (c) and the server (s) are components, and they are
      both contained in the same root component (root).</para>

      <para>Another configuration is also possible, where client and server
      are wrapped around composite components (C and S). The goal was
      initially to show the interception shortcut mechanism in Julia. In the
      current ProActive implementation, there are no such shortcuts, as the
      different components can be distributed, and all invocations are
      intercepted. The exercise is still of interest, as it involves composite
      components.</para>

      <para><figure xml:id="client_and_server_wrapped_in_composites"><info><title>Client and Server wrapped in composite components (C and S)</title></info>
          

          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="components/pics/model.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>

    <section xml:id="Distributeddeployment_55"><info><title>Distributed deployment</title></info>
      

      <para>This section is specific to the ProActive implementation, as it
      uses the deployment framework of this library.</para>

      <para>If the application is started with (only) the parameter
       'distributed', the ADL used is 'helloworld-distributed-no-wrappers.fractal', where
      virtualNode of the client and server components are exported as VN1 and
      VN2. Exported virtual node names from the ADL match those defined in the
      deployment descriptor 'deployment.xml'.</para>

      <para>One can of course customize the deployment descriptor and deploy
      components onto virtually any computer, provided it is connectable by
      supported protocols. Supported protocols include LAN, clusters and Grid
      protocols (see <xref linkend="XML_Descriptors"/>).</para>

    <para>Have a look at the ADL files 'helloworld-distributed-no-wrappers.fractal' and
      'helloworld-distributed-wrappers.fractal'. In a nutshell, they say: 'the
      primitive components of the application (client and server) will run on
      given exported virtual nodes, whereas the other components (wrappers,
      root component) will run on the current JVM.</para>

      <para>Therefore, we have the two following configurations:</para>

      <para><figure xml:id="without_wrappers_the_primite_components_are_distributed_1"><info><title>Without wrappers, the primitive components are distributed</title></info>
          

          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="components/pics/distributed-components-no-wrappers.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para><figure xml:id="only_the_primitive_are_distributed"><info><title>With wrappers only the primitive components are distributed</title></info>
          

          <mediaobject>
            <imageobject>
              <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="components/pics/distributed-components-wrappers.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Currently, bindings are not optimized. For example, in the
      configuration with wrappers, there is an indirection that can be costly,
      between the client and the server. We are currently working on
      optimizations that would allow to shortcut communications, while still
      allowing coherent dynamic reconfiguration. It is the same idea than in
      Julia, but we are dealing here with distributed components. It could
      imply compromises between dynamicity and performance issues.</para>
    </section>

    <section xml:id="Execution_55"><info><title>Execution</title></info>
      

      <para>You can either compile and run the code yourself, or follow the
      instructions for preparing the examples and use the script
      helloworld_fractal.sh (or .bat). If you choose the first solution, do
      not forget to set the fractal.provider system property.</para>

      <para>If you run the program with no arguments (i.e. not using the
      parser, no wrapper composite components, and local deployment) , you
      should get something like this:</para>

      <programlisting linenumbering="numbered"> --- Fractal Helloworld example ---------------------------------------------
 ---
 --- The expected result is an exception
 ---

 [INFO communication.rmi] Created a new registry on port 6646
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.core.component.type._StubComposite
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.core.jmx.util._StubJMXNotificationListener
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.examples.components.helloworld._StubClientImpl
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.examples.components.helloworld._StubServerImpl</programlisting>

      <para>You can see:</para>

      <itemizedlist>
        <listitem>
          <para>line 6: the creation of a rmi registry</para>
        </listitem>

        <listitem>
          <para>line 7 to 14: the on-the-fly generation of ProActive stubs
          (the generation of component functional interfaces is silent)</para>
        </listitem>
      </itemizedlist>

      <para>Then you have (the exception that pops out is actually the
      expected result, and is intended to show the execution path):</para>

      <programlisting linenumbering="numbered">Server: print method called
at org.objectweb.proactive.examples.components.helloworld.ServerImpl.print(ServerImpl.java:45)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.objectweb.proactive.core.mop.MethodCall.execute(MethodCall.java:390)
at
  org.objectweb.proactive.core.component.request.ComponentRequestImpl.
    serveInternal(ComponentRequestImpl.java:176)
at org.objectweb.proactive.core.body.request.RequestImpl.serve(RequestImpl.java:170)
at
  org.objectweb.proactive.core.body.BodyImpl$ActiveLocalBodyStrategy.
    serveInternal(BodyImpl.java:539)
at org.objectweb.proactive.core.body.BodyImpl$ActiveLocalBodyStrategy.serve(BodyImpl.java:510)
at org.objectweb.proactive.core.body.AbstractBody.serve(AbstractBody.java:909)
at org.objectweb.proactive.Service.blockingServeOldest(Service.java:175)
at org.objectweb.proactive.Service.blockingServeOldest(Service.java:150)
at org.objectweb.proactive.Service.fifoServing(Service.java:126)
at
  org.objectweb.proactive.core.component.body.ComponentActivity$ComponentFIFORunActive.
    runActivity(ComponentActivity.java:226)
at
  org.objectweb.proactive.core.component.body.ComponentActivity.
    runActivity(ComponentActivity.java:183)
at
  org.objectweb.proactive.core.component.body.ComponentActivity.
    runActivity(ComponentActivity.java:183)
at org.objectweb.proactive.core.body.ActiveBody.run(ActiveBody.java:192)
at java.lang.Thread.run(Thread.java:619)
Server: begin printing...
--------> hello world
Server: print done.c</programlisting>

      <para>What can be seen is very different from the output you would get
      with the Julia implementation. Here is what happens (from bottom to top
      of the stack):</para>

      <itemizedlist>
        <listitem>
          <para>line 30: The active object runs its activity in its own
          Thread</para>
        </listitem>

        <listitem>
          <para>line 20-21-22: The default activity is to serve incoming request in
          a FIFO order</para>
        </listitem>

        <listitem>
          <para>line 8-9-10: Requests (reified method calls) are encapsulated in
          ComponentRequestImpl objects</para>
        </listitem>

        <listitem>
          <para>line 6: A request is served using reflection</para>
        </listitem>

        <listitem>
          <para>line 2: The method invoked is the print method of an instance
          of ServerImpl</para>
        </listitem>
      </itemizedlist>

      <para>Now let us have a look at the distributed deployment: execute the
      program with the parameters 'distributed parser'. You should get
      something similar to the following:</para>

      <programlisting linenumbering="numbered"> --- Fractal Helloworld example ---------------------------------------------
 ---
 --- The expected result is an exception
 ---

 [INFO communication.rmi] Created a new registry on port 6646
 [INFO proactive] ************* Reading deployment descriptor:
   file:/home/ProActive/classes/Examples/org/objectweb/proactive/examples/components/
     helloworld/deployment.xml ********************
 [INFO proactive.deployment] created VirtualNode name=VN1
 [INFO proactive.deployment] created VirtualNode name=VN2
 [INFO proactive.deployment] created VirtualNode name=VN3
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.core.jmx.util._StubJMXNotificationListener
 [INFO deployment.log] 
 [INFO deployment.log] 311@saturn.inria.fr -
   [INFO proactive.runtime] **** Starting jvm on 138.96.218.113
 [INFO proactive.events] **** Mapping VirtualNode VN1 with Node:
   rmi://138.96.218.113:6646/VN11559562212 done
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.examples.components.helloworld._StubClientImpl
 [INFO deployment.log] 311@saturn.inria.fr -
   [INFO communication.rmi] Detected an existing RMI Registry on port 6646
 [INFO deployment.log] 
 [INFO deployment.log] 97714@saturn.inria.fr -
   [INFO proactive.runtime] **** Starting jvm on 138.96.218.113
 [INFO proactive.events] **** Mapping VirtualNode VN2 with Node:
   rmi://138.96.218.113:6646/VN2914088183 done
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.examples.components.helloworld._StubServerImpl
 [INFO deployment.log] 97714@saturn.inria.fr - [INFO communication.rmi] Detected an existing RMI Registry on port 6646
 [INFO proactive.mop] Generating class :
   pa.stub.org.objectweb.proactive.core.component.type._StubComposite</programlisting>

      <para>What is new is:</para>

      <itemizedlist>
        <listitem>
          <para>line 7-8-9 the parsing of the deployment descriptor</para>
        </listitem>

        <listitem>
          <para>line 16-17 and 25-26: the creation of 2 virtual machines on the host
          'crusoe.inria.fr'</para>
        </listitem>

        <listitem>
          <para>line 10-11-12: the creation of virtual nodes VN1, VN2 and VN3</para>
        </listitem>

        <listitem>
          <para>line 18-19 and 27-28: the mapping of virtual nodes VN1 and VN2 to
          the nodes specified in the deployment descriptor</para>
        </listitem>
      </itemizedlist>

      <para>Then we get the same output than for a local deployment, the
      activity of active objects is independent from its location.</para>

      <programlisting linenumbering="numbered"> [INFO deployment.log] Server: print method called
 [INFO deployment.log] at
   org.objectweb.proactive.examples.components.helloworld.ServerImpl.print(ServerImpl.java:45)
 [INFO deployment.log] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 [INFO deployment.log] at
   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
 [INFO deployment.log] at
   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
 [INFO deployment.log] at java.lang.reflect.Method.invoke(Method.java:597)
 [INFO deployment.log] at org.objectweb.proactive.core.mop.MethodCall.execute(MethodCall.java:390)
 [INFO deployment.log] at
   org.objectweb.proactive.core.component.request.ComponentRequestImpl.
     serveInternal(ComponentRequestImpl.java:176)
 [INFO deployment.log] at
   org.objectweb.proactive.core.body.request.RequestImpl.serve(RequestImpl.java:170)
 [INFO deployment.log] at
   org.objectweb.proactive.core.body.BodyImpl$ActiveLocalBodyStrategy.
     serveInternal(BodyImpl.java:539)
 [INFO deployment.log] at
   org.objectweb.proactive.core.body.BodyImpl$ActiveLocalBodyStrategy.serve(BodyImpl.java:510)
 [INFO deployment.log] at
   org.objectweb.proactive.core.body.AbstractBody.serve(AbstractBody.java:909)
 [INFO deployment.log] at org.objectweb.proactive.Service.blockingServeOldest(Service.java:175)
 [INFO deployment.log] at org.objectweb.proactive.Service.blockingServeOldest(Service.java:150)
 [INFO deployment.log] at org.objectweb.proactive.Service.fifoServing(Service.java:126)
 [INFO deployment.log] at
   org.objectweb.proactive.core.component.body.ComponentActivity$ComponentFIFORunActive.
     runActivity(ComponentActivity.java:226)
 [INFO deployment.log] at
   org.objectweb.proactive.core.component.body.ComponentActivity.
     runActivity(ComponentActivity.java:183)
 [INFO deployment.log] at
   org.objectweb.proactive.core.component.body.ComponentActivity.
     runActivity(ComponentActivity.java:183)
 [INFO deployment.log] at org.objectweb.proactive.core.body.ActiveBody.run(ActiveBody.java:192)
 [INFO deployment.log] at java.lang.Thread.run(Thread.java:619)
 [INFO deployment.log] Server: begin printing...
 [INFO deployment.log] ->hello world
 [INFO deployment.log] Server: print done.
---------------------------------------------------------</programlisting>
    </section>

    <section xml:id="HelloWorldADLFiles"><info><title xml:id="TheHelloWorldADLfiles_55">The HelloWorld ADL files</title></info>
      

      <indexterm><primary>ADL</primary><secondary>example</secondary></indexterm>

      <para>
      org.objectweb.proactive.examples.components.helloworld.helloworld-distributed-wrappers.fractal</para>

     <programlisting language="xml"><textobject><textdata fileref="examples/components/helloworld/helloworld-distributed-wrappers.fractal"/></textobject></programlisting>
 

      <para>
      org.objectweb.proactive.examples.components.helloworld.ClientType.fractal</para>

     <programlisting language="xml"><textobject><textdata fileref="examples/components/helloworld/ClientType.fractal"/></textobject></programlisting>
     
      <para>
      org.objectweb.proactive.examples.components.helloworld.ClientImpl.fractal</para>

     <programlisting language="xml"><textobject><textdata fileref="examples/components/helloworld/ClientImpl.fractal"/></textobject></programlisting>
     
      <para>
      org.objectweb.proactive.examples.components.ServerType</para>
     
     <programlisting language="xml"><textobject><textdata fileref="examples/components/helloworld/ServerType.fractal"/></textobject></programlisting>
      
     <para>
      org.objectweb.proactive.examples.components.helloworld.ServerImpl</para>
     
     <programlisting language="xml"><textobject><textdata fileref="examples/components/helloworld/ServerImpl.fractal"/></textobject></programlisting>
        </section>
  </section>
</chapter>
