<?xml version="1.0"?>
<!DOCTYPE policy
    PUBLIC "-//Emory DCL//H2O Provider Policy//0.8"
           "http://www.mathcs.emory.edu/dcl/h2o/dtd/kernel/providerPolicy-0.8.dtd">

<policy>

    <!--  h2o permissions -->
    <grant codebase="$fileurl{${h2o.home}}/lib/*">

        <!--consider H2O and its dependencies a trusted extension-->
        <permission type="java.security.AllPermission"/>

        <!--if you comment out the previous line, these below are the minimum permissions required-->

        <!-- in order to load pluglets from the local (server) filesystem, kernel needs to have
             read permissions to all their files. -->
        <permission type="java.io.FilePermission" target="${h2o.home}${/}-" actions="read"/>

        <!--kernel needs the following permission to be able to download pluglet classes from remote repositories-->
        <permission type="java.net.SocketPermission" target="*" actions="connect,accept,resolve"/>

        <!--allows the kernel to open listening ports-->
        <permission type="java.net.SocketPermission" target="localhost:1024-" actions="listen"/>

        <permission type="java.lang.RuntimePermission" target="modifyThreadGroup"/>
        <permission type="java.lang.RuntimePermission" target="createClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="setContextClassLoader"/>
        <permission type="javax.security.auth.AuthPermission" target="doAs"/>

        <!-- and those below are needed for RMIX -->

        <permission type="java.util.PropertyPermission" target="java.rmi.*" actions="read"/>
        <permission type="java.util.PropertyPermission" target="rmix.*" actions="read"/>
        <permission type="java.util.PropertyPermission" target="PID" actions="read"/>

        <!-- allow RMIX to list providers at ${java.home}/rmix/-->
        <permission type="java.util.PropertyPermission" target="java.home" actions="read"/>

        <!-- allow RMIX to resolve providers if the given ${rmix.home} or {$rmix.provider.path} is relative -->
        <permission type="java.util.PropertyPermission" target="user.dir" actions="read"/>

        <!-- "getProperty" requests use emory.util.security compiled into rmix.jar. Therefore,
             rmix.jar must have access to all the requested permissions.-->
        <permission type="java.util.PropertyPermission" target="*" actions="read"/>
        <permission type="java.io.FilePermission" target="${rmix.home}${/}provider" actions="read"/>
        <permission type="java.io.FilePermission" target="${rmix.home}${/}provider${/}*" actions="read"/>
        <permission type="java.io.FilePermission" target="${java.home}${/}lib${/}rmix${/}provider" actions="read"/>
        <permission type="java.io.FilePermission" target="${java.home}${/}lib${/}rmix${/}provider${/}*" actions="read"/>

        <!--allows RMIX to create local endpoints-->
        <permission type="java.net.SocketPermission" target="localhost:1024-" actions="listen"/>

        <!--allows RMIX to connect to endpoints-->
        <permission type="java.net.SocketPermission" target="*" actions="connect,accept,resolve"/>

        <!--allows RMIX to use underlying SUN RMI-->
        <permission type="java.lang.RuntimePermission" target="accessClassInPackage.sun.rmi.server"/>

        <permission type="java.lang.RuntimePermission" target="getClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="createClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="setContextClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="modifyThreadGroup"/>

        <permission type="java.io.SerializablePermission" target="enableSubstitution"/>

    </grant>

    <!-- rmix provider jars permissions  -->
    <grant codebase="$fileurl{${h2o.home}}/lib/rmixprovider/-">

        <!--consider RMIX providers to be trusted extensions-->
        <permission type="java.security.AllPermission"/>

        <!--if you disable "allPermission", the above are them minimum permissions required-->

        <permission type="java.util.PropertyPermission" target="java.rmi.*" actions="read"/>
        <!-- The below allows any RMIX provider to access any rmix.* property. It is possible but tedious
             to make something fancier than that (prohibiting providers from accessing other providers'
             properties) but it does not seem necessary at this point -->
        <permission type="java.util.PropertyPermission" target="rmix.*" actions="read"/>

        <permission type="java.util.PropertyPermission" target="debug" actions="read"/>

        <!--allows the provider to create local endpoints-->
        <permission type="java.net.SocketPermission" target="localhost:1024-" actions="listen"/>

        <!--allows the provider to connect to endpoints-->
        <permission type="java.net.SocketPermission" target="*" actions="connect,accept,resolve"/>

        <!--allows the provider to use underlying SUN RMI-->
        <permission type="java.lang.RuntimePermission" target="accessClassInPackage.sun.rmi.server"/>

        <permission type="java.lang.RuntimePermission" target="createClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="setContextClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="getClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="modifyThreadGroup"/>

        <!-- the following is needed by SecureServerSocket.java -->
        <permission type="java.lang.RuntimePermission" target="setFactory"/>

        <!-- the following is recommended for performance reasons; otherwise, access check will be performed
             on every remote method invocation -->
        <permission type="java.lang.reflect.ReflectPermission" target="suppressAccessChecks"/>

        <permission type="java.io.SerializablePermission" target="enableSubstitution"/>
    </grant>

    <!-- rmix provider jars permissions (those located in ${java.home}/lib/rmix/provider/) -->
    <grant codebase="$fileurl{${java.home}}/lib/rmix/provider/*">

        <!--consider RMIX providers to be trusted extensions-->
        <permission type="java.security.AllPermission"/>

        <!--if you disable "allPermission", the above are them minimum permissions required-->

        <permission type="java.util.PropertyPermission" target="java.rmi.*" actions="read"/>
        <!-- The below allows any RMIX provider to access any rmix.* property. It is possible but tedious
             to make something fancier than that (prohibiting providers from accessing other providers'
             properties) but it does not seem necessary at this point -->
        <permission type="java.util.PropertyPermission" target="rmix.*" actions="read"/>

        <permission type="java.util.PropertyPermission" target="debug" actions="read"/>

        <!--allows the provider to create local endpoints-->
        <permission type="java.net.SocketPermission" target="localhost:1024-" actions="listen"/>

        <!--allows the provider to connect to endpoints-->
        <permission type="java.net.SocketPermission" target="*" actions="connect,accept,resolve"/>

        <!--allows the provider to use underlying SUN RMI-->
        <permission type="java.lang.RuntimePermission" target="accessClassInPackage.sun.rmi.server"/>

        <permission type="java.lang.RuntimePermission" target="createClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="setContextClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="getClassLoader"/>
        <permission type="java.lang.RuntimePermission" target="modifyThreadGroup"/>

        <!-- the following is needed by SecureServerSocket.java -->
        <permission type="java.lang.RuntimePermission" target="setFactory"/>

        <!-- the following is recommended for performance reasons; otherwise, access check will be performed
             on every remote method invocation -->
        <permission type="java.lang.reflect.ReflectPermission" target="suppressAccessChecks"/>

        <permission type="java.io.SerializablePermission" target="enableSubstitution"/>
    </grant>

    <!-- Standard extensions get all permissions by default -->
    <grant codebase="$fileurl{${java.home}}/lib/ext/*">
        <permission type="java.security.AllPermission"/>
    </grant>

    <!-- default permissions granted to all domains -->
    <grant>
        <permission type="java.lang.RuntimePermission" target="stopThread"/>

        <!-- allows anyone to listen on un-privileged ports -->
        <permission type="java.net.SocketPermission" target="localhost:1024-" actions="listen"/>

        <!-- allows anyone to listen on in-proc ports -->
        <permission type="java.net.SocketPermission" target="127.0.0.129" actions="listen"/>

        <!-- "standard" properies that can be read by anyone -->

        <permission type="java.util.PropertyPermission" target="java.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vendor" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vendor.url" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.class.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="os.name" actions="read"/>
        <permission type="java.util.PropertyPermission" target="os.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="os.arch" actions="read"/>
        <permission type="java.util.PropertyPermission" target="file.separator" actions="read"/>
        <permission type="java.util.PropertyPermission" target="path.separator" actions="read"/>
        <permission type="java.util.PropertyPermission" target="line.separator" actions="read"/>

        <permission type="java.util.PropertyPermission" target="java.specification.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.specification.vendor" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.specification.name" actions="read"/>

        <permission type="java.util.PropertyPermission" target="java.vm.specification.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vm.specification.vendor" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vm.specification.name" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vm.version" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vm.vendor" actions="read"/>
        <permission type="java.util.PropertyPermission" target="java.vm.name" actions="read"/>

        <permission type="java.util.PropertyPermission" target="pvm.arch" actions="read"/>
	
	<!-- workaround for java.util.logging.Level.getLocalizedName that is missing doPrivileged -->
	<permission type="java.lang.RuntimePermission" target="accessClassInPackage.sun.util.logging.resources"/>
    </grant>

</policy>
