<?xml version="1.0" encoding="UTF-8"?>
<chapter><title>Automatic Continuation in ProActive</title>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/doc-files/AC.html  -->
  
    <sect1 remap="h2">
      <title>Automatic Continuation in ProActive</title>
      <sect2 remap="h3">
        <title>Objectives</title>
        <para>An Automatic Continuation is due to the propagation of a future outside the
 activity that has sent the corresponding request.</para>
        <para>Automatic Continuations allow to pass in parameter or return as a result
 future objects(or objects containing a future) without blocking to wait the result object of the
 future. When the result is available on the object that originated the creation of the future,
 this object must update the result in all objects to which it passed the future.</para>
      </sect2>
      <sect2 remap="h3">
        <title>Principles</title>
        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Message sending</emphasis></para>
          </listitem>
          <listitem>
            <para> Automatic Continuations can occur when sending a request (parameter of
 the request is a future or contains a future) or when sending a reply (the result is a future
 or contains a future).</para>
            <para>Outgoing futures are registered in the <emphasis role="bold">FuturePool</emphasis> of the Active
 Object sending this future(request or reply). Registration for couple(Future,BodyDestination)
 as an Automatic Continuation occurs when the future is serialized(indeed every request or
 reply are serialized before being sent, and the future is part of the request or the reply).
 More precisely, a thread <emphasis role="bold">T</emphasis> sending the message(request or reply)---therefore the
 thread doing the serialization---, keeps in a static table
 (<emphasis role="bold">FuturePool.bodyDestination</emphasis>) a reference of the destination body. Hence when a future <emphasis role="bold">F</emphasis> is serialized by the same thread <emphasis role="bold">T</emphasis>(since futures are part of request or
 reply, it is the same thread serializing the request --or reply-- and the future), it looks
 up in the static table, if there is a destination <emphasis role="bold">D</emphasis> registered for the thread <emphasis role="bold">T</emphasis>. If true, the future notifies its <emphasis role="bold">FuturePool</emphasis> (that it is going to leave),
 which in turn registers couple (F,D) as an Automatic Continuation</para>
            <para>When value <emphasis role="bold">V</emphasis> is available for the future <emphasis role="bold">F</emphasis>, <emphasis role="bold">V</emphasis> is
 propagated to all objects that received the fututre <emphasis role="bold">F</emphasis>. This Update is realized by a
 particular thread located in the <emphasis role="bold">FuturePool</emphasis>.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Message reception</emphasis></para>
          </listitem>
          <listitem>
            <para> When a message is received(request or reply) by an Active Object, this
 message can contain a future. So the Active Object registers this future in the <emphasis role="bold">FuturePool</emphasis> to be able to update it when the value will be available. This registration
 takes place in two steps:</para>
            <para></para>
            <para></para>
            <itemizedlist>
              <listitem>
                <para> When the future is deserialized, it registers in a static table
 (<emphasis role="bold">FuturePool.incomingFutures</emphasis></para>
              </listitem>
              <listitem>
                <para> In Receive[Request-Reply] method, it is checked if one or many
 futures are registerd in that table, then, if true these futures are registerd in the <emphasis role="bold">FuturePool</emphasis> in a standart way.</para>
              </listitem>
</itemizedlist>
          </listitem>
</itemizedlist>
      </sect2>
      <sect2 remap="h3">
        <title>Example</title>
        <para>The following piece of code shows both cases: passing a future as parameter
 or as a result.</para>
        <blockquote>
          <para>
            <screen>
class C{
....
        public static void main(String[] args){
        ......
        A a = newActive(A);
        A b = newActive(B);
        Result r1 = a.foo();   //r1 is a future
        Result r2 = b.bar(r1); //r1 is passed as parameter
        Result r3 = b.bar2();  // see 
<emphasis role="bold">**</emphasis>
        ........
        }       //end of main
...
}       //end of class C
            </screen>
</para>
        </blockquote>
        <para>where</para>
        <blockquote>
          <para>
            <screen>
class A {
  ...
        public Result foo(){
        ...
        }
  ...
} //end of class A
class B{
...
         public Result bar (Result r) {
        ...
         }
  
        public Result bar2 () {
         A a = newActive(A);
        return a.foo();     // 
<emphasis role="bold">**</emphasis> future is sent as a result
         }
} //end of class B
            </screen>
</para>
        </blockquote>
      </sect2>
      <sect2 remap="h3">
        <title>Illustration of an Automatic Continuation with a future passed as parameter</title>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e1.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e1.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e1.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 Let us say that some piece of code in main method of an object C calls method <emphasis role="bold">foo()</emphasis> on
 an instance of class A.</para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e2.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e2.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e2.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 This calll is asynhronous and returns a future object <emphasis role="bold">Future_r1</emphasis> of class Result.</para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e3.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e3.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e3.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 Then method <emphasis role="bold">bar()</emphasis> is called on an instance of class B passing future <emphasis role="bold">Future_r1</emphasis> as
 a parameter to the method</para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e4.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e4.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e4.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 This calll is asynhronous and returns a future object <emphasis role="bold">Future_r2</emphasis> of class Result. B needs
 the value of <emphasis role="bold">Future_r1</emphasis> which is not yet available in order to return the result of
 method <emphasis role="bold">bar()</emphasis>, so it gets the future too.</para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e5.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e5.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e5.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 The value of the result for the call to method <emphasis role="bold">foo</emphasis> is now available, so A updates the
 value of <emphasis role="bold">Future_r1</emphasis></para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e6.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e6.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e6.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 C updates the value of <emphasis role="bold">Future_r1</emphasis> for B</para>
        <para></para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e7.png" format="PNG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e7.svg" format="SVG"/>              </imageobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/pics/e7.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>
 B returns the value for the call to method <emphasis role="bold">bar()</emphasis> and updates the value of <emphasis role="bold">Future_r2</emphasis> for C</para>
        <para></para>
        <para></para>
        <para></para>
        <para>
 </para>
      </sect2>
    </sect1>
  
</chapter>
