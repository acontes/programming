<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE DeploymentDescriptorList
    PUBLIC "-//Emory DCL//H2O DeploymentDescriptorList//1.0"
           "http://www.mathcs.emory.edu/dcl/h2o/dtd/DeploymentDescriptorList-1.0.dtd">

<DeploymentDescriptorList>

  <!-- Put in this file the descriptors of pluglets that you want automatically
       deployed when the kernel starts up. "DeploymentDescriptor" syntax:

       "name" attribute is requested name for the pluglet, to become an
       identifier for that pluglet instance and part of its URL. Do not confuse
       it with pluglet class name.

       "Classpath" is the space-separated list of URIs. It is the only piece
       of information that is mandatory, as it tells kernel where to
       look for pluglet binaries. Relative URIs in the classpath are resolved
       against kernel-specified base location, typically {h2o.dist}/services.

       Descriptor may have other, optional parameters; the syntax to specify
       them is <Param name="name" value="value"/>. Some of them may have default
       values; e.g. pre-compiled into pluglet JAR as Manifest attributes.

       Accepted parameters:

         className: name of the pluglet class. Manifest attr: "Pluglet-Class".
         Example value: "edu.emory.mathcs.h2o.example.hello.srv.impl.HelloImpl".

         dynamicLibraryPath: colon-separated list of prefixes that are prepended
         to the library name when searching for the dynamically linked library
         as a resource using the class loader API. Manifest attribute:
         "Dynamic-Library-Path". Example value: "${pvm.arch}/lib/:${pvm.arch}/bin"

         retryPolicy: decides what to do when pluglet with requested name
         already exists. Values: "Cancel", "Rename", "Replace". Default
         is "Rename".

       Additionally, you can specify application-specific parameters to the
       pluglet (it will receive them in the init() method) using the
       <InitParams> tag - see the examples below.
   -->

  <!-- The following is an example small descriptor. -->
  <!--
  <DeploymentDescriptor name="/example/hello">
    <Classpath path="example/hello/h2o-example-hello-1.0-srv.jar"/>
  </DeploymentDescriptor>
   -->

  <!-- the following deploys Harness Distributed Naming Service (HDNS) node
       on this kernel.
       By default, HDNS uses UDP multicast, which is only appropriate if all
       HDNS nodes are within a single LAN. Change the property hdns.stack.uri
       to override. If you choose TCP, you will need to modify some other
       JGroups stack options, e.g. provide initial_hosts argument to the
       TCPPING protocol; see JGroups documentation for details.

       When enabling this, you may want to examine the security policy
       so that authorized clients are able to connect to HDNS.
    -->
  <!--
  <DeploymentDescriptor name="/hdns-server">
    <Classpath path="hdns/lib/hdns-server.jar hdns/"/>
    <InitParams>
      <Param name="hdns.persistence.on" value="true"/>
      <Param name="hdns.persistence.file" value="${h2o.userdir}${/}hdns${/}persistentState.dat"/>
      <Param name="hdns.group.name" value="HDNS2"/>
      <Param name="hdns.persistence.interval" value="30000"/>
      <Param name="hdns.stack.uri" value="hdns/config/hdns_udp_stack.xml"/>
      <Param name="hdns.max.leasetime" value="300000"/>
      <Param name="hdns.getstate.timeout" value="5000"/>
    </InitParams>
  </DeploymentDescriptor>
  -->

  <!-- the following deploys Name Service Registrator pluglet, which registers
       its kernel in the specified JNDI directory upon startup, and unregisters
       upon shutdown. Should work with all JNDI providers that support
       URL-based naming; this includes hdns:// and jini:// .
    -->
  <!--
  <DeploymentDescriptor name="/system/ns/registrator">
    <Classpath path="system/ns/registrator/h2o-nsregistrator-1.0-srv.jar"/>
    <InitParams>
      <Param name="ns.uri" value="hdns://dcl.mathcs.emory.edu:7799/"/>
      <Param name="rebind" value="false"/>
      <Param name="kernel.name" value="${user.name}@${h2o.server.localhost}"/>
    </InitParams>
  </DeploymentDescriptor>
  -->


</DeploymentDescriptorList>
