<?xml version="1.0"?>
<!DOCTYPE KernelConfig
    PUBLIC "-//Emory DCL//H2O Kernel Config//1.0"
           "http://www.mathcs.emory.edu/dcl/h2o/dtd/kernel/kernelConfig-1.0.dtd">

<!-- Note: attributes describing the location, such as "passwordSource",
     "location", "trustdb", take a form of URL. Relative URLs may be used;
     then, the base URL is that of this kernel config location. Additionally,
     the following special URLs are permitted:

     * "null:"        : no data will be used (e.g. empty password)
     * "here:<value>" : the <value>, as appear in the text, will be used
     * "stdin:"       : the data will be read from the standard input
 -->

<KernelConfig>

  <Properties>

    <!-- "localhost" attribute determines the kernel URL format. It can be a host name,
         IP address, or one of: ":ip" ,":hostName", ":canonicalHostName"-->
    <Property name="h2o.server.localhost" value=":canonicalHostName"/>

    <!-- default pluglet location -->
    <Property name="h2o.service.base.dir" value="${h2o.home}${/}services"/>

    <!-- you can also specify base URL instead, e.g.:
    <Property name="h2o.service.base.url" value="$fileurl{${h2o.home}${/}services}"/>-->

    <Property name="h2o.userdir" value="${user.home}${/}.h2o"/>

    <!-- directory where kernel will store temporary files; will be created upon
         startup and deleted upon exit -->
    <Property name="h2o.kernel.workdir"
              value="${h2o.userdir}${/}kernel-${h2o.kernel.guid}"/>

    <!-- directory where kernel will store files staged (copied from the network) by
         authorized pluglets -->
    <Property name="h2o.kernel.stagedir" value="${h2o.kernel.workdir}${/}stage"/>

    <!-- Path to a logging configuration file. To capture logs from the very
         start of the H2O kernel, specify this as a command-line option though -->
    <Property name="java.util.logging.config.file"
              value="${h2o.home}${/}config${/}logging.properties"/>

  </Properties>

  <Endpoints>
    
    <Endpoint>
      <Transport name="stream.PlainSocketTransport"/>
      <Port>7799</Port>
    </Endpoint>
    <!--
    <Endpoint>
      <Transport name="stream.SSLSocketTransport"/>
      <Port>7800</Port>
    </Endpoint>
    -->
    <!-- the same two, tunneled through port 7801 -->
    <!--
    <Endpoint>
      <Transport name="stream.TunneledTransport">
        <Param>stream.PlainSocketTransport</Param>
        <Param>7801</Param>
      </Transport>
      <Port>7799</Port>
    </Endpoint>
    <Endpoint>
      <Transport name="stream.SSLSocketTransport">
        <Param>stream.TunneledTransport</Param>
        <Param>stream.PlainSocketTransport</Param>
        <Param>7801</Param>
      </Transport>
      <Port>7800</Port>
    </Endpoint>
    -->

    <!-- jxta endpoints - if want to use jxta -->

    <!-- Endpoint in private group
    <Endpoint>
      <Transport name="stream.JxtaSocketStream">
        <Param>edu.emory.mathcs.rmix.transport.jxta.utils.groups.membership.JxtaBasicSecurityGroupImpl</Param>
      </Transport>
      <Port>jxta.${host.name}.PrivH2OKernel@privGroup</Port>	
    </Endpoint> -->
    
    <!-- Endpoint in NetPeerGroup
    <Endpoint>
       <Transport name="stream.JxtaSocketStream">
       </Transport>
       <Port>jxta.${host.name}.H2OKernel</Port>	
    </Endpoint> -->


    <!-- enable other endpoints at will, e.g.:
         <Endpoint>
           <Transport name="stream.CompressedTransport">
             <Param>-1</Param>
             <Param>stream.SSLSocketTransport</Param>
           </Transport>
           <Port>7805</Port>
         </Endpoint>
      -->
  </Endpoints>

  <Security>
    <KeyStores>
      <KeyStore id="trustedCodeCerts" location="security/trustedCodeCerts"
                passwordSource="here:h2o-trustedCodeCerts"/>
    </KeyStores>

    <!-- By default, H2O kernel generates a self-signed certificate to
         identify itself to clients. If you would like to override this
         default behavior and specify custom X509 cert/priv key pair,
         put them in a keystore and use the following syntax to refer to them:

         <Identity keyStore="keystoreID" alias="keystoreEntryAlias"
                   passwordSource="file://location-of-privkey-passwd-file"/>
     -->

    <Authenticators>
      <Authenticator class="edu.emory.mathcs.h2o.security.auth.passwd.XMLFileAuthenticator"
                     trustdb="security/Users.xml"/>
    </Authenticators>

    <TrustedCodeCerts>
      <TrustedCodeCertEntry keyStore="trustedCodeCerts" alias="*"/>
    </TrustedCodeCerts>

    <AuthorizationPolicy location="security/Policy.xml"/>
  </Security>

  <!-- Deployment descriptor lists of pluglets to be deployed upon startup -->
  <Autostart>
    <Deploy from="Autodeploy.xml" by="Autostart"/>
  </Autostart>

</KernelConfig>
