<?xml version="1.0" encoding="UTF-8"?>
<chapter><title>IC2D: Interactive Control and Debugging of Distribution</title>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/doc-files/IC2D.html  -->
  
    <para> <emphasis role="bold">IC2D</emphasis> is a <emphasis role="bold">graphical environment</emphasis> for remote monitoring and
 steering of <emphasis role="bold">distributed and grid applications</emphasis>. IC2D features <emphasis role="bold">graphical
 visualisation</emphasis> and <emphasis role="bold">drag and drop migration</emphasis> of remote objects. As it is being interfaced
 with <emphasis role="bold">Jini</emphasis> and <emphasis role="bold">Globus</emphasis>, it can also serve as a building block for <emphasis role="bold">grid</emphasis> and <emphasis role="bold">computing portals</emphasis>. <emphasis role="bold">IC2D</emphasis> is built on top of <emphasis role="bold">RMI</emphasis> and <emphasis role="bold">ProActive</emphasis> that
 provides asynchronous calls and migration.</para>
    <para><emphasis role="bold">The basic features of IC2D are:</emphasis></para>
    <informaltable frame="all">
      <tgroup cols="3">
<!--        <colspec colname="c1" colwidth="33*"/>
        <colspec colname="c2" colwidth="33*"/>
        <colspec colname="c3" colwidth="33*"/>
        -->
        <tbody>
          <row>
            <entry><para>Graphical Visualisation</para></entry>
            <entry><para>Textual Visualisation</para></entry>
            <entry><para>Control and Monitoring</para></entry>
          </row>
          <row>
            <entry><para>Hosts, Java Virtual Machines, Active Objects</para></entry>
            <entry><para>Ordered list of messages</para></entry>
            <entry><para>Interactive control of mapping upon creation</para></entry>
          </row>
          <row>
            <entry><para>Topology: reference and communications</para></entry>
            <entry><para>Status: waiting for a request or for a data</para></entry>
            <entry><para>Interactive control of destination upon migration</para></entry>
          </row>
          <row>
            <entry><para>Status of active objects (executing, waiting, etc.)</para></entry>
            <entry><para>Causal dependencies between messages</para></entry>
            <entry><para>Dynamic change of deployment</para></entry>
          </row>
          <row>
            <entry><para>Migration of activities</para></entry>
            <entry><para>Related events (corresponding send and receive, etc.)</para></entry>
            <entry><para>Drag and Drop migration of executing tasks</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para></para>
    <para>The full source of IC2D is included in the distribution and is also
 browseable on line.</para>
    <para><ulink url="../doc/ProActive_src_html/index.xml">Source code index</ulink></para>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.IC2D_html_visualisation"/>Graphical Visualisation within
 IC2D</title>
      <para><emphasis role="bold">IC2D features graphical visualisation of hosts, Java Virtual Machines,
 and active objects, including the topology and volume of communications.</emphasis></para>
      <para>&#160;</para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata width="6in" fileref="doc-files/images/ic2d_c3d.png" format="PNG"/>            </imageobject>
          </mediaobject>
<ulink url="ic2d_c3d.jpg"></ulink>        </informalfigure>
</para>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.IC2D_html_control"/>Control within IC2D</title>
      <para><emphasis role="bold">IC2D permits to interactively and dynamically create new Jvms and Nodes.</emphasis></para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata width="6in" fileref="doc-files/images/RemoteControl.png" format="PNG"/>            </imageobject>
          </mediaobject>
<ulink url="RemoteControl.jpg"></ulink>        </informalfigure>
</para>
      <para><emphasis role="bold">A &#39;drag-and-drop&#39; migration allows to graphically move running
 active objects between machines.</emphasis></para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="6in" fileref="doc-files/images/ic2d_migrate_witharrow.png" format="PNG"/>          </imageobject>
        </mediaobject>
      </informalfigure>
      <para><emphasis role="bold">IC2D permits to visualize related events and AOs state</emphasis></para>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.IC2D_html_applications"/>Job monitoring and control</title>
      <para><anchor id="dbdoclet.id.IC2D_html_JobMonitoringTag"/><emphasis role="bold">IC2D now provides a Job
 monitoring tool, in order to visualize and control high number of resources. This tool offers
 different views of a deployed application: per hosts, per jobs,....
 To start the Job monitor tool, choose in the IC2D menu: windows --&gt; Show Job Monitor
 windows</emphasis></para>
      <para></para>
      <para></para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="6in" fileref="doc-files/images/jobmonitor2_logo.png" format="PNG"/>          </imageobject>
        </mediaobject>
      </informalfigure>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="6in" fileref="doc-files/images/jobmonitor1_logo.png" format="PNG"/>          </imageobject>
        </mediaobject>
      </informalfigure>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.IC2D_html_launcher"/>Launcher</title>
      <sect2 remap="h3">
        <title>Principles</title>
        <para>The launcher allows users to launch applications directly from an XML descriptor file, without
 any script. The new XML descriptor is nearly the same as classical descriptor files, the syntax
 is only extended. The deployment will be done in two different phasis.</para>
        <para>
 first, a new node, a &quot;main node&quot; will be created and activated and then, it is this
 node that will deploy the rest of the application.</para>
        <para></para>
      </sect2>
      <sect2 remap="h3">
        <title>MainDefinition tag</title>
        <para>A new tag has been introduced, just before the component definition tag. This tag is named
 &quot;mainDefinition&quot; and its syntax is :</para>
<screen> 
 &#160;&lt;mainDefinition id=&quot;mainID&quot; class=&quot;theClassToLaunchContainingAMainMethod&quot;&gt;
 &#160;&#160;&lt;arg value=&quot;param1&quot;&gt; 
 &#160;&#160;&lt;arg value=&quot;param2&quot;&gt;
 &#160;&#160;&lt;mapToVirtualNode value=&quot;main-Node&quot;/&gt;
 &#160;&lt;/mainDefinition&gt;
</screen>
         
<para>
 Eventually, several mains might be defined so the <emphasis role="bold">id</emphasis> allows to identify all
 mainDefinitions.</para>
        <para></para>
        <para>
 The <emphasis role="bold">class</emphasis> attribute is the path where can be found the class to launch.</para>
        <para><emphasis role="bold">This class MUST contain a main method.</emphasis></para>
        <para></para>
        <para>
 Then any number of parameters can be declared in <emphasis role="bold">arg</emphasis> tags. The parameters will be given to
 the main method in the same order the were declared.</para>
        <para></para>
        <para>
 And finally a <emphasis role="bold">mapToVirtualNode</emphasis> tag will link the main info to virtual node, declared with
 the same name in the virtualNodeDefinitions tag (in componentDefinition).</para>

<screen>
 &#160;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &#160;&lt;ProActiveDescriptor xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xsi:noNamespaceSchemaLocation=&quot;DescriptorSchema.xsd&quot;&gt;
 &#160;&#160;&lt;!-- &lt;security file=&quot;../../descriptors/c3dPolicy.xml&quot;&gt;&lt;/security&gt; --&gt; 
 &#160;&#160;&lt; componentDefinition&gt;
 &#160;&#160;&#160;&lt; virtualNodesDefinition&gt;
 &#160;&#160;&#160;&#160;&lt; virtualNode name=&quot;Dispatcher&quot;
 property=&quot;unique_singleAO&quot;/&gt;
 &#160;&#160;&#160;&#160;&lt; virtualNode name=&quot;Renderer&quot;/&gt;
 &#160;&#160;&#160;&lt; /virtualNodesDefinition&gt;
 &#160;&#160;&lt; /componentDefinition&gt;
 &#160;&#160;&lt; deployment&gt;
 &#160;&#160;&#160;&lt; register virtualNode=&quot;Dispatcher&quot;/&gt;
 &#160;&#160;&#160;&lt; mapping&gt;
 &#160;&#160;&#160;&#160;&lt; map virtualNode=&quot;Dispatcher&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; jvmSet&gt;
 &#160;&#160;&#160;&#160;&#160;&#160;&lt; currentJVM/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /jvmSet&gt;
 &#160;&#160;&#160;&#160;&lt; /map&gt;
 &#160;&#160;&#160;&#160;&lt; map virtualNode=&quot;Renderer&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; jvmSet&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; vmName value=&quot;Jvm1&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; vmName value=&quot;Jvm2&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; vmName value=&quot;Jvm3&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; vmName value=&quot;Jvm4&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /jvmSet&gt;
 &#160;&#160;&#160;&#160;&lt; /map&gt;
 &#160;&#160;&#160;&lt; /mapping&gt;
 &#160;&#160;&#160;&lt; jvms&gt;
 &#160;&#160;&#160;&#160;&lt; jvm name=&quot;Jvm1&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; creation&gt;
 &#160;&#160;&#160;&#160;&#160;&#160;&lt; processReference
 refid=&quot;localJVM&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /creation&gt;
 &#160;&#160;&#160;&#160;&lt; /jvm&gt;
 &#160;&#160;&#160;&#160;&lt; jvm name=&quot;Jvm2&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; creation&gt;
 &#160;&#160;&#160;&#160;&#160;&#160;&lt; processReference
 refid=&quot;localJVM&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /creation&gt;
 &#160;&#160;&#160;&#160;&lt; /jvm&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; jvm name=&quot;Jvm3&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; creation&gt;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt; processReference refid=&quot;localJVM&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /creation&gt;
 &#160;&#160;&#160;&#160;&lt; /jvm&gt;
 &#160;&#160;&#160;&#160;&lt; jvm name=&quot;Jvm4&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; creation&gt;
 &#160;&#160;&#160;&#160;&#160;&#160;&lt; processReference refid=&quot;localJVM&quot;/&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; /creation&gt;
 &#160;&#160;&#160;&#160;&lt; /jvm&gt;
 &#160;&#160;&#160;&lt; /jvms&gt;
 &#160;&#160;&lt; /deployment&gt;
 &#160;&#160;&lt; infrastructure&gt;
 &#160;&#160;&#160;&lt; processes&gt;
 &#160;&#160;&#160;&#160;&lt; processDefinition id=&quot;localJVM&quot;&gt;
 &#160;&#160;&#160;&#160;&#160;&lt; jvmProcess class=&quot;org.objectweb.proactive.core.process.JVMNodeProcess&quot;&gt;&lt;/jvmProcess&gt;
 &#160;&#160;&#160;&#160;&lt; /processDefinition&gt;
 &#160;&#160;&#160;&lt; /processes&gt;
 &#160;&#160;&lt; /infrastructure&gt;
 &#160;&lt;/ProActiveDescriptor&gt;
</screen>
      </sect2>
      <sect2 remap="h3">
        <title>API</title>
        <para>The Launcher class is located in the package <emphasis role="bold">org.objectweb.proactive.core.descriptor</emphasis>.
 To use it you will have to create a new instance of the launcher with the path of the XML
 descriptor (this descriptor must contain a <emphasis role="bold">mainDefinition tag</emphasis>). The constructor will parse
 the file and reify a ProActiveDescriptor. You only have to call the <emphasis role="bold">activate()</emphasis> method on
 the launcher instance to launch the application.</para>
        <para></para>
        <para><emphasis role="underline">For example:</emphasis><literal>Launcher launcher = new Launcher
 (&quot;myDescriptor.xml&quot;) ;</literal></para>
        <para><literal>launcher.activate() ;</literal></para>
        <para></para>
        <para>
 you can also get the ProActiveDescriptor built by the launcher by calling the getDescriptor()
 method on the launcher instance.</para>
        <para></para>
        <para><literal>ProActiveDescriptor pad = launcher.getDescriptor() ;</literal></para>
      </sect2>
      <sect2 remap="h3">
        <title>Launcher in IC2D</title>
        <para>You will find the launcher in the <emphasis role="bold">launcher menu</emphasis>, in the menu bar. Click then on <emphasis role="bold">launch a new application</emphasis>.</para>
        <para></para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/images/launcher_menu.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para></para>
        <para></para>
        <para>Now it opens a new window proposing you to browse your file system for a XML descriptor and
 load it into a descriptors list. A right click on the list items allows you to launch (activate)
 the application. Two checkbox control the graphical monitoring and textual job monitoring your
 application.</para>
        <para>
          <informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata width="6in" fileref="doc-files/images/launcher_frame.png" format="PNG"/>              </imageobject>
            </mediaobject>
          </informalfigure>
</para>
        <para>You can kill the applications launched with from a popupmenu in the &quot;activated
 applications&quot; table.</para>
      </sect2>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.IC2D_html_gridcomp"/>Grid and cluster computing</title>
      <para><emphasis role="bold">As ProActive is interfaced with Globus and LSF, IC2D permits to interactively control and
 debug applications that execute on intercontinental-wide networks.</emphasis> Below is C3D application
 deployed with JINI and RMI protocol between Baltimore US and Nice France on a globus cluster and
 LSF cluster</para>
      <para>&#160;</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="6in" fileref="doc-files/images/clusterLogo.png" format="PNG"/>          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>This experiment was partly sponsored by &#160;&#160; 
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata width="1in" fileref="doc-files/images/logoSun.png" format="PNG"/>            </imageobject>
          </mediaobject>
        </informalfigure>
</para>
    
</sect1>
  
</chapter>
