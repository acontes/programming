<?xml version="1.0" encoding="UTF-8"?>
<project name="ProActive" default="compile" basedir=".">
	<taskdef name="if" classname="ise.antelope.tasks.IfTask"/>

	<property environment="env" />
	
	<property name="base.dir" value="${basedir}/.." />
	<property name="lib.dir" value="${base.dir}/lib" />
	<property name="src.dir" value="${base.dir}/src" />
	<property name="dev.dir" value="${base.dir}/dev" />
	<property name="daemon.dir" value="${base.dir}/p2p" />
	<property name="classes.dir" value="${base.dir}/classes" />
	<property name="test.classes.dir" value="${base.dir}/test-classes" />
	<property name="classlibs.dir" value="${base.dir}/classlibs" />
	<property name="dist.dir" value="${base.dir}/dist" />
	<property name="PAdist.dir" value="${dist.dir}/ProActive" />
	<property name="doc.src" value="${base.dir}/doc-src" />
	<property name="docs.dir" value="${base.dir}/docs" />
	<property name="docs.tmp.dir" value="${docs.dir}/tmp" />
	<property name="docs.mainFile" value="PA_index.xml" />

	<property name="proactive.dir" value="org/objectweb/proactive" />
	<property name="proactive.core.dir" value="${proactive.dir}/core" />
	<property name="proactive.ext.dir" value="${proactive.dir}/ext" />

	<!-- Javac properties -->
	<property name="javac.debug" value="on" />
	<property name="javac.source" value="1.5" />
	
	<!-- Osgi properties -->
	<property name="manifest.dir" value="${src.dir}/org/objectweb/proactive/osgi/Manifest/" />
	<property name="manifest.example.dir" value="${src.dir}/org/objectweb/proactive/examples/osgi/hello/Manifest/" />
	<property name="config.dir" value="${classes.dir}/${proactive.core.dir}/config/" />
	<property name="bundle.dir" value="${base.dir}/dist/bundle" />

	
	<!--
		Create a timestamp for this build 
		If ${version} is defined its value is used as string version for this build
		Otherwise the timestamp is used
	-->
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd" />
	</tstamp>
	
	<if name="version">
		<property name="version_" value="${version}"/>
		<else>
			<property name="version_" value="${TODAY}"/>
		</else>
	</if>

	
	<!-- ================================================================ -->
	<!--                   define the different classpaths                -->
	<!--  =============================================================== -->
	
	<path id="project.libs">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
			<include name="jini/*.jar" />
			<include name="globus/*.jar" />
			<include name="ws/*.jar" />
			<include name="osgi/*.jar" />
			<include name="osgi/management/group/*.jar" />
			<include name="components/*.jar" />
			<include name="ibis/*.jar" />
			<include name="unicore/*.jar" />
			<include name="glite/*.jar" />
			<include name="scilab/*.jar" />
			<include name="timit/*.jar" />
		</fileset>
		<!-- XXX ${dev.dir} is not included in the source release ! -->
		<pathelement location="${dev.dir}/lib/junit-4.1.jar"/> 
	</path>
		
	<path id="project.classpath">
		<pathelement location="${base.dir}/classes" />
		<path refid="project.libs"/>
	</path>
	
	<path id="test.classpath">
		<pathelement location="${dist.dir}/ProActive/ProActive.jar"/>
		<path refid="project.libs"/>
		<pathelement location="${test.classes.dir}"/>
	</path>
	
	<path id="examples.classpath">
		<path refid="project.classpath" />
		<pathelement location="${lib.dir}/examples/clibwrapper_jiio.jar" />
		<pathelement location="${lib.dir}/examples/jai_codec.jar" />
		<pathelement location="${lib.dir}/examples/jai_core.jar" />
		<pathelement location="${lib.dir}/examples/mlibwrapper_jai.jar" />
		<pathelement location="${lib.dir}/examples/jai_imageio.jar" />
	</path>


	<!-- ================================================================ -->
	<!--                       Initialisation                             -->
	<!--  =============================================================== -->
	<target name="init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes.dir}" />
		<echo message="--- Debugging is ${javac.debug} ---" />
	</target>


	<!-- ================================================================ -->
	<!--                   Compile All and build the docs                 -->
	<!--  =============================================================== -->
	<target name="all" depends="compile,docs" description="Compile All and build the docs" />


	<!-- ================================================================ -->
	<!--                          Compile All                             -->
	<!--  =============================================================== -->
	<target name="compile" depends="addons, ic2d, p2p, timit, examples, trywithcatch, stub_wrapper, mpi" description="build the class files" />

	<target name="addons" depends="bnb, calcium, jmx, loadbalancing, osgi, scilab, webservices"/>
	
	<!-- ================================================================ -->
	<!--                   Compile ProActive Core                         -->
	<!--  =============================================================== -->
	<target name="configurationCopy">
		<copy toDir="${classes.dir}">
			<fileset dir="${src.dir}">
				<include name="org/**/*.xml" />
				<include name="org/**/*.fractal" />
				<include name="org/**/*.properties" />
				<include name="org/**/*.xsd" />
				<include name="org/objectweb/proactive/core/component/adl/xml/proactive.dtd" />
			</fileset>
		</copy>
		<!-- copy descriptor schema -->
		<copy todir="${classes.dir}/org/objectweb/proactive/core/descriptor/xml/" overwrite="yes">
			<fileset dir="${base.dir}/descriptors">
				<include name="*.xsd"/>
			</fileset>
        </copy>
		<copy todir="${base.dir}/descriptors/examples" overwrite="yes" file="${base.dir}/descriptors/DescriptorSchema.xsd"/>
	</target>




	<target name="core" depends="init, configurationCopy" description="Compile the ProActive core classes">
		<!-- If it is a release, update ProActive.getVersion() -->
		<if name="version">
			<replaceregexp 
				file="${src.dir}/${proactive.dir}/ProActive.java"		
				match="\$Id.*\$"
				replace="${version}"
				byline="true" />
		</if>
		
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/*.java" />
			<include name="${proactive.core.dir}/**/*.java" />
			<exclude name="${proactive.dir}/branchnbound/**"/>
			<exclude name="${proactive.dir}/calcium/**"/>
			<exclude name="${proactive.dir}/examples/**"/>
			<exclude name="${proactive.dir}/ic2d/**"/>
			<exclude name="${proactive.dir}/jmx/**"/>
			<exclude name="${proactive.dir}/loadbalancing/**"/>
			<exclude name="${proactive.dir}/osgi/**"/>
			<exclude name="${proactive.dir}/ext/scilab/**"/>
			<exclude name="${proactive.dir}/ext/**"/>
		</javac>

		<rmic classname="org.objectweb.proactive.core.body.jini.JiniRemoteBodyImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.body.rmi.RmiRemoteBodyImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.runtime.rmi.RmiProActiveRuntimeImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.runtime.rmi.RmiProActiveRuntimeForwarderImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.runtime.jini.JiniRuntimeImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.body.ft.servers.FTServer" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
		<rmic classname="org.objectweb.proactive.core.body.rmi.RmiRemoteBodyForwarderImpl" base="${classes.dir}" sourcebase="${classes.dir}" stubversion="1.2">
			<classpath refid="project.classpath" />
		</rmic>
	</target>


	<!-- ================================================================ -->
	<!--                      Compile Branch and Bound                    -->
	<!--  =============================================================== -->
	<target name="bnb" depends="core, stubGenerator">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/branchnbound/**/*.java" />
		</javac>
		<!-- BnB API stubs generation -->
		<echo message="Branch and Bound API stubs generating..." />
		<property name="stub_bnb.classdir" value="${base.dir}/classes" />
		<path id="bnbClassDir">
			<pathelement path="${stub_bnb.classdir}" />
		</path>
		<pathconvert pathsep=" " property="bnbClassesDir" refid="bnbClassDir" />
		<path id="bnbClasses">
			<fileset dir="${classes.dir}/org/objectweb/proactive/branchnbound">
				<include name="**/*.class" />
				<exclude name="**/*$*" />
			</fileset>
		</path>
		<pathconvert pathsep=" " property="bnb-files" refid="bnbClasses">
			<map from="${bnbClassesDir}" to="" />
		</pathconvert>
		<java classname="org.objectweb.proactive.ext.util.StubGenerator" fork="true">
			<classpath refid="project.classpath" />
			<arg line="-d ${classes.dir}
        ${bnb-files}" />
		</java>
	</target>

	<!-- ================================================================ -->
	<!--                      Compile TimIt for benchmarking              -->
	<!--  =============================================================== -->
	<target name="timit" depends="core">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="off" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/benchmarks/timit/**/*.java" />
		</javac>
	</target>

	<!-- ================================================================ -->
	<!--                      Compile Calcium Stubs                       -->
	<!--  =============================================================== -->
	<target name="calcium" depends="core, stubGenerator">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/calcium/**/*.java" />
		</javac>
		<!-- Calcium stubs generation -->
		<echo message="Calcium stubs generating..." />
		<property name="stub_calcium.classdir" value="${base.dir}/classes" />
		<path id="calciumClassDir">
			<pathelement path="${stub_calcium.classdir}" />
		</path>
		<pathconvert pathsep=" " property="calciumClassesDir" refid="calciumClassDir" />
		<path id="calciumClasses">
			<fileset dir="${classes.dir}/org/objectweb/proactive/calcium/proactive">
				<include name="**/*.class" />
				<exclude name="**/*$*" />
			</fileset>
			<fileset dir="${classes.dir}/org/objectweb/proactive/calcium/">
				<include name="**/*Task.class"/>
				<exclude name="**/*$*" />
			</fileset>
		</path>
		<pathconvert pathsep=" " property="calcium-files" refid="calciumClasses">
			<map from="${calciumClassesDir}" to="" />
		</pathconvert>
		<java classname="org.objectweb.proactive.ext.util.StubGenerator" fork="true">
			<classpath refid="project.classpath" />
			<arg line="-d ${classes.dir} ${calcium-files}" />
		</java>
	</target>


	<!-- ================================================================ -->
	<!--                          Compile ic2d                            -->
	<!--  =============================================================== -->
	<target name="ic2d" depends="core" description="Compile the IC2D Tool">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/ic2d/**/*.java" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
		</javac>
		<copy todir="${classes.dir}/${proactive.dir}/ic2d/gui/images" includeEmptyDirs="no">
			<fileset dir="${src.dir}/${proactive.dir}/ic2d/gui/images" />
		</copy>
		<!-- JobMonitor images -->
		<copy todir="${classes.dir}/${proactive.dir}/ic2d/gui/jobmonitor/images" includeEmptyDirs="no">
			<fileset dir="${src.dir}/${proactive.dir}/ic2d/gui/jobmonitor/images" />
		</copy>
	</target>

	<!-- ================================================================ -->
	<!--                          Compile scilab                            -->
	<!--  =============================================================== -->
	<target name="scilab" depends="core" description="Compile the SCILAB Tool">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/ext/scilab/**/*.java" />
		</javac>
		<copy todir="${classes.dir}/${proactive.dir}/ext/scilab/gui/img" includeEmptyDirs="no">
			<fileset dir="${src.dir}/${proactive.dir}/ext/scilab/gui/img" />
		</copy>
	</target>

	<!-- ================================================================ -->
	<!--                      Compile LoadBalancing                       -->
	<!--  =============================================================== -->
	<target name="loadbalancing" depends="core">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/loadbalancing/**/*.java" />
		</javac>
	</target>
	
	<!-- ================================================================ -->
	<!--                      Compile WebServices                         -->
	<!--  =============================================================== -->
	<target name="webservices" depends="core">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/ext/webservices/**/*.java" />
		</javac>
	</target>


	<!-- ================================================================ -->
	<!--                      Compile P2P                                 -->
	<!--  =============================================================== -->
	<target name="p2p" depends="core">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/p2p/**/*.java" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
		</javac>
	</target>
	
	<target name="p2p_daemon">
		<exec dir="${daemon.dir}/src/common" executable="cc" os="Linux, Darwin, SunOS">
			<arg line="-Wall -g -o proactivep2p -x c proactivep2p.cpp proactivep2p.h" />
		</exec>
		<exec dir="${daemon.dir}/src/common" executable="cc" os="Linux, Darwin, SunOS">
			<arg line="-Wall -g -o p2pctl -x c p2pctl.c proactivep2p.h" />
		</exec>
		<mkdir dir="${daemon.dir}/build" />
		<move file="${daemon.dir}/src/common/proactivep2p" todir="${daemon.dir}/build" />
		<move file="${daemon.dir}/src/common/p2pctl" todir="${daemon.dir}/build" />
	</target>


	<!-- ================================================================ -->
	<!--                      Compile Examples                            -->
	<!--  =============================================================== -->

	<target name="examples" depends="core, addons" description="Compile all the examples">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/examples/**/*.java" excludes="${proactive.dir}/examples/nbody/common/NBody3DFrame.java" deprecation="on" source="${javac.source}" debug="${javac.debug}" encoding="UTF-8">
			<classpath refid="examples.classpath" />
		</javac>
		<copy todir="${classes.dir}/${proactive.dir}/examples" includeEmptyDirs="no">
			<fileset dir="${src.dir}/${proactive.dir}/examples">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		
	
		<available classname="com.sun.j3d.utils.behaviors.mouse.MouseWheelZoom" property="java3d_present"/>	
		<if name="java3d_present">
			<echo message="Info: Java3D installed." />
			<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/examples/nbody/common/NBody3DFrame.java" deprecation="on" source="${javac.source}" debug="${javac.debug}">
				<classpath refid="examples.classpath" />
			</javac>
			<else>
				<echo message="Info: Java 3D dependencies were not resolved." />			
			</else>
		</if>
	</target>
	

	<!-- ================================================================ -->
	<!--                      Compile Test Suite                         -->
	<!--  =============================================================== -->
	<target name="testsuite">
		<copy toDir="${test.classes.dir}">
			<fileset dir="${src.dir}/testsuite">
				<include name="**/*.properties" />
				<include name="**/*.css" />
				<include name="**/*.xml" />
				<include name="**/*.xsl" />
				<include name="**/*.xsd" />
			</fileset>
		</copy>
		<mkdir dir="${test.classes.dir}"/>
		<javac srcdir="${src.dir}" destdir="${test.classes.dir}" includes="testsuite/**" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<!-- ================================================================ -->
	<!--                      Compile JMX Connector                       -->
	<!--  =============================================================== -->
	<target name="jmx" depends="core">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/jmx/**/**" deprecation="on" source="${javac.source}" debug="${javac.debug}" />
	</target>
	
	<!-- ================================================================ -->
	<!--                      Compile OSGi                       -->
	<!--  =============================================================== -->
	
	<target name="osgi" depends="core" description="Compile osgi related stuff">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/osgi/**/*.java" />
		</javac>
	</target>
	<!-- ================================================================ -->
	<!--                      Compile TryWithCatch annotator              -->
	<!--  =============================================================== -->
	<target name="trywithcatch">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="trywithcatch/" deprecation="on" source="${javac.source}" debug="${javac.debug}" />
	</target>


	<!-- ================================================================ -->
	<!--                      Compile util                                -->
	<!--  =============================================================== -->
	<target name="util" depends="">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="util/**" deprecation="on" source="${javac.source}" debug="${javac.debug}" />
	</target>


	<!-- ================================================================ -->
	<!--                  Clean up generated files                        -->
	<!--  =============================================================== -->
	<target name="clean" description="Remove all generated files">
		<delete dir="${classes.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${docs.dir}" />
		<delete dir="${classlibs.dir}" />
		<delete dir="${test.classes.dir}" />
        <delete file="tests.log" />
        <delete file="descriptors/examples/DescriptorExamples.xsd"/>
	</target>


	<!-- ================================================================ -->
	<!--                      Create ProActive.jar                        -->
	<!--  =============================================================== -->
	<target name="proActiveJar" depends="dist-mk-dir, compile" description="Create the ProActive jar, to be used for instance on a distant host">
		<jar jarfile="${PAdist.dir}/ProActive.jar">
			<fileset dir="${classes.dir}">
				<include name="${proactive.dir}/core/descriptor/xml/DescriptorSchema.xsd"/>
				<include name="${proactive.dir}/**" />
				<exclude name="${proactive.dir}/examples/**" />
				<exclude name="${proactive.dir}/ic2d/**" />
			</fileset>
		</jar>
	</target>


	<!-- ================================================================ -->
	<!--                    Create OSGI ProActiveBundle.jar                    -->
	<!--  =============================================================== -->
	<target name="proActiveBundle" depends="compile">
		<mkdir dir="${bundle.dir}" />
		<jar manifest="${manifest.dir}/Manifest.mf" jarfile="${bundle.dir}/proactiveBundle.jar">
			<fileset dir="${classes.dir}">
				<include name="${proactive.dir}/**" />
			</fileset>
			<fileset dir="${lib.dir}/">
				<include name="asm.jar" />
				<include name="log4j.jar" />
				<include name="xercesImpl.jar" />
				<include name="bouncycastle.jar" />
				<include name="components/fractal.jar" />
			</fileset>

			<fileset dir="${config.dir}">
				<include name="ProActiveConfiguration.xml" />
			</fileset>
		</jar>
	</target>


	<!-- ================================================================ -->
	<!--                  Create OSGI helloWorlBundle.jar                      -->
	<!--  =============================================================== -->
	<target name="osgiHelloWorldBundle" depends="examples">
		<mkdir dir="${bundle.dir}" />
		<jar manifest="${manifest.example.dir}/Manifest.mf" jarfile="${bundle.dir}/helloWorldBundle.jar">
			<fileset dir="${classes.dir}">
				<include name="${proactive.dir}/examples/osgi/hello/HelloActivator.class" />
				<include name="${proactive.dir}/examples/hello/Hello.class" />
			</fileset>
		</jar>
	</target>


	<!-- ================================================================ -->
	<!--                  Create  distribution bin                        -->
	<!--  =============================================================== -->

	<target name="dist-mk-dir" description="Make distribution directories">
		<delete dir="${dist.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${PAdist.dir}" />
	</target>
	
	<target name="dist-cp-files" depends="dist-mk-dir" 
		description="Copy files for the release">
		<!--        copy docs / scripts / src / compile / lib      -->
		<copy todir="${PAdist.dir}" includeEmptyDirs="no">
			<fileset dir="${base.dir}">
				<include name="README.html" />
				<include name="docs/**" />
				<include name="doc-src/**" />
				<include name="scripts/**" />
				<include name="src/org/**" />
				<include name="compile/**" />
				<include name="lib/**" />
				<include name="descriptors/**" />
				<include name="p2p/**" />
				<include name="ic2d-plugins-src/**" />
				
				<exclude name="p2p/config/**" />
				<exclude name="**/.svn" />
				<exclude name="scripts/unix/grid5000/**" />
				<exclude name="scripts/unix/gridexperiment/**" />
			</fileset>
		</copy>		
		<!-- set right files permissions -->
		<chmod dir="${PAdist.dir}/scripts/unix" perm="755" includes="**/*.sh" />
		<chmod file="${PAdist.dir}/compile/build" perm="755" />
	</target>
	
	<target name="dist-examples_ic2d-jar" 
		depends="dist-mk-dir, compile">
		<!-- Build the examples Jar -->
		<jar jarfile="${PAdist.dir}/ProActive_examples.jar" 
			basedir="${classes.dir}" 
			includes="${proactive.dir}/examples/**" />
		<!-- Build ic2d (NOT ECLIPSE version) Jar -->
		<jar jarfile="${PAdist.dir}/ic2d.jar" basedir="${classes.dir}"
			includes="${proactive.dir}/ic2d/**" />
	</target>
		
	<target name="dist-bin"
		depends="dist-examples_ic2d-jar, proActiveJar, dist-cp-files"
		description="Create zip with only jars">
		<!-- Zip with Jars: PA, PAExamples, required libs, scripts -->
		<zip zipfile="${dist.dir}/ProActive-bin_${version_}.zip">
			<zipfileset dir="${PAdist.dir}" filemode="755" prefix="ProActive">
				<exclude name="src/**" />
				<exclude name="compile/**" />
				<exclude name="doc-src/**" />
				<exclude name="p2p/**" />
				<exclude name="docs/**" />
				<exclude name="README.html" />
				<exclude name="ic2d-plugins-src/**" />
			</zipfileset>
			<zipfileset dir="${PAdist.dir}" filemode="755" prefix="ProActive">
				<include name="compile/**/*.jar" />
				<include name="compile/*.jar" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="dist-doc" depends="docs, dist-cp-files"
		description="Create zip with only doc">
		<zip zipfile="${dist.dir}/ProActive-doc_${version_}.zip">
			<zipfileset dir="${PAdist.dir}/docs" prefix="ProActive/docs" />
		</zip>
	</target>
	
	<target name="dist-src" depends="dist-cp-files"
		description="Create zip with only sources and libs">
		<zip zipfile="${dist.dir}/ProActive-src_${version_}.zip">
			<zipfileset dir="${PAdist.dir}" filemode="755" prefix="ProActive" >
				<exclude name="docs/**"/>
				<exclude name="ProActive_examples.jar" />
				<exclude name="ic2d.jar" />
				<exclude name="ProActive.jar" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="dist-bundle" depends="dist-cp-files, proActiveJar, dist-examples_ic2d-jar"
		description="Create a zip with everythings">
		<zip zipfile="${dist.dir}/ProActive-bundle_${version_}.zip">
			<zipfileset dir="${PAdist.dir}" filemode="755" prefix="ProActive">
				<exclude name="doc-src/**" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="dist" depends="dist-doc, dist-bin, dist-src, dist-bundle" 
		description="Create zips for release"/>

	<!-- ================================================================ -->
	<!--        Same as below + format source files                       -->
	<!--  =============================================================== -->
	<target name="copyright_format" depends="update_copyright_and_version, format" />

	<!-- ================================================================ -->
	<!--        Update Copyright and Version in every text files          -->
	<!--  =============================================================== -->
	<target name="update_copyright_and_version" depends="util">
		<java classname="util.UpdateCopyrightAndVersion" fork="true">
			<classpath refid="project.classpath" />
			<!--  base dir -->
			<arg value="${base.dir}" />
			<!--  exclude dirs -->
			<arg value="${docs.dir}" />
			<arg value="${dist.dir}" />
			<arg value="${classes.dir}" />
			<arg value="${test-classes.dir}" />
			<arg value="${lib.dir}" />
			<arg value="${dev.dir}" />
		</java>
	</target>


	<!-- ================================================================ -->
	<!--            Formats the project sources                           -->
	<!-- ================================================================ -->
	<target name="format" description="Formats the project source files">

		<!-- declare the Jalopy task -->
		<taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
			<classpath>
				<fileset dir="${base.dir}/dev/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}">
					<include name="log4j.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<jalopy classpathref="project.classpath" style="proactiveJalopy.xml">
			<fileset dir="${src.dir}/org/objectweb/proactive">
				<include name="**/*.java" />
			</fileset>
		</jalopy>

	</target>


	<!-- ================================================================ -->
	<!--            Create docs, which is the javadoc + manual            -->
	<!--  =============================================================== -->
	<target name="docs" depends="java2html, javadoc, manual" description="Construct the javadoc and the manual" />


	<!-- ================================================================ -->
	<!--            Make the java files readable on the web               -->
	<!--  =============================================================== -->
	<!-- 
	** Do not support Java 1.5 **
	<target name="java2html">
		<echo message="Converting java to html..." />
		<java jar="${base.dir}/dev/lib/j2h.jar" fork="true">
			<arg line="-d ${docs.dir}/ProActive_src_html" />
			<arg line="-js ${src.dir}/${proactive.dir}" />
			<arg line="-jd ${docs.dir}/api http://www-sop.inria.fr/oasis/ProActive/doc/api" />
			<arg line="-t 2 -n '${name} source code'" />
		</java>

	</target>-->

	<!-- TODO tempory fix for java 1.5, do not generate index.html -->
	<!-- http://www.java2html.de /dev/lib/j2h.jar -->
	<target name="java2html">
		<taskdef name="j2h" classname="de.java2html.anttasks.Java2HtmlTask" classpath="${base.dir}/dev/lib/j2h.jar" />
		<j2h srcdir="${src.dir}/${proactive.dir}" destdir="${docs.dir}/ProActive_src_html" includes="**/*.java" style="eclipse" showLineNumbers="false" showFileName="true" showTableBorder="false" useshortfilename="true" outputFormat="html" />
	</target>


	<!-- ================================================================ -->
	<!--                     Create javadoc                               -->
	<!-- ================================================================ -->
	<target name="javadoc" description="Use javadoc to build information on the ProActive classes">
		<!-- Create the javadoc directory -->
		<mkdir dir="${docs.dir}/api" />
		<copy todir="${docs.dir}/api">
			<fileset dir="${src.dir}">
				<include name="**/*.jpg" />
			</fileset>
		</copy>
		<mkdir dir="${docs.dir}/ic2d-api" />
		<javadoc  destdir="${docs.dir}/api" verbose="true" author="true" version="true" source="${javac.source}" use="true" windowtitle="ProActive API" breakiterator="yes" additionalparam="-docfilessubdirs -excludedocfilessubdir CVS:test_documentation"> <!-- -docfilessubdirs -excludedocfilessubdir  -->
		    <packageset dir="${src.dir}" defaultexcludes="yes">
      			<include name="org/objectweb/proactive/**"/>
      			<exclude name="org/objectweb/proactive/examples/**"/>
    		</packageset>
			<classpath refid="project.classpath" />
			<link href="http://fractal.objectweb.org/current/doc/javadoc/fractal/" />
			<doctitle><![CDATA[ProActive ${version}<br><a href='../html/index.html'>(documentation is here)</a><br>]]></doctitle>
			<bottom><![CDATA[<i>Copyright $$%%CopyrightYears%%$$ INRIA All Rights Reserved.</i>]]></bottom>
			<group title="ProActive packages for end user" packages="org.objectweb.proactive" />
			<group title="ProActive Core" packages="org.objectweb.proactive.core*" />
			<group title="ProActive Core : Body" packages="org.objectweb.proactive.core.body*" />
			<group title="ProActive Core : Components (implementation of the Fractal model)" packages="org.objectweb.proactive.core.component*" />
			<group title="ProActive P2P : P2P infrastructure" packages="org.objectweb.proactive.p2p*" />
			<group title="ProActive Extensions : Security" packages="org.objectweb.proactive.ext.security*" />
			<group title="ProActive Extensions" packages="org.objectweb.proactive.ext*" />
			<group title="ProActive Branch and Bound API" packages="org.objectweb.proactive.branchnbound*" />
			<group title="ProActive Calcium API" packages="org.objectweb.proactive.calcium*" />
			<group title="ProActive Load Balancing API" packages="org.objectweb.proactive.loadbalancing*" />
			<group title="ProActive MPI API" packages="org.objectweb.proactive.mpi*" />
			<group title="ProActive OSGI API" packages="org.objectweb.proactive.osgi*" />
			<group title="ProActive JMX API" packages="org.objectweb.proactive.jmx*" />
			<group title="ProActive Scheduler API" packages="org.objectweb.proactive.scheduler*" />
			<group title="ProActive Benchmarks API" packages="org.objectweb.proactive.benchmarks*" />
		</javadoc>
		<javadoc packagenames="org.objectweb.proactive.ic2d.*" sourcepath="${src.dir}" destdir="${docs.dir}/ic2d-api" author="true" version="true" use="true" windowtitle="IC2D API"  breakiterator="yes">
			<classpath refid="project.classpath" />
			<doctitle><![CDATA[ProActive ${version} - IC2D]]></doctitle>
			<bottom><![CDATA[<i>Copyright $$%%CopyrightYears%%$$ INRIA All Rights Reserved.</i>]]></bottom>
			<group title="IC2D Application : Interactive Control and Debugging of Distribution" packages="org.objectweb.proactive.ic2d*" />
		</javadoc>

	</target>


	<!-- ================================================================ -->
	<!--           Generate ProActive stubs for all classes               -->
	<!-- ================================================================ -->
	<target name="stubGenerator">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="${proactive.dir}/ext/util/StubGenerator.java" />
		</javac>
	</target>
	
	<target name="stub" depends="stubGenerator, compile">
		<property name="stub.classdir" value="${classes.dir}" />
		<echo message="${stub.classdir}" />
		<path id="classDir">
			<pathelement path="${stub.classdir}" />
		</path>
		<!--     The path to the class dir   -->
		<pathconvert pathsep=" " property="classesDir" refid="classDir" />
		<!--  Select files to rewrite  -->
		<path id="classFiles">
			<fileset dir="${stub.classdir}">
				<include name="**/*.class" />
				<exclude name="**/*$*" />
			</fileset>
		</path>
		<!--  Remove the trailing path from all files -->
		<pathconvert pathsep=" " property="test-files" refid="classFiles">
			<map from="${classesDir}" to="" />
		</pathconvert>
		<java classname="org.objectweb.proactive.ext.util.StubGenerator" fork="true" dir="${stub.classdir}">
			<classpath>
				<pathelement path="${stub.classdir}" />
				<path refid="project.classpath" />
				<pathelement path="${env.CLASSPATH}" />
			</classpath>
			<arg line="-d ${stub.classdir} ${test-files}" />
		</java>
	</target>


	<!-- ================================================================ -->
	<!--            primitive type wrapper stubs generation               -->
	<!-- ================================================================ -->
	<target name="stub_wrapper" depends="stubGenerator">
		<echo message="Java primitive type wrapper stubs generating..." />
		<property name="stub_wrapper.classdir" value="${classes.dir}" />
		<path id="wrapperClassDir">
			<pathelement path="${stub_wrapper.classdir}" />
		</path>
		<pathconvert pathsep=" " property="wrapperClassesDir" refid="wrapperClassDir" />
		<path id="wrapperClasses">
			<fileset dir="${classes.dir}/org/objectweb/proactive/core/util/wrapper">
				<include name="**/*.class" />
				<exclude name="**/*$*" />
			</fileset>
		</path>
		<pathconvert pathsep=" " property="wrapper-files" refid="wrapperClasses">
			<map from="${wrapperClassesDir}" to="" />
		</pathconvert>
		<java classname="org.objectweb.proactive.ext.util.StubGenerator" fork="true">
			<classpath refid="project.classpath" />
			<arg line="-d ${classes.dir}
        ${wrapper-files}" />
		</java>
	</target>


	<!-- ================================================================ -->
	<!--               Ibisc to generate stubs/skels                      -->
	<!-- ================================================================ -->
	<target name="ibis" description="Everything related to ProActive IBIS">
		<delete>
			<fileset dir="${classes.dir}" includes="**/rmi*.java" />
		</delete>
		<java classname="ibis.frontend.rmi.Main" fork="true" dir="${classes.dir}/org/objectweb/proactive/core/body/ibis/">
			<classpath refid="project.classpath" />
			<arg value="org.objectweb.proactive.core.body.ibis.IbisRemoteBodyImpl" />
		</java>
		<java classname="ibis.frontend.rmi.Main" fork="true" dir="${classes.dir}/org/objectweb/proactive/core/runtime/ibis/">
			<classpath refid="project.classpath" />
			<arg value="org.objectweb.proactive.core.runtime.ibis.RemoteProActiveRuntimeImpl" />
		</java>
		<javac srcdir="${classes.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<include name="**/*.java" />
			<classpath refid="project.classpath" />
		</javac>
	</target>


	<!-- ================================================================ -->
	<!--     Call the IOGenerator to speed-up serialization with Ibis     -->
	<!-- ================================================================ -->
	<target name="rewrite" description="Rewrite classes to enhance performance with ibis">
		<mkdir dir="${classlibs.dir}" />
		<!--  copy the proactive classfiles and unjar everything -->
		<copy todir="${classlibs.dir}">
			<fileset dir="${classes.dir}" includes="**/*.class" />
		</copy>
		<unjar dest="${classlibs.dir}">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</unjar>
		<!--  then we call the iogenerator -->
		<java classname="ibis.frontend.io.IOGenerator" taskname="IOGenerator" dir="${classlibs.dir}" failonerror="true" maxmemory="256m" fork="true">
			<arg line="-dir ." />
			<classpath>
				<pathelement path="${classlibs.dir}" />
				<path refid="project.classpath" />
			</classpath>
		</java>
	</target>


	<!-- ================================================================ -->
	<!--            Compile non regression test                            -->
	<!-- ================================================================ -->
	<target name="nonregressiontest" depends="testsuite, compile">
		<copy toDir="${test.classes.dir}">
			<fileset dir="${src.dir}">
				<include name="nonregressiontest/**/*.xml" />
				<include name="nonregressiontest/**/*.fractal" />
				<include name="nonregressiontest/**/*.properties" />
				<include name="nonregressiontest/**/*.xsd" />
			</fileset>
		</copy>
		<javac srcdir="${src.dir}" destdir="${test.classes.dir}" includes="nonregressiontest/**" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
		</javac>
	</target>


	<!-- ================================================================ -->
	<!--       Run non regression test with TestSuite API                  -->
	<!-- ================================================================ -->
	
	<macrodef name="runTestsMacro">
        <attribute name="nodeDescriptor" />
		<element name="jvmargs" optional="yes" />
        <sequential>
        	<delete dir="${base.dir}/compile/log" />
            <java classname="nonregressiontest.MainManager" fork="true">
            	<classpath refid="test.classpath"/>
    			<jvmarg value="-Djava.security.policy=${base.dir}/compile/proactive.java.policy" />
    			<jvmarg value="-Dlog4j.configuration=file:${base.dir}/compile/proactive-log4j" />
            	<jvmarg value="-Xdebug" />
            	<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888"/>
            	<jvmarg value="-Dnonregressiontest.descriptor.defaultnodes.file=@{nodeDescriptor}" />
            	<jvmargs/>
            </java>
        </sequential>
    </macrodef>

	<target name="runTests" depends="nonregressiontest, proActiveJar" description="Run all non regression tests">
		<runTestsMacro nodeDescriptor="/nonregressiontest/descriptor/defaultnodes/Nodes.xml" />
	</target>

	<target name="runTestsLocal" depends="nonregressiontest, proActiveJar" description="Run all non regression tests on the current host only">
		<runTestsMacro nodedescriptor="/nonregressiontest/descriptor/defaultnodes/NodesLocal.xml"/>
	</target>

	<target name="runTestsLocalIbis" depends="nonregressiontest, proActiveJar">
		<runTestsMacro nodedescriptor="/nonregressiontest/descriptor/defaultnodes/NodesLocalIbis.xml">
			<jvmargs>
				<jvmarg value="-Dproactive.rmi=ibis" />
				<jvmarg value="-Dibis.serialization=sun" />
				<jvmarg value="-Dibis.name_server.host=localhost" />
				<jvmarg value="-Dibis.name_server.pool=rutget" />
				<jvmarg value="-Dibis.pool_host_number=1" />
				<jvmarg value="-Dibis.name_server.key=12" />
				<jvmarg value="-Dibis.property.file=/home1/fabrice/workIbis/Ibis/properties" />
			</jvmargs>
		</runTestsMacro>
	</target>

	<!-- ================================================================ -->
	<!--                         Compile mpi                              -->
	<!-- ================================================================ -->

	<target name="mpi" depends="core" description="Compile mpi classes for wrapping with control">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" includes="${proactive.dir}/mpi/**/*.java" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
		</javac>
		
		<if>
			<bool>
				<and>
					<os family="Unix"/>
					<available file="mpicc" filepath="/bin:/usr/bin:/usr/local/bin"/>
				</and>
			</bool>
			
			
			<!-- Delete existing header file to avoid conflict -->
			<delete>
				<fileset dir="${src.dir}/org/objectweb/proactive/mpi/control">
					<include name="org_objectweb_proactive_mpi_control_ProActiveMPIComm.h"/>
					<include name="org_objectweb_proactive_mpi_control_ProActiveMPIComm_MessageRecvHandler.h"/>
				</fileset>
			</delete>
	
			<!-- Generate header file (based on classpath) -->
			<javah 
				classpath="${classes.dir}" 
				force="yes" 
				class="org.objectweb.proactive.mpi.control.ProActiveMPIComm" 
				destdir="${src.dir}/org/objectweb/proactive/mpi/control/" />

			<!-- Generate library -->
			<exec dir="${classes.dir}" executable="mpicc" os="Linux">
				<arg line=" -I${java.home}/../include -I${java.home}/../include/linux ${src.dir}/org/objectweb/proactive/mpi/control/ProActiveMPIComm.c -o ${classes.dir}/${proactive.dir}/mpi/control/libProActiveMPIComm.so -shared" />
			</exec>
						
			<!-- Delete object file generated in classes repository -->
			<delete>
				<fileset dir="${classes.dir}">
				    <include name="ProActiveMPIComm.o"/>
				</fileset>
			</delete>

			<!-- Delete existing header file to avoid conflict -->
			<delete>
				<fileset dir="${src.dir}/org/objectweb/proactive/mpi/control">
					<include name="org_objectweb_proactive_mpi_control_ProActiveMPIComm.h"/>
					<include name="org_objectweb_proactive_mpi_control_ProActiveMPIComm_MessageRecvHandler.h"/>
				</fileset>
			</delete>

			<!-- execute configure to generate Makefiles -->
			<exec dir="${src.dir}/org/objectweb/proactive/mpi/control/config" executable="sh" os="Linux">
				<arg line="configure.sh " />
			</exec>

			<else>			
				<echo>Wrapping with control is only available for Unix and mpicc must be installed</echo>
			</else>
		</if>
		
	</target>

	<!-- ================================================================ -->
	<!--   Tests coverage : need clover license in user.home directory    -->
	<!-- ================================================================ -->
	<!-- Commented for the release
    <property name="coverage.dir" value="${base.dir}/compile/coverage"/>
    
    <path id="coverage.classpath">
    <path refid="test.classpath"/>
    <pathelement location="${base.dir}/dev/lib/clover.jar"/>
    <pathelement location="${base.dir}/dev/lib/cenquatasks.jar"/>
    </path>
    
    <taskdef resource="com/cenqua/ant/antlib.xml" classpath="${base.dir}/dev/lib/cenquatasks.jar"/>
    <extendclasspath path="${base.dir}/dev/lib/clover.jar"/>
    <taskdef resource="clovertasks" classpath="${base.dir}/dev/lib/clover.jar"/>
    
    <target name="coverage-init">
    <delete file="coverage*.*"/>
    <copy file="${user.home}/clover.license" todir="${base.dir}/dev/lib"/>
    <clover-setup initString="coverage.db">
    <files>
    <exclude name="org/objectweb/proactive/ic2d/**/*.java"/>
    <exclude name="org/objectweb/proactive/examples/**/*.java"/>
    <exclude name="org/objectweb/proactive/ext/**/*.java"/>
    <exclude name="nonregressiontest/**/*.java"/>
    <exclude name="testsuite/**/*.java"/>
    </files>
    </clover-setup>
    </target>
    
    <target name="testsCoverage" depends="coverage-init, compile, proActiveJar, testsuite, nonregressiontest">
    <delete file="${base.dir}/compile/tests.log"/> -->
	<!-- classloader test needs clover tasks as specified in deployment-coverage.xml file -->
	<!-- 
    <move file="${classes.dir}/nonregressiontest/runtime/classloader/deployment-coverage.xml" tofile="${classes.dir}/nonregressiontest/runtime/classloader/deployment.xml"/>
    <java classname="nonregressiontest.MainManager" fork="true">
    <classpath refid="coverage.classpath"/>
    <jvmarg value="-Djava.security.policy=${base.dir}/compile/proactive.java.policy"/>
    <jvmarg value="-Dlog4j.configuration=file:${base.dir}/compile/proactive-log4j"/>
    <jvmarg value="-Dnonregressiontest.descriptor.defaultnodes.file=/nonregressiontest/descriptor/defaultnodes/NodesLocal.xml"/>
    </java>
    <clover-report>
    <current outfile="clover_html">
    <format type="html"/>
    </current>
    </clover-report>
    </target> -->


	<!-- ==================================================================== -->
	<!--      The following docbook* are sub-tasks to build the Manual        -->
	<!-- ==================================================================== -->
	<xmlcatalog id="docbookcatalog">
		<!-- If a needed file doesn't exist, it will be fetched on the web -->

		<classpath>
			<!-- Here are some possible paths for the xsl stylesheets, which are contained in docbook-xsl-1.69.1.tar.gz-->
			<pathelement location="/usr/local/docbook-xsl-1.69.1" />
			<pathelement location="${base.dir}/dev/lib/docbook/docbook-xsl-1.69.1.zip" />
		</classpath>

		<dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN" location="dtd-4.2/docbookx.dtd" />
		<dtd publicId="http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" location="dtd-4.2/docbookx.dtd" />

		<entity publicid="http://docbook.sourceforge.net/release/xsl/1.69.1/profiling/profile.xsl" location="profiling/profile.xsl" />
		<entity publicid="http://docbook.sourceforge.net/release/xsl/1.69.1/html/chunk.xsl" location="html/chunk.xsl" />
		<entity publicid="http://docbook.sourceforge.net/release/xsl/1.69.1/html/docbook.xsl" location="html/docbook.xsl" />
		<entity publicid="http://docbook.sourceforge.net/release/xsl/1.69.1/fo/docbook.xsl" location="fo/docbook.xsl" />
	</xmlcatalog>


	<!-- ==================================================================== -->
	<!--      Converts docbook xml into ??? - uses the trax processor         -->
	<!-- ==================================================================== -->
	<target name="docbookTransform"	>
		<!-- Profiling step: keep only the tags which have the attribute os="${docbook.profile}" or no os attribute -->
		<xslt basedir="${doc.src}" processor="trax" in="${docs.tmp.dir}/${docbookInputFile}" out="${docs.tmp.dir}/profiled.xml" style="${doc.src}/xsl/profiling.xsl" force="yes">
			<param name="profile.os" expression="${docbook.profile}" />
			<!--docbook.profile can be html, pdf or empty-->
			<xmlcatalog refid="docbookcatalog" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${base.dir}/dev/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</xslt>

		<!-- Do the real conversion, docbook to pdf or html -->
		<xslt basedir="${doc.src}" processor="trax" in="${docs.tmp.dir}/profiled.xml" out="${docbookOutputFile}" style="${docbookStyle}" force="yes">
			<xmlcatalog refid="docbookcatalog" />
			<param name="TODAY" expression="${TODAY}" />
			<!-- the date for the first page -->
			<param name="VERSION" expression="${version}" />
			<!-- the version number, for the first page -->
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${base.dir}/dev/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</xslt>
	</target>


	<!-- ==================================================================== -->
	<!--          Generic task to transform docbook xml into pdf              -->
	<!-- ==================================================================== -->
	<target name="docbookToPdf">
		<property name="fo.output" value="${pdfOutputFile}.fo" />

		<!--   First translate into intermediate fo format -->
		<antcall target="docbookTransform">
			<param name="docbookOutputFile" value="${fo.output}" />
			<param name="docbookStyle" value="${doc.src}/xsl/pdf.xsl" />
			<param name="docbook.profile" value="pdf" />
		</antcall>

		<!-- declare how to transform fo xml file in pdf through a new 'fop' task -->
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" description="Official way to translate .fo (result of xml docbook translation) into .pdf">
			<classpath>
				<pathelement location="${base.dir}/dev/lib/docbook/fop.jar" />
				<pathelement location="${base.dir}/dev/lib/docbook/jimi.zip" />
				<pathelement location="${base.dir}/dev/lib/docbook/avalon.jar" />
				<pathelement location="${base.dir}/dev/lib/docbook/batik.jar" />
				<pathelement location="${lib.dir}/ws/commons-logging.jar" />
			</classpath>
		</taskdef>

		<!-- Then use the newly defined fop task to translate fo into pdf -->
		<fop format="application/pdf" fofile="${fo.output}" outfile="${pdfOutputFile}" basedir="${doc.src}" />

		<delete file="${fo.output}" />
	</target>


	<!-- ==================================================================== -->
	<!--    Add some highlighting information to the docbook source code      -->
	<!-- ==================================================================== -->
	<target name="docbookBeautify">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}" deprecation="on" source="${javac.source}" debug="${javac.debug}">
			<classpath refid="project.classpath" />
			<include name="util/*.java" />
		</javac>

		<java classname="util.DocBookize" fork="true">
			<classpath refid="project.classpath" />
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
			<!-- The xml file to parse -->
			<arg value="ProActive_src_html/${proactive.dir}/" />
			<!-- The path to find java files in html -->
			<arg value="${src.dir}/${proactive.dir}/" />
			<!-- the path for java file inclusion -->
			<arg value="${base.dir}/descriptors/" />
			<!-- the path for xml file inclusion -->
		</java>

		<java classname="util.Validate" fork="true">
			<classpath refid="project.classpath" />
			<classpath>
				<fileset dir="${base.dir}/dev/lib/docbook/">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg value="${docs.tmp.dir}/${docbookInputFile}" />
		</java>

	</target>


	<!-- ==================================================================== -->
	<!-- preprocessing for the manual: copy files and add tags to source code -->
	<!-- ==================================================================== -->
	<target name="docbookPreProcess">

		<!-- as this file gets edited, make sure it's a fresh copy-->
		<delete file="${docs.tmp.dir}/${docs.mainFile}" />

		<!-- Copy the files needed for the html files (pics and maybe others) -->
		<copy toDir="${docs.dir}/html/">
			<fileset dir="${doc.src}">
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="ProActive.css" />
			</fileset>
		</copy>

		<!-- Copying xml files so they can be edited (beautify programlistings) -->
		<copy toDir="${docs.tmp.dir}" includeemptydirs="no">
			<fileset dir="${doc.src}">
				<include name="**/*" />
				<exclude name="**/.svn" />
				<exclude name="xsl" />
			</fileset>
		</copy>

		<!-- Decorate the code a bit (code examples in programlistings) -->
		<antcall target="docbookBeautify">
			<param name="docbookInputFile" value="${docs.mainFile}" />
		</antcall>

	</target>


	<!-- ==================================================================== -->
	<!--          Make just the html files for the manual                     -->
	<!-- ==================================================================== -->
	<target name="manualHtml" description="Make only the html files in the manual" depends="docbookPreProcess">
		<antcall target="docbookTransform">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="docbookOutputFile" value="${docs.dir}/html/index.html" />
			<param name="docbookStyle" value="${doc.src}/xsl/chunkedhtml.xsl" />
			<param name="docbook.profile" value="html" />
		</antcall>
	</target>


	<!-- ==================================================================== -->
	<!--               Make just the pdf files for the manual                 -->
	<!-- ==================================================================== -->
	<target name="manualPdf" description="Make only the pdf files in the manual" depends="docbookPreProcess">
		<antcall target="docbookToPdf">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="pdfOutputFile" value="${docs.dir}/pdf/ProActiveManual.pdf" />
		</antcall>
	</target>


	<!-- ==================================================================== -->
	<!--           Make only one huge html-file from the doc                  -->
	<!-- ==================================================================== -->
	<target name="manualSingleHtml" depends="docbookPreProcess">
		<antcall target="docbookTransform">
			<param name="docbookInputFile" value="${docs.mainFile}" />
			<param name="docbookOutputFile" value="${docs.dir}/html/ProActiveManual.html" />
			<param name="docbookStyle" value="${doc.src}/xsl/onehtml.xsl" />
			<param name="docbook.profile" value="html" />
		</antcall>
	</target>


	<!-- ==================================================================== -->
	<!-- Construct the manual from the XML files in {docs.src}                -->
	<!-- ==================================================================== -->
	<target name="manual" description="Build all the different manual version: html, pdf... " depends="manualSingleHtml,manualHtml,manualPdf">
		<!-- The generation of the files is done by the depends clause -->
		<!-- Once the doc files have been generated, do some cleaning up -->
		<delete dir="${docs.tmp.dir}" />
		<copy todir="${docs.dir}/examples">
			<!-- XML descriptor examples also available -->
			<fileset dir="${base.dir}/descriptors/examples" />
		</copy>
	</target>
	
	<target name="jdepend"  depends="compile" description="JDepend report">
		 <macrodef name="jdependMacro">
	        <attribute name="outputfile" />
	    	<attribute name="classesdir" />
	        <sequential>
				<jdepend format="xml" outputfile="${base.dir}/@{outputfile}.xml">	
	        		<classespath>
	        			<pathelement location="@{classesdir}" />
	        		</classespath>
	        	</jdepend>
				<xslt includes="@{outputfile}.xml" basedir="${base.dir}" destdir="${base.dir}" style="jdepend.xsl" />
	        	<delete>
	        		<fileset dir="${base.dir}">
	        		    <include name="@{outputfile}.xml"/>
	        		</fileset>
	        	</delete>
	        	<echo> --> JDepend report available: ${base.dir}/@{outputfile}.html</echo>
	        </sequential>
	    </macrodef>
		
		<jdependMacro outputfile="jdepend_core" classesdir="${classes.dir}/${proactive.core.dir}" />
		<jdependMacro outputfile="jdepend_all"  classesdir="${classes.dir}/${proactive.dir}"/>
	</target>
	
	
	<!-- ==================================================================== -->
	<!-- Compile native MicroTimer                                                    -->
	<!-- ==================================================================== -->
	<target name="microTimer">
		<exec dir="${src.dir}/org/objectweb/proactive/core/util/timer" executable="g++" os="Linux">
			<arg line=" -shared -o libMicroTimer.so  MicroTimer.cc" />
		</exec>
		<copy file="${src.dir}/org/objectweb/proactive/core/util/timer/libMicroTimer.so" todir="${lib.dir}" />
	</target>
	
</project>
