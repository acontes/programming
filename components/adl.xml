<?xml version="1.0" encoding="UTF-8"?>
<chapter><title>Architecture Description Language</title>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/doc-files/components/adl.html  -->
  
    <para> <anchor id="dbdoclet.id.adl_html_adl"/></para>
    <para>The Architecture Description Language (ADL) is used to configure and deploy
 component systems. The architecture of the system is described in a normalized XML file.</para>
    <para><emphasis role="bold">The ADL has been updated</emphasis> and is now an extension of the standard Fractal ADL, allowing
 to reuse ProActive-specific features such as distributed deployment using deployment
 descriptors.</para>
    <para>The distributed deployment facilities offered by ProActive are reused, and the notion of
 virtual node is integrated in the component ADL. For this reason, the components ADL has to be
 associated with a deployment descriptor (this is done at parsing time : both files are given to
 the parser).</para>
    <para>One should refer to the <ulink url="http://fractal.objectweb.org/tutorials/adl/index.xml">Fractal ADL tutorial</ulink> for more
 detailed information about the ADL. Here is a short overview, and a presentation of some added
 features.</para>
    <para>Note that because this ADL is based on the Fractal ADL, it requires the following libraries
 (included in the /lib directory of the ProActive distribution) : fractal-adl.jar, dtdparser.jar,
 ow_deployment_scheduling.jar</para>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.adl_html_Overview"/>Overview</title>
      <para>Components are defined in <emphasis role="bold">definition</emphasis> files, which are .fractal files. The syntax of the
 document is validated against a DTD retreived from the classpath</para>
      <screen>
classpath://org/objectweb/proactive/core/component/adl/xml/proactive.dtd
      </screen>
      <para>The <emphasis role="bold">definition</emphasis> element has a name (which must be the same name that the file&#39;s) and
 inheritance is supported through the attribute &quot;extends&quot; :</para>
      <screen>
definition name=&quot;org.objectweb.proactive.examples.components.helloworld.hell\
oworld-distributed-wrappers&quot;
      </screen>
      <para>The exportedVirtualNodes elements is described later in this section</para>
      <para>Components can be specified and created in this definition, and these components can
 themselves be defined in other definition files :</para>
      <screen>
component name=&quot;client-wrapper&quot; definition=&quot;org.objectweb.proactive.examples.c\
omponents.helloworld.ClientType&quot;
      </screen>
      <para>Nesting is allowed for composite components and is done by adding other &quot;component&quot;
 elements.</para>
      <para>The <emphasis role="bold">binding</emphasis> element specifies bindings between interfaces of components &quot;, and
 specifying &quot;this&quot; as the name of the component refers to the current enclosing
 component.</para>
      <screen>
binding client=&quot;this.r&quot; server=&quot;client.r&quot;/
      </screen>
      <para>The <emphasis role="bold">controller</emphasis> elements can have the following &quot;desc&quot; values :
 &quot;composite&quot;, &quot;parallel&quot; or &quot;primitive&quot;. A parallel component and
 the components it contains should be type-compatible</para>
      <para>Primitive components specify the <emphasis role="bold">content</emphasis> element, which indicates the implementation
 class containing the business logic for this component :</para>
      <screen>
content class=&quot;org.objectweb.proactive.examples.components.helloworld.Client\
Impl&quot;
      </screen>
      <para>The <emphasis role="bold">virtual-node</emphasis> element offers distributed deployment information. It can be exported
 and composed in the exportedVirtualNodes element.</para>
      <para>
 The component will be instantiated on the virtual node it specified (or the one that it
 exported). For a composite or a parallel component, it means it will be instantiated on the
 (first if there are several nodes mapped) node of the virtual node. For a primitive component, if
 the virtual node defines several nodes (cardinality=&quot;multiple&quot;), there will be as many
 instances of the primitive component as there are underlying nodes. Each of these instances will
 have a suffixed name looking like : &quot;primiveComponentName-cyclicInstanceNumber-n&quot;,
 where primitiveComponentName is the name defined in the ADL. This automatic replication is used
 in the parallel components.</para>
      <screen>
virtual-node name=&quot;client-node&quot; cardinality=&quot;single&quot;
      </screen>
      <para>The syntax is similar to the standard Fractal ADL, and the parsing engine has been extended.
 Features specific to ProActive are :</para>
      <itemizedlist>
        <listitem>
          <para> Virtual nodes have a cardinality property : either &quot;single&quot; or
 &quot;multiple&quot;. When &quot;single&quot;, it means the virtual node in the deployment
 descriptor should contain 1 node ; when &quot;multiple&quot;, it means the virtual node in the
 deployment descriptor should contain more than 1 node.</para>
        </listitem>
        <listitem>
          <para> Virtual nodes can be <emphasis role="bold">exported</emphasis> and <emphasis role="bold">composed</emphasis>.</para>
        </listitem>
        <listitem>
          <para> Template components are not handled.</para>
        </listitem>
        <listitem>
          <para> The controller description includes &quot;parallel&quot; as a valid attribute.</para>
        </listitem>
        <listitem>
          <para> The validating DTD has to be specified as :
 classpath://org/objectweb/proactive/core/component/adl/xml/proactive.dtd</para>
        </listitem>
</itemizedlist>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.adl_html_Example"/>Example</title>
      <para>The easiest way to understand the ADL is to see <ulink url="helloworld-distributed.xml">an example</ulink>. It corresponds to the helloworld
 example described later in this document.</para>
      <para><anchor id="dbdoclet.id.adl_html_composition_of_virtual_nodes"/></para>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.adl_html_Exportation_and_composition_of_virtual_nodes"/>Exportation and composition of virtual
 nodes</title>
      <para>Components are deployed on the virtual node that is specified in their definition ; it has to
 appear in the deployment descriptor <emphasis role="underline">unless</emphasis> this virtual node is exported. In this case,
 the name of the exported virtual node should appear in the deployment descriptor, unless this
 exported virtual node is itself exported.</para>
      <para>When exported, a virtual node can take part in the composition of other exported virtual
 nodes. The idea is to further extend reusability of existing (and packaged, packaging being a
 forthcoming feature of Fractal) components.</para>
      <para>In the example, the component defined in helloworld-distributed-wrappers.fractal exports the
 virtual nodes VN1 and VN2:</para>
      <screen>
exportedVirtualNodes
 exportedVirtualNode name=&quot;VN1&quot;
  composedFrom
   composingVirtualNode component=&quot;client&quot; name=&quot;client-node&quot;
  /composedFrom
 /exportedVirtualNode
 exportedVirtualNode name=&quot;VN2&quot;
  composedFrom
   composingVirtualNode component=&quot;server&quot; name=&quot;server-node&quot;/
  /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes
      </screen>
      <para>VN1 is composed of the exported virtual node &quot;client-node&quot; from the component named
 client</para>
      <para>In the definition of the client component (ClientImpl.fractal), we can see that client-node is
 an exportation of a virtual node which is also name &quot;client-node&quot; :</para>
      <screen>
exportedVirtualNodes
 exportedVirtualNode name=&quot;client-node&quot;
   composedFrom
     composingVirtualNode component=&quot;this&quot; name=&quot;client-node&quot;/
   /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes
...
virtual-node name=&quot;client-node&quot; cardinality=&quot;single&quot;/
      </screen>
      <para>Although this is a simplistic example, one should foresee a situation where ClientImpl would
 be a prepackaged component, where its ADL could not be modified ; the exportation and composition
 of virtual nodes allow to adapt the deployment of the system depending on the existing
 infrastructure. Colocation can be specified in the enclosing component definition
 (helloworld-distributed-wrappers.fractal) :</para>
      <screen>
exportedVirtualNodes
 exportedVirtualNode name=&quot;VN1&quot;
  composedFrom
   composingVirtualNode component=&quot;client&quot; name=&quot;client-node&quot;
   composingVirtualNode component=&quot;server&quot; name=&quot;server-node&quot;/
  /composedFrom
 /exportedVirtualNode
/exportedVirtualNodes
      </screen>
      <para>As a result, the client and server component will be colocated / deployed on the same virtual
 node. This can be profitable if there is a lot of communications between these two
 components.</para>
      <para>When specifying &quot;null&quot; as the name of an exported virtual node, the components will
 be deployed on the current virtual machine. This can be useful for debugging purposes.</para>
    </sect1>
    <sect1 remap="h2">
      <title><anchor id="dbdoclet.id.adl_html_usage" xreflabel="Usage"/>Usage</title>
      <para>The launcher, which parses the ADL, creates a corresponding component factory, and
 instantiates and assembles the components as defined in the ADL, is started from the <literal>org.objectweb.proactive.core.component.adl.Launcher</literal> class :</para>
      <screen>
Launcher [-java|-fractal] &lt;definition&gt; [ &lt;itf&gt; ] [deployment-descriptor]) 
      </screen>
      <para>where [-java|-fractal] comes from the Fractal ADL Launcher (put -fractal for ProActive
 components, this will be made optional for ProActive components in the next release),
 &lt;definition&gt; is the name of the component to be instantiated and started, &lt;itf&gt; is
 the name of its Runnable interface, if it has one, and &lt;deployment-descriptor&gt; the location
 of the ProActive deployment descriptor to use. It is also possible to use this class directly
 from its static main method.</para>
    </sect1>
  
</chapter>
