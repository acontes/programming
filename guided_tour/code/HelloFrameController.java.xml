<?xml version="1.0" encoding="UTF-8"?>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/guided_tour/hands_on_programming/code/HelloFrameController.java.html  -->
  
    <para>
      <screen>
<emphasis role="bold">package org.objectweb.proactive.examples.hello;</emphasis>
      </screen>
      <screen>
<emphasis role="bold">import org.objectweb.proactive.ActiveObjectCreationException;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.Body;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.ProActive;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.core.body.migration.Migratable;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.core.node.NodeException;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.ext.migration.MigrationStrategyManager;</emphasis>
<emphasis role="bold">import org.objectweb.proactive.ext.migration.MigrationStrategyManagerImpl;</emphasis>
<emphasis>/**
 *
 * This class allows the &quot;migration&quot; of a graphical interface. A gui object is attached
 * to the current class, and the gui is removed before migration, thanks to the use
 * of a MigrationStrategyManager
 */</emphasis>
<emphasis role="bold">public</emphasis> 
<emphasis role="bold">class</emphasis> 
HelloFrameController
 
<emphasis role="bold">extends</emphasis> 
MigratableHello
 
<emphasis role="bold">{</emphasis>
        
HelloFrame
 
helloFrame
;
        
MigrationStrategyManager
 
migrationStrategyManager
;
        
<emphasis>/**required empty constructor */</emphasis>
        
<emphasis role="bold">public</emphasis> 
HelloFrameController
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
        
<emphasis role="bold">}</emphasis>
        
<emphasis>/**constructor */</emphasis>
        
<emphasis role="bold">public</emphasis> 
HelloFrameController
<emphasis role="bold">(</emphasis>String
 
name
<emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                
<emphasis role="bold">super</emphasis><emphasis role="bold">(</emphasis>name
<emphasis role="bold">)</emphasis>;
        
<emphasis role="bold">}</emphasis>
        
<emphasis>/**
         * This method attaches a migration strategy manager to the current active object.
         * The migration strategy manager will help to define which actions to take before
         * and after migrating
         */</emphasis>
        
<emphasis role="bold">public</emphasis> 
<emphasis role="bold">void</emphasis> 
initActivity
<emphasis role="bold">(</emphasis>Body
 
body
<emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                
// add a migration strategy manager on the current active object
                
migrationStrategyManager
 
=
 
<emphasis role="bold">new</emphasis> 
MigrationStrategyManagerImpl
<emphasis role="bold">(</emphasis><emphasis role="bold">(</emphasis>Migratable
<emphasis role="bold">)</emphasis> 
ProActive
.
getBodyOnThis
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis><emphasis role="bold">)</emphasis>;
                
// specify what to do when the active object is about to migrate
                
// the specified method is then invoked by reflection
                
migrationStrategyManager
.
onDeparture
<emphasis role="bold">(</emphasis>&quot;clean&quot;
<emphasis role="bold">)</emphasis>;
        
<emphasis role="bold">}</emphasis>
        
<emphasis>/** factory for locally creating the active object
        * @param name the name of the agent
        * @return an instance of a ProActive active object of type HelloFrameController
        *
        */</emphasis>
        
<emphasis role="bold">public</emphasis> 
<emphasis role="bold">static</emphasis> 
HelloFrameController
 
createHelloFrameController
<emphasis role="bold">(</emphasis>String
 
name
<emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                
<emphasis role="bold">try</emphasis> 
<emphasis role="bold">{</emphasis>
                        
// creates (and initialize) the active object
                        
HelloFrameController
 
obj
 
=
                                
<emphasis role="bold">(</emphasis>HelloFrameController
<emphasis role="bold">)</emphasis> 
ProActive
.
newActive
<emphasis role="bold">(</emphasis>HelloFrameController
.
<emphasis role="bold">class</emphasis>.
getName
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>, 
<emphasis role="bold">new</emphasis> 
Object
<emphasis role="bold">[</emphasis><emphasis role="bold">]</emphasis> 
<emphasis role="bold">{</emphasis> 
name
 
<emphasis role="bold">}</emphasis><emphasis role="bold">)</emphasis>;
                        
<emphasis role="bold">return</emphasis> 
obj
;
                
<emphasis role="bold">}</emphasis> 
<emphasis role="bold">catch</emphasis> 
<emphasis role="bold">(</emphasis>ActiveObjectCreationException
 
aoce
<emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                        
System
.
out
.
println
<emphasis role="bold">(</emphasis>&quot;creation of the active object failed&quot;
<emphasis role="bold">)</emphasis>;
                        
aoce
.
printStackTrace
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>;
                        
<emphasis role="bold">return</emphasis> 
<emphasis role="bold">null</emphasis>;
                
<emphasis role="bold">}</emphasis> 
<emphasis role="bold">catch</emphasis> 
<emphasis role="bold">(</emphasis>NodeException
 
ne
<emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                        
System
.
out
.
println
<emphasis role="bold">(</emphasis>&quot;creation of default node failed&quot;
<emphasis role="bold">)</emphasis>;
                        
ne
.
printStackTrace
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>;
                        
<emphasis role="bold">return</emphasis> 
<emphasis role="bold">null</emphasis>;
                
<emphasis role="bold">}</emphasis>
        
<emphasis role="bold">}</emphasis>
        
<emphasis role="bold">public</emphasis> 
String
 
sayHello
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                
<emphasis role="bold">if</emphasis> 
<emphasis role="bold">(</emphasis>helloFrame
 
=
=
 
<emphasis role="bold">null</emphasis><emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                        
helloFrame
 
=
 
<emphasis role="bold">new</emphasis> 
HelloFrame
<emphasis role="bold">(</emphasis>&quot;Hello from &quot;
 
+
 
ProActive
.
getBodyOnThis
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>.
getNodeURL
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis><emphasis role="bold">)</emphasis>;
                        
helloFrame
.
show
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>;
                
<emphasis role="bold">}</emphasis>
                
<emphasis role="bold">return</emphasis> 
&quot;Hello from &quot;
 
+
 
ProActive
.
getBodyOnThis
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>.
getNodeURL
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>;
        
<emphasis role="bold">}</emphasis>
        
<emphasis role="bold">public</emphasis> 
<emphasis role="bold">void</emphasis> 
clean
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis> 
<emphasis role="bold">{</emphasis>
                
System
.
out
.
println
<emphasis role="bold">(</emphasis>&quot;killing frame&quot;
<emphasis role="bold">)</emphasis>;
                
helloFrame
.
dispose
<emphasis role="bold">(</emphasis><emphasis role="bold">)</emphasis>;
                
helloFrame
 
=
 
<emphasis role="bold">null</emphasis>;
                
System
.
out
.
println
<emphasis role="bold">(</emphasis>&quot;frame is killed&quot;
<emphasis role="bold">)</emphasis>;
        
<emphasis role="bold">}</emphasis>
<emphasis role="bold">}</emphasis>
      </screen>
      <screen>
      </screen>
      <screen>
      </screen>
</para>
  
</chapter>
