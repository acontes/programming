package com.amazonaws.ec2.model;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="KeyName" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Thu Aug 28 20:50:29 PDT 2008
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "keyName" })
@XmlRootElement(name = "DescribeKeyPairsRequest")
public class DescribeKeyPairsRequest {

    @XmlElement(name = "KeyName")
    protected List<String> keyName;

    /**
     * Default constructor
     * 
     */
    public DescribeKeyPairsRequest() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public DescribeKeyPairsRequest(final List<String> keyName) {
        this.keyName = keyName;
    }

    /**
     * Gets the value of the keyName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the keyName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getKeyName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getKeyName() {
        if (keyName == null) {
            keyName = new ArrayList<String>();
        }
        return this.keyName;
    }

    public boolean isSetKeyName() {
        return ((this.keyName != null) && (!this.keyName.isEmpty()));
    }

    public void unsetKeyName() {
        this.keyName = null;
    }

    /**
     * Sets the value of the KeyName property.
     * 
     * @param values
     * @return
     *     this instance
     */
    public DescribeKeyPairsRequest withKeyName(String... values) {
        for (String value : values) {
            getKeyName().add(value);
        }
        return this;
    }

    /**
     * Sets the value of the keyName property.
     * 
     * @param keyName
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setKeyName(List<String> keyName) {
        this.keyName = keyName;
    }

    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetKeyName()) {
            if (!first)
                json.append(", ");
            json.append("\"KeyName\" : [");
            java.util.List<String> keyNameList = getKeyName();
            for (String keyName : keyNameList) {
                if (keyNameList.indexOf(keyName) > 0)
                    json.append(", ");
                json.append(quoteJSON(keyName));
            }
            json.append("]");
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
                case '"':
                    sb.append("\\\"");
                    break;
                case '\\':
                    sb.append("\\\\");
                    break;
                case '/':
                    sb.append("\\/");
                    break;
                case '\b':
                    sb.append("\\b");
                    break;
                case '\f':
                    sb.append("\\f");
                    break;
                case '\n':
                    sb.append("\\n");
                    break;
                case '\r':
                    sb.append("\\r");
                    break;
                case '\t':
                    sb.append("\\t");
                    break;
                default:
                    if (c < ' ') {
                        sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                    } else {
                        sb.append(c);
                    }
            }
        }
        sb.append("\"");
        return sb.toString();
    }

}
