/*
 * ################################################################
 *
 * ProActive: The Java(TM) library for Parallel, Distributed,
 *            Concurrent computing with Security and Mobility
 *
 * Copyright (C) 1997-2005 INRIA/University of Nice-Sophia Antipolis
 * Contact: proactive@objectweb.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 *  Initial developer(s):               The ProActive Team
 *                        http://www.inria.fr/oasis/ProActive/contacts.html
 *  Contributor(s):
 *
 * ################################################################
 */
package org.objectweb.proactive.examples.c3d.gui;

import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import org.objectweb.proactive.examples.c3d.DispatcherLogic;


/**
 * Implementation of the DispatcherGUI class, extending by handling events.
 * Also adds the window closing contraption.
 */
public class DispatcherGUIImpl extends DispatcherGUI {

    /** The real logic-centric dispatcher Active Object */
    private DispatcherLogic c3dDispatcher;

    /** Creates a working GUI for C3D Dispatchers. See how we use a DispatcherLogic class?
     * This is made to avoid using the rendering capabilities of a C3DDispatcher, which
     * the GUI classes are not allowed to use! */
    public DispatcherGUIImpl(String title, final DispatcherLogic c3dDispatcher) {
        super(title);
        this.c3dDispatcher = c3dDispatcher;
        mainFrame.addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    c3dDispatcher.exit();
                    trash();
                }
            });
    }

    /** handles all events generated by DispatcherGUI */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source == clearLogMenuItem) {
            logArea.setText("");
        } else if (source == benchmarkMenuItem) {
            if (benchmarkMenuItem.getText().equals("Stop benchmark")) {
                benchmarkMenuItem.setText("Benchmark");
                c3dDispatcher.doBenchmarks(); // this call says "Stop the benchmark, 
                // it is read by the doBenchmark method which checks the request queue for this... 
            } else {
                benchmarkMenuItem.setText("Stop benchmark");
                c3dDispatcher.doBenchmarks();
            }
        } else if (source == exitMenuItem) {
            c3dDispatcher.exit();
            trash();
        } else if (source == addEngineButton) {
            Object[] sel = availableEngineList.getSelectedValues();
            for (int i = 0; i < sel.length; i++) {
                addUsedEngine((String) sel[i]);
                c3dDispatcher.turnOnEngine((String) sel[i]);
            }
        } else if (source == removeEngineButton) {
            Object[] sel = usedEngineList.getSelectedValues();
            for (int i = 0; i < sel.length; i++) {
                addAvailableEngine((String) sel[i]);
                c3dDispatcher.turnOffEngine((String) sel[i]);
            }
        }
    }
}
