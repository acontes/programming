<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="capabilities-intro">
  <title>Introduction to some of the functionalities of ProActive</title>

  <!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/guided_tour/capabilities-intro.html  -->

  <para>This chapter will present some of the facilities offered by ProActive,
  namely:</para>

  <itemizedlist>
    <listitem>
      <para>parallel processing: how you can run several tasks in
      parallel.</para>
    </listitem>

    <listitem>
      <para>synchronization: how you can synchronize tasks.</para>
    </listitem>

    <listitem>
      <para>migration: how you can migrate Active Objects.</para>
    </listitem>
  </itemizedlist>

  <sect1 >
    <title>Parallel processing and collaborative application with
    ProActive</title>

    <para>Distribution is often used for CPU-intensive applications, where
    parallelism is a key for performance.</para>

    <para>A typical application is C3D.</para>

    <para>Note that parallelisation of programs can be facilitated with
     ProActive, thanks to asynchronous method calls (see <xref linkend="FutureObjectCreation"/>), 
     as well as group communications (see <xref linkend="TypedGroupCommunication"/>).</para>
  </sect1>

  <sect1  id="C3D_example">
    <title>C3D: a parallel, distributed and collaborative 3D renderer</title>

    <para><ulink
    url="http://www-sop.inria.fr/oasis/ProActive/apps/c3d.html">C3D</ulink> is
    a Java benchmark application that measures the performance of a 3D
    raytracer renderer distributed over several Java virtual machines using
    Java RMI. It showcases some of the benefits of ProActive, notably the ease
    of distributed programming, and the speedup through parallel
    calculation.</para>

    <para>Several users can collaboratively view and manipulate a 3D scene.
    The image of the scene is calculated by a dynamic set of rendering engines
    using a raytracing algorithm, everything being controlled by a central
    dispatcher.</para>

    <figure>
      <title>the active objects in the c3d application</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="guided_tour/pics/hello/c3d.png" format="PNG"
                     contentwidth="100" width="6in" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect2 >
      <title>start C3D</title>

      <para>using the script c3d_no_user</para>

      <para>A 'Dispatcher' object is launched (ie a centralized server) as
      well as 4 'Renderer' objects, that are active objects to be used for
      parallel rendering.</para>

      <para><figure>
          <title>the 4 renderers are launched</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_renderers_consoles.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para><figure>
          <title>the dispatcher GUI is launched</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_dispatcher_app.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The bottom part of the window allows the addition and removal of
      renderers.</para>
    </sect2>

    <sect2 >
      <title>start a user</title>

      <para>using c3d_add_user</para>

      <itemizedlist>
        <listitem>
          <para>connect on the current host (proposed by default) by just
          giving your name</para>
        </listitem>
      </itemizedlist>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_user_alice.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>for example the user 'alice'</para>

      <itemizedlist>
        <listitem>
          <para>spin the scene, add a random sphere, and observe how the
          action takes place immediately</para>
        </listitem>

        <listitem>
          <para>add and remove renderers, and observe the effect on the 'speed
          up' indication from the user window.</para>
        </listitem>
      </itemizedlist>

      <para>Which configuration is the fastest for the rendering?</para>

      <para>Are you on a multi-processor machine?</para>

      <para><emphasis>* you might not perceive the difference of the
      performance. The difference is better seen with more distributed nodes
      and objects (for example on a cluster with 30+
      renderers).</emphasis></para>
    </sect2>

    <sect2 >
      <title>start a user from another machine</title>

      <para>using the c3d_add_user script, and <emphasis
      role="underline">specifying the host</emphasis> (NOT set by
      default)</para>

      <para><figure>
          <title>Specifying the host</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_specify_host.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>If you use rlogin, make sure the DISPLAY is properly set.</para>

      <para>You must use the same version of ProActive on both
      machines!</para>

      <itemizedlist>
        <listitem>
          <para>test the collaborative behavior of the application when
          several users are connected.</para>
        </listitem>
      </itemizedlist>

      <para>Notice that a collaborative consensus must be reached before
      starting some actions (or that a timeout occured).</para>
    </sect2>

    <sect2 >
      <title>start IC2D to visualize the topology</title>

      <para>to visualize all Active objects, you need to acquire ('monitoring'
      menu):</para>

      <itemizedlist>
        <listitem>
          <para>the machine on which you started the 'Dispatcher'</para>
        </listitem>

        <listitem>
          <para>the machine on which you started the second user</para>
        </listitem>
      </itemizedlist>

      <para><figure>
          <title>The C3D application when a new user joins in</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/c3d_topology_with_new_user.png"
                         format="PNG" contentwidth="100" width="6in" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <itemizedlist>
        <listitem>
          <para>add random spheres for instance, and observe messages
          (Requests) between Active Objects.</para>
        </listitem>

        <listitem>
          <para>add and remove renderers, and check graphically whether the
          corresponding Active Objects are contacted or not, in order to
          achieve the rendering.</para>
        </listitem>

        <listitem>
          <para>you can textually visualize this information by activating
          'add event timeline for this WorldObject' on the World panel with
          the right mouse button, and then 'show the event list window' on the
          top menu window</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      
     <indexterm><primary>Migration</primary><secondary>drag-and-drop</secondary></indexterm>

     <title>drag-and-drop migration</title>

      <para>From IC2D, you can drag-and-drop active objects from one JVM to
      another. Click the right button on a C3DRenderingEngine, and drag and
      drop it in another JVM. Observe the migration taking place.</para>

      <para>Add a new sphere, using all rendering engines, and check that the
      messages are still sent to the active object that was asked to
      migrate.</para>

      <para>As migration and communications are implemented in a fully
      compatible manner, you can even migrate with IC2D an active object while
      it is communicating (for instance when a rendering action is in
      progress). Give it a try!</para>

      <para><emphasis role="bold">Since version 1.0.1 of the C3D example, you
      can also migrate the client windows!</emphasis></para>
    </sect2>

    <sect2 >
      <title>start a new JVM in a computation</title>

      <para>manually you can start a new JVM - a 'Node' in the ProActive
      terminology - that will be used in a running system.</para>

      <para>- on a different machine, or by remote login on another host,
      start another Node, named for instance NodeZ:</para>

      <screen>linux&gt; startNode.sh rmi://mymachine/NodeZ &amp;
windows&gt; startNode.bat rmi://mymachine/NodeZ </screen>

      <para>The node should appear in IC2D when you request the monitoring of
      the new machine involved (Monitoring menu, then 'monitor new RMI
      host'.</para>

      <itemizedlist>
        <listitem>
          <para>the node just started has no active object running in it. Drag
          and drop one of the renderers, and check that the node is now taking
          place in the computation</para>
        </listitem>

        <listitem>
          <para>spin the scene to trigger a new rendering</para>
        </listitem>

        <listitem>
          <para>see the topology</para>
        </listitem>
      </itemizedlist>

      <para><emphasis>* if you feel uncomfortable with the automatic layout,
      switch to manual using the 'manual layout' option (right click on the
      World panel). You can then reorganize the layout of the
      machines.</emphasis></para>

      <itemizedlist>
        <listitem>
          <para>to fully distribute the computation, start several nodes (you
          need 2 more) and drag-and drop renderers in them.</para>
        </listitem>
      </itemizedlist>

      <para>Depending on the machines you have, the complexity of the image,
      look for the most efficient configuration.</para>
    </sect2>

    <sect2 >
      <title>Look at the source code for the main classes</title>

      <para>The main classes of this application are:</para>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DUser.java</literal></para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DRenderingEngine.java</literal></para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><literal>org.objectweb.proactive.examples.c3d.C3DDispatcher.java</literal></para>
        </listitem>
      </itemizedlist>

      <para>look at the method public void
      processRotate(org.objectweb.proactive.Body body, String methodName,
      Request r) that handles election of the next action to undertake.</para>
    </sect2>
  </sect1>

  <sect1 >
    <title>Synchronization with ProActive</title>

    <para>ProActive provides an advanced synchronization mechanism that allows
    an easy and safe implementation of potentially complex synchronization
    policies.</para>

    <para>This is illustrated by two examples:</para>

    <itemizedlist>
      <listitem>
        <para>The readers and the writers</para>
      </listitem>

      <listitem>
        <para>The dining philosophers</para>
      </listitem>
    </itemizedlist>

    <sect2 >
      <title>The readers-writers</title>

      <para>The readers and the writers want to access the same data. In order
      to allow concurrency while ensuring the consistency of the readings,
      accesses to the data have to be synchronized upon a specified policy.
      Thanks to ProActive, the accesses are guaranteed to be allowed
      sequentially.</para>

      <para>The <ulink
      url="http://www-sop.inria.fr/oasis/ProActive/apps/readers.html">implementation
      with ProActive</ulink> uses 3 active objects: Reader, Writer, and the
      controller class (ReaderWriter).</para>

      <sect3 >
        <title>start the application</title>

        <para><figure>
            <title>using the readers script</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/readers_console.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>ProActive starts a node (i.e. a JVM) on the current machine, and
        creates 3 Writer, 3 Reader, a ReaderWriter (the controller of the
        application) and a ReaderDisplay, that are active objects.</para>

        <para><figure>
            <title>a GUI is started that illustrates the activities of the
            Reader and Writer objects.</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/readers_app.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect3>

      <sect3 >
        <title>look and check the effect of different policies: even, writer
        priority, reader priority</title>

        <para>What happens when priority is set to 'reader priority'?</para>
      </sect3>

      <sect3 >
        <title>look at the code for programming such policies</title>

        <para>in
        <literal>org.objectweb.proactive.examples.readers.ReaderWriter.java</literal></para>

        <para>More specifically, look at the routines in:</para>

        <para>public void evenPolicy(org.objectweb.proactive.Service
        service)</para>

        <para>public void readerPolicy(org.objectweb.proactive.Service
        service)</para>

        <para>public void writerPolicy(org.objectweb.proactive.Service
        service)</para>

        <para>Look at the inner class <literal>MyRequestFilterm</literal> that
        implements
        <literal>org.objectweb.proactive.core.body.request.RequestFilter</literal></para>

        <para>How does it work?</para>
      </sect3>

      <sect3 >
        <title>Introduce a bug in the Writer Priority policy</title>

        <para>For instance, let several writers go through at the same
        time.</para>

        <itemizedlist>
          <listitem>
            <para>observe the Writer Policy policy before recompiling</para>
          </listitem>

          <listitem>
            <para>recompile (using compile.sh readers or compile.bat
            readers)</para>
          </listitem>

          <listitem>
            <para>observe that stub classes are regenerated and
            recompiled</para>
          </listitem>

          <listitem>
            <para>observe the difference due to the new synchronization
            policy: what happens now?</para>
          </listitem>

          <listitem>
            <para>correct the bug and recompile again ; check that everything
            is back to normal</para>
          </listitem>
        </itemizedlist>
      </sect3>
    </sect2>

    <sect2 >
      <title>The dining philosophers</title>

      <para>The 'dining philosophers' problem is a classical exercise in the
      teaching of concurrent programming. The goal is to avoid
      deadlocks.</para>

      <para>We have provided <ulink
      url="http://www-sop.inria.fr/oasis/ProActive/apps/phil.html">an
      illustration of the solution</ulink> using ProActive, where all the
      philosophers are active objects, as well as the table (controller) and
      the dinner frame (user interface).</para>

      <sect3 >
        <title>start the philosophers application</title>

        <para><figure>
            <title>with philosophers.sh or philosophers.bat</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/philosophers_console.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure></para>

        <para>ProActive creates a new node and instantiates the active objects
        of the application: DinnerLayout, Table, and Philosopher</para>

        <para><figure>
            <title>the GUI is started.</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/philosophers_app.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect3>

      <sect3 >
        <title>understand the color codes</title>

        <informaltable frame="none">
          <tgroup cols="3">
            <tbody>
              <row>
                <entry align="center" morerows="2" valign="middle">
                 <para><emphasis role="bold">Philosophers</emphasis></para>
                </entry>

                <entry><mediaobject>
                  <imageobject>
                   <imagedata fileref="guided_tour/pics/think.png" format="PNG" />
                  </imageobject>
        </mediaobject></entry>

                <entry><para><emphasis role="bold">philosophing</emphasis></para></entry>
              </row>

              <row>
               <entry><mediaobject>
                 <imageobject>
                  <imagedata fileref="guided_tour/pics/wait.png" format="PNG" />
                 </imageobject>
        </mediaobject></entry>

                <entry><para>
                   <emphasis role="bold">hungry, wants the fork !</emphasis>
                  </para></entry>
              </row>

              <row>
               <entry><mediaobject>
                 <imageobject>
                  <imagedata fileref="guided_tour/pics/eat.png" format="PNG" />
                 </imageobject>
        </mediaobject></entry>

                <entry><para><emphasis
                role="bold">eating</emphasis></para></entry>
              </row>

              <row>
                <entry align="center" morerows="1"
                valign="middle"><para><emphasis
                role="bold">Forks</emphasis></para></entry>

                <entry><mediaobject>
                  <imageobject>
                   <imagedata fileref="guided_tour/pics/fork1.png" format="PNG" />
                  </imageobject>
        </mediaobject></entry>

                <entry><para><emphasis
                role="bold">taken</emphasis></para></entry>
              </row>

              <row>
               <entry><mediaobject>
                 <imageobject>
                  <imagedata fileref="guided_tour/pics/fork0.png" format="PNG" />
                 </imageobject>
        </mediaobject></entry>

                <entry><para><emphasis
                role="bold">free</emphasis></para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3 >
        <title>test the autopilot mode</title>

        <para>The application runs by itself without encountering a
        deadlock.</para>
      </sect3>

      <sect3 >
        <title>test the manual mode</title>

        <para>Click on the philosophers' heads to switch their modes</para>

        <para>Test that there are no deadlocks!</para>

        <para>Test that you can starve one of the philosophers (i.e. the
        others alternate eating and thinking while one never eats!)</para>
      </sect3>

      <sect3 >
        <title>start the IC2D application</title>

        <indexterm><primary>IC2D</primary><secondary>example usage</secondary></indexterm>

        <para><ulink
        url="http://www-sop.inria.fr/oasis/ProActive/IC2D/index.html">IC2D</ulink>
        is a graphical environment for monitoring and steering of distributed
        and Grid Computing applications.</para>

        <para>- being in the autopilot mode, start the IC2D visualization
        application (using ic2d.sh or ic2d.bat)</para>

        <para><informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/ic2d_console.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </informalfigure></para>

        <para><informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/jc2d_main_panel.png"
                           format="PNG" contentwidth="100" width="6in" />
              </imageobject>
            </mediaobject>
          </informalfigure></para>

        <para><informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/ic2d_evt_listener_panel.png"
                           format="PNG" contentwidth="100" width="6in" />
              </imageobject>
            </mediaobject>
          </informalfigure></para>

        <para>the ic2d GUI is started. It is composed of 2 panels: the main
        panel and the events list panel</para>

        <para>- acquire your current machine</para>

        <figure>
         <title>Monitoring new RMI host with IC2D</title>
         <imageobject>
             <imagedata fileref="guided_tour/pics/screenshots/monitor_new_rmi_host_menu.png"
                         format="PNG" contentwidth="100" width="4in" />
         </imageobject>
        </figure> 
        
        <para>It is possible to visualize the
        status of each active object (processing, waiting etc...), the
        communications between active objects, and the topology of the system
        (here all active objects are in the same node):</para>

        <para><informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/ic2d_world_panel_philosophers.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </informalfigure></para>

        <para><informalfigure>
            <mediaobject>
              <imageobject>
                <imagedata fileref="guided_tour/pics/screenshots/ic2d_legend.png"
                           format="PNG" />
              </imageobject>
            </mediaobject>
          </informalfigure></para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 >
    
   <indexterm><primary>Migration</primary><secondary>example</secondary></indexterm>

   <title>Migration of active objects</title>

    <para>ProActive allows the transparent migration of objects between
    virtual machines.</para>

    <para>A nice visual example is the penguin's one.</para>

    <para>This example shows a set of <ulink
    url="http://www-sop.inria.fr/oasis/ProActive/apps/penguin.html">mobile
    agents</ulink> moving around while still communicating with their base and
    with each other. It also features the capability to move a swing window
    between screens while moving an agent from one JVM to the other.</para>

    <sect2 >
      <title>start the penguin application</title>

      <para>using the <literal>penguin</literal> script.</para>
    </sect2>

    <sect2 >
      <title>start IC2D to see what is going on</title>

      <para>using the <literal>ic2d</literal> script</para>

      <para>acquire the machines you have started nodes on</para>
    </sect2>

    <sect2 >
      <title>add an agent</title>

      <itemizedlist>
        <listitem>
          <para>on the Advanced Penguin Controller window: button 'add
          agent'</para>
        </listitem>
      </itemizedlist>

      <para><informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="guided_tour/pics/screenshots/penguin.png"
                         format="PNG" />
            </imageobject>
          </mediaobject>
        </informalfigure></para>

      <para>an agent is materialized by a picture in a java window.</para>

      <itemizedlist>
        <listitem>
          <para>select it, and press button 'start'</para>
        </listitem>

        <listitem>
          <para>observe that the active object is moving between the machines,
          and that the penguin window disappears and reappears on the screen
          associated with the new JVM.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      <title>add several agents</title>

      <para>after selecting them, use the buttons to:</para>

      <itemizedlist>
        <listitem>
          <para>communicate with them ('chained calls')</para>
        </listitem>

        <listitem>
          <para>start, stop, resume them</para>
        </listitem>

        <listitem>
          <para>trigger a communication between them ('call another
          agent')</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      <title>move the control window to another user</title>

      <itemizedlist>
        <listitem>
          <para>start a node on a different computer, using another screen and
          keyboard</para>
        </listitem>

        <listitem>
          <para>monitor the corresponding JVM with IC2D</para>
        </listitem>

        <listitem>
          <para>drag-and-drop the active object 'AdvancedPenguinController'
          with IC2D into the newly created JVM: the control window will appear
          on the other computer</para>
        </listitem>

        <listitem>
          <para> and its user can now control the penguins application.</para>
        </listitem>

        <listitem>
          <para>still with IC2D, doing a drag-and-drop back to the original
          JVM, you will be able to get back the window, and control yourself
          the application.</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
</chapter>