<?xml version="1.0" encoding="UTF-8"?>
<chapter id="IC2D">
  <title>IC2D: Interactive Control and Debugging of Distribution</title>

  <!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/IC2D.html  -->

  <para><emphasis role="bold">IC2D</emphasis> is a <emphasis
  role="bold">graphical environment</emphasis> for remote monitoring and
  steering of <emphasis role="bold">distributed and grid
  applications</emphasis>. IC2D features <emphasis role="bold">graphical
  visualisation</emphasis> and <emphasis role="bold">drag and drop
  migration</emphasis> of remote objects. As it is being interfaced with
  <emphasis role="bold">Jini</emphasis> and <emphasis
  role="bold">Globus</emphasis>, it can also serve as a building block for
  <emphasis role="bold">grid</emphasis> and <emphasis role="bold">computing
  portals</emphasis>. <emphasis role="bold">IC2D</emphasis> is built on top of
  <emphasis role="bold">RMI</emphasis> and <emphasis
  role="bold">ProActive</emphasis> that provides asynchronous calls and
  migration.</para>

  <table>
    <title>IC2D basic features</title>

    <tgroup cols="3">
      <thead>
        <row>
          <entry align="center">Graphical Visualisation</entry>

          <entry align="center">Textual Visualisation</entry>

          <entry align="center">Control and Monitoring</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Hosts, Java Virtual Machines, Active Objects</entry>

          <entry>Ordered list of messages</entry>

          <entry>Interactive control of mapping upon creation</entry>
        </row>

        <row>
          <entry>Topology: reference and communications</entry>

          <entry>Status: waiting for a request or for a data</entry>

          <entry>Interactive control of destination upon migration</entry>
        </row>

        <row>
          <entry>Status of active objects (executing, waiting, etc.)</entry>

          <entry>Causal dependencies between messages</entry>

          <entry>Dynamic change of deployment</entry>
        </row>

        <row>
          <entry>Migration of activities</entry>

          <entry>Related events (corresponding send and receive, etc.)</entry>

          <entry>Drag and Drop migration of executing tasks</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>The full source of IC2D is included in the distribution and is also
  browseable on line.</para>

  <para><ulink url="../doc/ProActive_src_html/index.xml">Source code
  index</ulink></para>

  <sect1 remap="h2">
    <title><anchor id="IC2D_html_visualisation" />Graphical Visualisation
    within IC2D</title>

    <para><emphasis role="bold">IC2D features graphical visualisation of
    hosts, Java Virtual Machines, and active objects, including the topology
    and volume of communications.</emphasis></para>

    <para><figure>
        <title>IC2D visualizing the C3D application</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ic2d_c3d.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure></para>
  </sect1>

  <sect1 remap="h2">
    <title><anchor id="IC2D_html_control" />Control within IC2D</title>

    <para><emphasis role="bold">IC2D permits to interactively and dynamically
    create new Jvms and Nodes.</emphasis></para>

    <para><figure>
        <title>A 'drag-and-drop' migration allows to graphically move running
        active objects between machines.</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/RemoteControl.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <figure>
      <title>IC2D permits to visualize related events and AOs state</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/ic2d_migrate_witharrow.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>

  <sect1 remap="h2">
    <title><anchor id="IC2D_html_applications" />Job monitoring and
    control</title>

    <para><anchor id="IC2D_html_JobMonitoringTag" /><emphasis role="bold">IC2D
    now provides a Job monitoring tool, in order to visualize and control high
    number of resources. This tool offers different views of a deployed
    application: per hosts, per jobs,.... To start the Job monitor tool,
    choose in the IC2D menu: windows --&gt; Show Job Monitor
    windows</emphasis></para>

    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/jobmonitor2_logo.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </informalfigure>

    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/jobmonitor1_logo.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </informalfigure>
  </sect1>

  <sect1 remap="h2">
    <title><anchor id="IC2D_html_launcher" />Launcher</title>

    <sect2 remap="h3">
      <title>Principles</title>

      <para>The launcher allows users to launch applications directly from an
      XML descriptor file, without any script. The new XML descriptor is
      nearly the same as classical descriptor files, the syntax is only
      extended. The deployment will be done in two different phasis.</para>

      <para>first, a new node, a "main node" will be created and activated and
      then, it is this node that will deploy the rest of the
      application.</para>
    </sect2>

    <sect2 remap="h3">
      <title>MainDefinition tag</title>

      <para>A new tag has been introduced, just before the component
      definition tag. This tag is named "mainDefinition" and its syntax is:</para>

      <screen>   &lt;mainDefinition id="mainID" class="theClassToLaunchContainingAMainMethod"&gt;
   &lt;arg value="param1"&gt; 
   &lt;arg value="param2"&gt;
   &lt;mapToVirtualNode value="main-Node"/&gt;
  &lt;/mainDefinition&gt;</screen>

      <para>Eventually, several mains might be defined so the <emphasis
      role="bold">id</emphasis> allows to identify all mainDefinitions.</para>

      <para>The <emphasis role="bold">class</emphasis> attribute is the path
      where can be found the class to launch.</para>

      <para><emphasis role="bold">This class MUST contain a main
      method.</emphasis></para>

      <para>Then any number of parameters can be declared in <emphasis
      role="bold">arg</emphasis> tags. The parameters will be given to the
      main method in the same order the were declared.</para>

      <para>And finally a <emphasis role="bold">mapToVirtualNode</emphasis>
      tag will link the main info to virtual node, declared with the same name
      in the virtualNodeDefinitions tag (in componentDefinition).</para>

      <screen>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;ProActiveDescriptor xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="DescriptorSchema.xsd"&gt;
   &lt;!-- &lt;security file="../../descriptors/c3dPolicy.xml"&gt;&lt;/security&gt; --&gt; 
   &lt; componentDefinition&gt;
    &lt; virtualNodesDefinition&gt;
     &lt; virtualNode name="Dispatcher"
 property="unique_singleAO"/&gt;
     &lt; virtualNode name="Renderer"/&gt;
    &lt; /virtualNodesDefinition&gt;
   &lt; /componentDefinition&gt;
   &lt; deployment&gt;
    &lt; register virtualNode="Dispatcher"/&gt;
    &lt; mapping&gt;
     &lt; map virtualNode="Dispatcher"&gt;
      &lt; jvmSet&gt;
       &lt; currentJVM/&gt;
      &lt; /jvmSet&gt;
     &lt; /map&gt;
     &lt; map virtualNode="Renderer"&gt;
      &lt; jvmSet&gt;
      &lt; vmName value="Jvm1"/&gt;
      &lt; vmName value="Jvm2"/&gt;
      &lt; vmName value="Jvm3"/&gt;
      &lt; vmName value="Jvm4"/&gt;
      &lt; /jvmSet&gt;
     &lt; /map&gt;
    &lt; /mapping&gt;
    &lt; jvms&gt;
     &lt; jvm name="Jvm1"&gt;
      &lt; creation&gt;
       &lt; processReference
 refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
     &lt; jvm name="Jvm2"&gt;
      &lt; creation&gt;
       &lt; processReference
 refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
      &lt; jvm name="Jvm3"&gt;
      &lt; creation&gt;
        &lt; processReference refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
     &lt; jvm name="Jvm4"&gt;
      &lt; creation&gt;
       &lt; processReference refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
    &lt; /jvms&gt;
   &lt; /deployment&gt;
   &lt; infrastructure&gt;
    &lt; processes&gt;
     &lt; processDefinition id="localJVM"&gt;
      &lt; jvmProcess class="org.objectweb.proactive.core.process.JVMNodeProcess"&gt;&lt;/jvmProcess&gt;
     &lt; /processDefinition&gt;
    &lt; /processes&gt;
   &lt; /infrastructure&gt;
  &lt;/ProActiveDescriptor&gt;</screen>
    </sect2>

    <sect2 remap="h3">
      <title>API</title>

      <para>The Launcher class is located in the package <emphasis
      role="bold">org.objectweb.proactive.core.descriptor</emphasis>. To use
      it you will have to create a new instance of the launcher with the path
      of the XML descriptor (this descriptor must contain a <emphasis
      role="bold">mainDefinition tag</emphasis>). The constructor will parse
      the file and reify a ProActiveDescriptor. You only have to call the
      <emphasis role="bold">activate()</emphasis> method on the launcher
      instance to launch the application.</para>

      <para><emphasis role="underline">For
      example:</emphasis><literal>Launcher launcher = new Launcher
      ("myDescriptor.xml") ;</literal></para>

      <para><literal>launcher.activate() ;</literal></para>

      <para>you can also get the ProActiveDescriptor built by the launcher by
      calling the getDescriptor() method on the launcher instance.</para>

      <para><literal>ProActiveDescriptor pad = launcher.getDescriptor()
      ;</literal></para>
    </sect2>

    <sect2 remap="h3">
      <title>Launcher in IC2D</title>

      <para>You will find the launcher in the <emphasis role="bold">launcher
      menu</emphasis>, in the menu bar. Click then on <emphasis
      role="bold">launch a new application</emphasis>.</para>

      <para><figure>
          <title>The launcher menu</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/launcher_menu.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Now it opens a new window proposing you to browse your file system
      for a XML descriptor and load it into a descriptors list. A right click
      on the list items allows you to launch (activate) the application. Two
      checkbox control the graphical monitoring and textual job monitoring
      your application.</para>

      <para><figure>
          <title>Loading a descriptor in the launcher</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/launcher_frame.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>You can kill the applications launched with from a popupmenu in
      the "activated applications" table.</para>
    </sect2>
  </sect1>

  <sect1 remap="h2">
    <title><anchor id="IC2D_html_gridcomp" />Grid and cluster
    computing</title>

    <para><emphasis role="bold">As ProActive is interfaced with Globus and
    LSF, IC2D permits to interactively control and debug applications that
    execute on intercontinental-wide networks.</emphasis> Below is C3D
    application deployed with JINI and RMI protocol between Baltimore US and
    Nice France on a globus cluster and LSF cluster</para>

    <figure>
      <title>C3D, deployed with JINI and RMI, between Baltimore US and Nice
      France, on a globus cluster and LSF cluster</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/clusterLogo.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>This experiment was partly sponsored by 
     <inlinemediaobject>
      <imageobject>
       <imagedata fileref="images/logoSun.png" format="PNG" />
      </imageobject>
     </inlinemediaobject> .
    </para>
  </sect1>
</chapter>