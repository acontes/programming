<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="Installation">
  <title>ProActive Installation</title>

  <para>ProActive is made available for <ulink
  url="http://www-sop.inria.fr/oasis/proactive/disclaimer.html">download</ulink>
  under a <ulink url="http://www.gnu.org/copyleft/lesser.txt">LGPL
  license</ulink>. ProActive requires the <ulink
  url="http://java.sun.com/j2se/1.4/">JDK 1.4</ulink> or later to be installed
  on your computer. Please note that ProActive will NOT run with any version
  prior to 1.4 since some features introduced in JDK 1.4 are essential.</para>

  <sect1 >
    <title>Quick Start</title>

    <sect2 >
      <title>To Test ProActive with the examples</title>

      <itemizedlist>
        <listitem>
          <para>Download and unzip the ProActive archive</para>
        </listitem>

        <listitem>
          <para>Set the <literal>JAVA_HOME</literal> variable to the Java
          distribution you want to use</para>
        </listitem>

        <indexterm><primary>Microsoft Windows</primary><secondary>scripts</secondary></indexterm>
          
        <listitem>
          <para>Launch the scripts located in
          <literal>ProActive/scripts/unix</literal> or
          <literal>ProActive/scripts/windows</literal></para>
        </listitem>

        <listitem>
          <para>no other setting is necessary since the scripts given with the
          example take care of everything</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      <title>To develop with ProActive</title>

      <itemizedlist>
        <listitem>
          <para>Download and unzip the ProActive archive</para>
        </listitem>

        <listitem>
          <para>Include in your <literal>CLASSPATH</literal> the following jar
          files <literal>ProActive/ProActive.jar, ProActive/lib/asm.jar,
          ProActive/lib/log4j.jar, ProActive/lib/xercesImpl.jar,
          ProActive/lib/components/fractal.jar,
          ProActive/lib/bouncycastle.jar</literal></para>
        </listitem>

        <indexterm><primary>CLASSPATH</primary><secondary>configuration</secondary></indexterm>

        
        <listitem>
          <para>Don't forget to launch the JVM with a <ulink
          url="http://java.sun.com/j2se/1.3/docs/guide/security/permissions.html">security
          policy file</ulink>. You can also specify a <ulink
          url="http://logging.apache.org/log4j/docs/manual.html">log4j
          configuration file</ulink> with the property
          <literal>-Dlog4j.configuration=file:pathToFile</literal>. If not
          specified a default logger that logs on the console will be
          created</para>
        </listitem>
      </itemizedlist>

      <para>Below are described the different steps in more details.</para>
    </sect2>
  </sect1>

  <sect1 >
    <title>Download and expand the
    archive</title>

    <para>You can download the archive file (a standard <emphasis 
    role="bold">zip</emphasis> file) containing ProActive from the <ulink
    url="http://www-sop.inria.fr/oasis/proactive/disclaimer.html">download
    section</ulink> of the ProActive home page. You will be asked to accept
    the licence agreement and provide a few personal details including your
    email address. You will then within a few minutes receive an email.</para>

    <para>Unzip the archive using your favorite ZIP program, such as <ulink
    url="http://www.winzip.com/">Winzip</ulink> under Windows or the <ulink
    url="http://www.info-zip.org/pub/infozip/">unzip</ulink> command-line
    utility on most Unix systems. Unzipping the archive creates a <emphasis
    role="bold">ProActive</emphasis> directory and all the files contained in
    the archive go into this directory and its subdirectories.</para>

    <para>Here is a quick overview of the directory structure of the
    archive:</para>

    <table frame="all">
     <title>ProActive.zip contents</title>
      <tgroup cols="2">
        <colspec colname="c1" colwidth="50*" />

        <colspec colname="c2" colwidth="50*" />

        <tbody>
          <row>
            <entry><para><emphasis role="bold">Directory or
            File</emphasis></para></entry>

            <entry><para><emphasis
            role="bold">Description</emphasis></para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>ProActive.jar</literal></emphasis></para></entry>

            <entry><para>ProActive bytecode that you need to include in the
            CLASSPATH in order to use ProActive</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>ProActive_examples.jar</literal></emphasis></para></entry>

            <entry><para>The bytecode and resources of all examples included
            with ProActive. This jar file needs to be included in the
            CLASSPATH only when trying to run the examples. All examples rely
            on ProActive and therefore the <literal>ProActive.jar</literal>
            file must be included in the CLASSPATH as well. This is done
            automatically by the scripts driving the examples. The source code
            is also included in the src directory (see below)</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>ic2d.jar</literal></emphasis></para></entry>

            <entry><para>The bytecode and resources of IC2D. This jar file
            needs to be included in the CLASSPATH only when trying to run the
            application IC2D. IC2D relies on ProActive and therefore the
            <literal>ProActive.jar</literal> file must be included in the
            CLASSPATH. This is done automatically by the scripts launching the
            application. The source code is also included in the src directory
            (see below)</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>lib</literal></emphasis></para></entry>

            <entry><para>The external libraries used by
            ProActive</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>docs</literal></emphasis></para></entry>

            <entry><para>ProActive documentation including the full api
            doc</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>scripts/unix</literal></emphasis></para></entry>

            <entry><para>Unix <emphasis>sh</emphasis> scripts for running the
            examples</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>scripts/windows</literal></emphasis></para></entry>

            <entry><para>Windows <emphasis>.bat</emphasis> batch files for
            running the examples</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>src</literal></emphasis></para></entry>

            <entry><para>For source version only, the full source code of
            ProActive</para></entry>
          </row>

          <row>
            <entry><para><emphasis
            role="bold"><literal>compile</literal></emphasis></para></entry>

            <entry><para>For source version only, the scripts to compile
            ProActive using Ant.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 >
    <title>Run a few examples for
    testing</title>

    <para>You can try to run the test applications provided with ProActive.
    Each example comes with a script to launch the application. Depending on
    you operating system, the script you need to launch is located either in
    <literal>ProActive/scripts/unix</literal> or
    <literal>ProActive/scripts/windows</literal>. The source code of all
    examples can be found in the directory
    <literal>ProActive/src/org/objectweb/proactive/examples</literal>.</para>

    <sect2 >
      <title>Local Example 1: Hello world !</title>

      <para>A simple example</para>

      <itemizedlist>
        <listitem>
          <para>script : <literal>hello.sh</literal> or
          <literal>hello.bat</literal></para>
        </listitem>

        <listitem>
          <para>source : <literal>examples/hello</literal></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      <title>Local Example 2: Reader/Writer</title>

      <para>This example is the ProActive version of the Readers/Writers
      canonical problem. To illustrate the ease-of-use of the ProActive model,
      different synchronization policies can be applied without even stopping
      the application. This example is based on a easy to use Swing
      GUI.</para>

      <itemizedlist>
        <listitem>
          <para>script : <literal>readers.sh</literal> or
          <literal>readers.bat</literal></para>
        </listitem>

        <listitem>
          <para>source : <literal>examples/readers</literal></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 >
      <title>Local Example 3: The Dining Philosophers</title>

      <para>This example is one possible implementation of the well-known
      <emphasis>Dining Philosophers</emphasis> synchronization problem. This
      example is based on a easy to use Swing GUI.</para>

      <itemizedlist>
        <listitem>
          <para>script : <literal>philosophers.sh</literal> or
          <literal>philosophers.bat</literal></para>
        </listitem>

        <listitem>
          <para>source : <literal>examples/philosophers</literal></para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Local Example 4: The N-Body Simulation</title>

      <para>This example has more fancy GUI stuff. It can be used later on to
      see how to deploy on several machines, and also for the Fault-tolerant
      features. <itemizedlist>
          <listitem>
            <para>script : <literal>nbody.sh</literal> or
            <literal>nbody.bat</literal></para>
          </listitem>

          <listitem>
            <para>source : <literal>examples/nbody</literal></para>
          </listitem>
        </itemizedlist></para>
    </sect2>
  </sect1>

  <sect1 >
    <title>CLASSPATH to set when writing application using ProActive</title>
    
    <indexterm significance="prefered"><primary>CLASSPATH</primary><secondary>to run ProActive</secondary></indexterm>


    <para><emphasis>Note that if you use the scripts provided with the
    distribution to run the examples you do not need to update your
    classpath.</emphasis></para>

    <para>In order to use <emphasis role="bold">ProActive</emphasis> in your
    application you need to place in your <literal>CLASSPATH</literal> the
    following jars files :</para>

    <orderedlist>
      <listitem>
        <para><literal>ProActive.jar</literal> : the library itself</para>
      </listitem>

      <listitem>
        <para><literal>asm.jar</literal> in <literal>lib</literal> directory :
        ASM the default bytecode manipulation framework used to dynamically
        generate the java bytecode of the Stubs</para>
      </listitem>

      <listitem>
        <para><literal>log4j.jar</literal> in <literal>lib</literal> directory
        : <ulink
        url="http://logging.apache.org/log4j/docs/manual.html">Log4j</ulink> is
        the logging mechanism used in ProActive. You can define the way you
        want to log(console, file, GUI) by creating a log4j configuration
        file, like the one used in ProActive's example and located under
        ProActive/scripts/. In that case, remind to run your java command with
        the property:</para>

        <para>-Dlog4j.configuration=file:pathToLog4jFile</para>
      </listitem>

      <listitem>
        <para><literal>xercesImpl.jar</literal> in <literal>lib</literal>
        directory : Xerces is the library used to parse and validate xml
        files, like Deployment Descriptors, Configuration files and Component files 
        (see <xref linkend="XML_Descriptors"/>,
        <xref linkend="Configuration"/>, and  
        <xref linkend="intro"/>).
      </para>
      </listitem>

      <listitem>
        <para><literal>fractal.jar</literal> in
        <literal>lib/components</literal> directory : Fractal is the component
        model used for ProActive Components (see <xref linkend="intro"/>).</para>
      </listitem>

      <listitem>
        <para><literal>bouncycastle.jar</literal> in <literal>lib</literal>
        directory : This library is used by the ProActive security framework
        (see <xref linkend="Security"/>).</para>
      </listitem>
    </orderedlist>

    <para>You do not need to modify your CLASSPATH permanently as long as you
    include the two entries above using a Java IDE or a shell script.</para>

    <para>In addition to the jar files above you may want to add the following
    jar files. None of them are used directly by the core functionnalities of
    ProActive but only in part of the library. Their are needed to compile all
    the code but they are not needed at runtime if those specific
    functionnalities are not used.</para>

    <orderedlist>
      <listitem>
        <para><literal>bcel.jar</literal> in lib directory : BCEL is also a
        bytecode manipulation framework that can be used optionnally (adding
        the -DbyteCodeManipulator=BCEL argument to the JVM)</para>
      </listitem>

      <listitem>
        <para><literal>jini-core.jar, jini-ext.jar, reggie.jar</literal> in
        lib/jini directory: used to interface with Jini</para>
      </listitem>

      <listitem>
        <para><literal>cog-jglobus.jar, cog-ogce.jar, cryptix.jar,
        cryptix32.jar, cryptix-asn1.jar, puretls.jar</literal> in lib/globus
        directory: used to interface with Globus</para>
      </listitem>

      <listitem>
        <para>all jar files in lib/components directory to use the Fractal
        GUI</para>
      </listitem>

      <listitem>
        <para>all jar files in lib/ws directory to use Web Services features
        in ProActive</para>
      </listitem>

      <listitem>
        <para>ibis.jar in lib/ibis directory to use Ibis as communication
        protocol</para>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 >
    <title>Create a java.policy file to
    set permissions</title>

    <para><emphasis>If you use the scripts provided with the distribution to
    run the examples an existing policy file named <emphasis
    role="bold">proactive.java.policy</emphasis> will be used by
    default</emphasis></para>

    <para>See <ulink
    url="http://java.sun.com/j2se/1.3/docs/guide/security/permissions.html">Permissions
    in the JavaTM 2 SDK</ulink> to learn more about Java permissions. As a
    first approximation to run your code you can create a simple policy file
    granted all for everything :</para>

    <para><screen>grant {
    permission java.security.AllPermission;
};        </screen></para>
  </sect1>

  <sect1 >
    <title>Create a log4j configuration
    file</title>

    <para><emphasis>If you use the scripts provided with the distribution to
    run the examples an existing log4j file named <emphasis
    role="bold">proactive-log4j</emphasis> will be used by
    default</emphasis></para>

    <para><example>
        <title>A simple proactive-log4j file</title>

        <para><screen><emphasis># the default logging level is INFO

log4j.rootLogger=INFO, A1

#A1 uses PatternLayout
#and displays the associated message (%m)
#using the platform dependant separator (%n)
#Use %M for method names
#see log4j documentation for details

log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%m %n

########### Change here default logging level on a 
########### per-logger basis
########### usage is log4j.logger.className=Level, Appender</emphasis></screen></para>
      </example></para>
  </sect1>

  <sect1 >
    <title>ProActive and the Eclipse
    IDE</title>

    <para>We highly recommend you to use the Eclispe IDE to develop your
    ProActive applications. You can get this tool on the <ulink
    url="http://www.eclipse.org">Eclipse website</ulink> Just unzip and launch
    the eclipse executable. In order to develop your own ProActive
    application, you have to create an eclipse project :</para>

    <para><emphasis role="bold">File -&gt; New ... -&gt;
    Project</emphasis></para>

    <para>Then choose <emphasis role="bold">Java Project</emphasis> . A wizard
    should appear and ask you to enter the project name :</para>

    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="./eclipse_files/wizard_new_project.jpg"
                     format="JPG" />
        </imageobject>
      </mediaobject>
    </informalfigure>

    <para>In order to separate class files from source files ( it can be
    usefull when you write scripts that refer to these classes), you can check
    the <emphasis role="bold">Create separate source and ouput
    folders</emphasis> in the <emphasis role="bold">Project Layout</emphasis>
    Frame, and click on <emphasis role="bold">configure default ...</emphasis>
    to choose the folders names. Once you have choosen all informations about
    <emphasis role="bold">Project Name</emphasis> , <emphasis
    role="bold">Project location</emphasis> , you can click on <emphasis
    role="bold">Next</emphasis> .</para>

    <para>You have to specify some java settings in order to set the
    application classpath. Select the <emphasis
    role="bold">Librairies</emphasis> tab and click on the <emphasis
    role="bold">Add External Jar...</emphasis> button. Add the ProActive.jar
    and the librairies contained in the lib/ directory of the ProActive
    distribution.</para>

    <para>The <emphasis role="bold">Librairies</emphasis> tab should look like
    this :</para>

    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="./eclipse_files/wizard_java_settings.jpg"
                     format="JPG" />
        </imageobject>
      </mediaobject>
    </informalfigure>

    <para>All is now configured to create your ProActive application. Click on
    the <emphasis role="bold">Finish</emphasis> button.</para>

    <para>You can see now on the navigator tab on the left side, that there is
    a new Project with the source and output folders you've just created
    :</para>

    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata fileref="./eclipse_files/navigator.jpg" format="JPG" />
        </imageobject>
      </mediaobject>
    </informalfigure>

    <para>You are now able to create classes and packages that use the
    ProActive library.</para>

    <para>We are currently developping an eclipse plugin that will help
    developpers to create easily ProActive applications. Have a look 
    at the plugin documentation page, <xref linkend="plugin"/>.  </para>
  </sect1>

  <sect1 >
    <title>Troubleshooting and
    support</title>

    <para>If you encounter any problem with installing ProActive and running
    the examples, please make sure you correctly followed all the steps
    described above. If it doesn't help, here is a list of the most common
    mistakes:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Permission denied when trying to launch
        scripts under Linux</emphasis> Permissions do not allow to execute
        files. Just change the permissions with <emphasis role="bold">chmod
        755 *.sh</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Java complains about not being able to
        find ProActive's classes.</emphasis> Your <literal>CLASSPATH</literal>
        environment variable does not contain the entry for the ProActive's or
        ASM's or Log4j's or Xerces' or Fractal's or BouncyCastle's classes.
        <literal>ProActive.jar,</literal><literal>asm.jar, log4j.jar,
        xercesImpl.jar, fractal.jar, bouncycastle.jar</literal> must be in
        your <literal>CLASSPATH</literal>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Java complains about denial of
        access.</emphasis> If you get the following exceptions, you probably
        didn't change the file java.policy as described in step 4.</para>

        <screen>org.objectweb.proactive.NodeException:
java.security.AccessControlException: access denied
(java.net.SocketPermission 127.0.0.1:1099 connect,resolve)
                at org.objectweb.proactive.core.node.rmi.RemoteNodeImpl.&lt;init&gt;(RmiNode.java:17)
                at org.objectweb.proactive.core.node.rmi.RemoteNodeFactory._createDefaultNode
                        (RmiNodeFactory.java, Compiled Code)
                at org.objectweb.proactive.core.node.NodeFactory.createDefaultNode(NodeFactory.java:127)
                at org.objectweb.proactive.core.node.NodeFactory.getDefaultNode(NodeFactory.java:57)
                at org.objectweb.proactive.ProActive.newActive(ProActive.java:315)
                ...
Exception in thread "main" java.lang.ExceptionInInitializerError:
java.security.AccessControlException: access denied
(java.util.PropertyPermission user.home re ad)
                at java.security.AccessControlContext.checkPermission (AccessControlContext.java, Compiled Code)
                at java.security.AccessController.checkPermission(AccessController.java:403)
                at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
                at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1243)
                at java.lang.System.getProperty(System.java:539)
                at org.objectweb.proactive.mop.MOPProperties.createDefaultProperties (MOPProperties.java:190)
                ...         </screen>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Java complains log4j
        initialization</emphasis> If you get the following message, you
        probably made a mistake when giving the
        <literal>-Dlog4j.configuration</literal> property to the java command.
        Be sure that the given path is right, try also to add file: before the
        path.</para>

        <screen>    log4j:WARN No appender could be found for logger .....
    log4j:WARN Please initialize the log4j system properly            </screen>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Examples and compilation do not work at
        all under Windows system:</emphasis> Check if your java installation
        is not in a directory with spaces like C:\Program Files\java or
        C:\Documents and Settings\java. Indeed bat scripts do not run properly
        when JAVA_HOME is set to such directories. To get rid of those
        problems, the best thing is to install jdk in a directory whose name
        does not contain spaces such as C:\java\j2sdk.... or D:\java\j2sdk...
        and then to set the JAVA_HOME environment variable accordingly: set
        JAVA_HOME=C:\java\j2sdk....</para>
      </listitem>
    </itemizedlist>

    <para>If you cannot solve the problem, feel free to email us for support
    at <email>proactive@objectweb.org</email>. Make
    sure you include a precise description of your problem along with a full
    copy of the error message you get.</para>
  </sect1>
</chapter>