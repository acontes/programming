<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="writingProActiveDocumentation">
 
  <title>How to write ProActive documentation</title>
 
  <sect1 id="ReasonForDocumentationChapter">
   <title>Aim of this chapter</title>
   
   <para>This chapter is meant to help you as a reference for 
    writing ProActive-directed documentation. If you have added 
    a new feature and want to help its uptake by documenting it, 
    you should be reading this chapter. </para>
   
   <para> 
    The examples sections (<xref linkend="DocBookExamples"/>)
    describes the use of the main tags you will use (eventually, 
    all the ProActive-allowed docbook tags should be described). 
    The limitations (<xref linkend="DocBookLimitations"/>)
    section describes what is allowed in our docbook style, and 
    why we restrict ourselves to a subset of docbook.</para>
</sect1>


<sect1 id="DocBookQuickStart">
 <title>Getting a quick start into writing ProActive doc</title>
 
 <para> First off, all the documentation is written in 
  <ulink url="http://nwalsh.com/docbook/">docbook</ulink>. You 
  can find all the documentation source files in the 
  <literal>ProActive/src/org/objectweb/proactive/doc-files/</literal>
  directory. </para>
 
 <para>Here are the instrtuctions to follow to start well &amp; fast writing
  documentation for the ProActive middleware:</para>
 
 <orderedlist>
  <listitem>
   <para>Get a working copy of the XMLMind XML Editor 
    (<emphasis role="bold">XXE</emphasis>)</para>
  </listitem>
  
  <listitem>
   <para>If you want a new chapter of your own, copy one of the existing
    files. (<literal>doc-files/WSDoc</literal> for example)</para>
  </listitem>
  
  <listitem>
   <para>Reference your file in the root element of the doc (it is
    currently called PA_index.xml)</para>
  </listitem>
  
  <listitem>
   <para>Open your file with XXE (it should not complain)</para>
   
   <itemizedlist>
    <listitem>
     <para>REMEMBER: YOU ARE EDITING AN XML FILE - you can always edit
      it with vi if you dare</para>
    </listitem>
    
    <listitem>
     <para>Use generously the icons at the top, they have the essential
      tags you will use</para>
    </listitem>
    
    <listitem>
     <para>Use the list of tags, just under the icons, to select the item
      you want to edit</para>
    </listitem>
    
    <listitem>
     <para>Use the column on the right to add tags, when you know their
      names</para>
    </listitem>
    
    <listitem>
     <para>When you're done, there is a spellchecker intergated, as well
      as a DocBook validator. Please use these tools!</para>
    </listitem>
   </itemizedlist>
  </listitem>
  
  <listitem>
   <para>Make sure your new additions make a nice new document. 
    Run the ant target <literal>build manualHtml</literal>, and  you should have 
    an html copy of the doc. If you want to generate all the possible output formats, 
    call <literal>build manual</literal>. You can also see what the results seem to be 
    without compiling! Try to open one of the docbook xml files in a browser
    (mozilla/firefox do it) and you have a preview of what it might look like. Those 
    who dislike XXE should be more than happy of it... </para>
  </listitem>
  
  <listitem>
   <para>Commit your changes to the svn repository</para>
  </listitem>
  
 </orderedlist>
</sect1>

<sect1 id="DocBookExamples">
 <title>Example use of tags</title>
 
 <para>These are the basic rules to follow to use docbook tags. This document 
  is made up of the files in the <literal>docBookTutorial</literal> directory, and
  you may find it with the other manual files in the 'doc-files' directory.</para>
 
 <sect2>
  <title>Summary of the useful tags</title>
  
  <para>The main tags/structures you should be using are: </para>
  
  <itemizedlist>
   <listitem>
    <para>&lt;figure&gt; When you want an image</para>
   </listitem>
   
   <listitem>
    <para>&lt;example&gt; when you want an example with a title (should
     contain a &lt;screen&gt; or &lt;programlisting&gt;). You can also use 
     &lt;literal&gt; inside paragraphs.</para>
   </listitem>
   
   <listitem>
    <para>&lt;screen&gt; or &lt;programlisting&gt; for the
     code/text/descriptor examples</para>
   </listitem>
   
   <listitem>
    <para>&lt;para&gt; to start a paragraph, &lt;sectX&gt;, with X=1..4 to have headings,
     and &lt;emphasis&gt; when you want some particular bit to stick out. </para>
   </listitem>
   
   
   <listitem>
    <para>&lt;itemizedlist&gt; followed by several &lt;listitem&gt; when
     you want bullets</para>
   </listitem>
   
   <listitem>
    <para>&lt;xref&gt; when you want to reference another
     section/chapter/part</para>
   </listitem>
   
   <listitem>
    <para>&lt;ulink&gt; when you want to reference a web url</para>
   </listitem>
   
   <listitem>
    <para>&lt;table&gt; when you want a table</para>
   </listitem>
  </itemizedlist>
  
  <note><para><emphasis role="bold">BUT, you should always be using the XXE icons.
     They have all you need (except for EXAMPLE/SCREEN)! You can also cut n
     paste!</emphasis></para></note>
 </sect2>
 
 <sect2 id="Figures">
  <title>Figures</title>
  
  <para>This is the figure example. Please use the TITLE tag</para>
  
  <figure>
   <title>A Drawing using the FIGURE tag</title>
   
   <mediaobject>
    <imageobject>
     <imagedata align="center" fileref="images/e1.png" format="PNG" />
    </imageobject>
   </mediaobject>
  </figure>
 </sect2>
 
 <sect2 id="Bullets">
  <title>Bullets</title>
  
  <para>Use ITEMIZEDLIST followed by as many 'LISTITEM's as you want!
   <itemizedlist>
    <listitem>
     <para>Provide an implementation for the required server-side
      functionalities</para>
    </listitem>
    
    <listitem>
     <para>Provide an empty, no-arg constructor</para>
    </listitem>
    
    <listitem>
     <para>Write a method in order to instantiate one server
      object.</para>
    </listitem>
   </itemizedlist></para>
 </sect2>
 
 <sect2 id="Code">
  <title>Code</title>
  
  <para>Code sources should be written between PROGRAMLISTING tags (possiblibly language="java" or "xml" ). 
   You don't have to write valid code, as the highlighting (done by LanguageToDocBook classes) is based on 
   regular expression replacement, and not on language grammars.
   If you want to show some program output, you can use SCREEN instead 
   of PROGRAMLISTING. In any case, watch out, because spaces count (and produce your own indentation)! 
   You can also use the EXAMPLE TAG around your PROGRAMLISTING or SCREEN tags, to give a title, 
   and be referenced in the table of examples. </para>
  
  <para> You can also insert directly sources from their original files, or type the code in the docbook.
   When you are typing the code inside the docbook file, you can even highlight yourself some 
   bits of the code you want to emphasis. This is shown in the last example. But beware, as you are
   inside docbook you have to escape the "&amp;" and the "&lt;" signs. If you don't want to, hide
   everything in a CDATA block.</para>
  
  <para>Within normal text, for instance in a paragraph, you can also just use 
   the LITERAL tag to highlight the  <literal>main</literal> methods.</para>
  
  <example>
   <title>JAVA program listing with file inclusion</title>
   <programlisting language="java"><textobject>
     <textdata fileref="examples/hello/TinyHello.java" />
    </textobject></programlisting>
  </example>
  
  <example>
   <title>XML program listing with file inclusion</title>
   <programlisting language="xml"><textobject>
     <textdata fileref="examples/components/c3d/adl/UserImpl.fractal" />
    </textobject></programlisting>
  </example>
  
  
  <para>A screen example, for instance some code inside a unix shell:</para>
   
  <screen>linux > start.sh &amp; </screen>
  
  <para> Here is some java code directly included in the docbook (you can 
  use CDATA to escape  &amp; and &lt;):  </para>
  
  <programlisting language="java"><![CDATA[package util;
                                                   
import java.io.IOException;
                                                   
/** Just a dummy class. */

public class JavaToDocBook {
                                                   
  /** Just the method description 
   * @param fileToConvert the name of the file to convert 
   * @return a String created  */   
  String convert(String fileToConvert) throws IOException {
    if (a > b && c < d ) {
      // can use "this" for 'NodeCreationEvent'
      VirtualNode vn = pad.getVirtualNode("p2pvn");
      vn.start();
      }
    return "Hello World";      
  }
                                                                    
}]]></programlisting>
   
   <para>Here is an example of deployment descriptor that deploys 3 virtual nodes .</para>
   
   <programlisting language="xml">  &lt;!-- Deoploying 3 virtual Nodes  --&gt;
 &lt;ProActiveDescriptor&gt;                        
  &lt;componentDefinition&gt;
   &lt;virtualNodesDefinition&gt;
    &lt;virtualNode name="NonFT-Workers" property="multiple"/&gt;
     &lt;virtualNode name="FT-Workers" property="multiple" <emphasis role="bold">ftServiceId="appli"</emphasis>/&gt;
      &lt;virtualNode name="Failed" property="multiple" <emphasis role="bold">ftServiceId="resource"</emphasis>/&gt;
     &lt;/virtualNodesDefinition&gt;
    &lt;/componentDefinition&gt;
    &lt;deployment&gt;
     &lt;mapping&gt;
      &lt;map virtualNode="NonFT-Workers"&gt;
       &lt;jvmSet&gt;
        &lt;vmName value="Jvm1"/&gt;
       &lt;/jvmSet&gt;
      &lt;/map&gt;
      &lt;map virtualNode="FT-Workers"&gt;
       &lt;jvmSet&gt;
        &lt;vmName value="Jvm2"/&gt;
       &lt;/jvmSet&gt;
      &lt;/map&gt;
    ....</programlisting>
   
   
  </sect2>
  
  <sect2 id="Links">
   <title>Links</title>
   
   <para>Use XREF tags to point to the Figures id (<xref linkend="Figures"/>) 
    which is in the doc above. The LINKEND attribute points to the id which 
   is referenced, for example, in a SECT1 tag. The ENDTERM tag (example with the biblio)
   is used to customize the string which will be used to point to the reference. </para>
  <para>You can also use XREF to include files which are in the html hierararchy already.
  This goes for java files, and deployment descriptors. You have a few examples in
  <literal>Descriptor.xml</literal>. (technical note: including files is done through the java
  files in util. This may be done in pure xsl, but I gave up! The pdf and html look different
 thanks to profiling) </para>
  
   <para>Use ULINK tags to point to 
    <ulink url="http://www-sop.inria.fr/oasis/proactive/">web references 
     (ProActive for instance)</ulink>. Use freely, it sticks out nicely in pdf too!</para>
   
   <para>Use CITATION followed by an XREF for citations. For example, see 
    <citation><xref linkend="BBC02" endterm="BBC02.abbrev"/></citation> to learn on
    groups. All the biblio entries should be put in <literal>biblio.xml</literal>. 
    You should consider using the bibdb tool to convert from bibtex 
    (http://charybde.homeunix.org/~schmitz/code/bibdb/).
   </para>
   
  </sect2>
  
  <sect2 id="Tables">
   <title>Tables</title>
   
   <para>The tag to use is TABLE.</para>
   
   <table>
    <title>This is an example table</title>
    
    <tgroup cols="2">
     <tbody>
      <row>
       <entry><para><emphasis role="bold">Name</emphasis></para></entry>
       <entry><para><emphasis role="bold">Hits</emphasis></para></entry>
      </row>
      
      <row>
       <entry><para>Bob</para></entry>
       <entry><para>5</para></entry>
      </row>
      
      <row>
       <entry><para>Mike</para></entry>
       <entry><para>8</para></entry>
      </row>
      
      <row>
       <entry><para>Jude</para></entry>
       <entry><para>3</para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>
  
 </sect1>
 
 
  

 <sect1 id="DocBookLimitations">
  <title>DocBok limitations imposed</title>
  
  <para>Here is described what is allowed in our docbook style. We restrict
   ourselves to a subset of docbook, because we want a uniform doc style, and
   want maintainable doc. To achieve this goal, we require minimum learning
   investment from our PA developers, who are meant to be coding, not spend
   there time writing doc. So you still want to add a fancy feature? Well, you
   can, as long as you describe how to use this new tag in this howto, and be
   extra careful with the pdf output.</para>
  
  <para>There will be a schema specifying which are the allowed tags. For now,
   all is legal, as I haven't gotten down to writing this yet. Nonetheless, the
   tags I recommend to use are the ones described in the section above (those 
   which are used in this tutorial), namely
   <itemizedlist>
    <listitem> <para> chapter, sect*, para, emphasis, link, ulink </para> </listitem>
    <listitem> <para> figure, informalfigure, mediaobject , imagedata </para> </listitem>
    <listitem> <para> itemizedlist and orderedlist </para> </listitem>
    <listitem> <para> screen and literal </para> </listitem>
   </itemizedlist>
  </para>
</sect1>

<sect1 id="DocBookCustomization">
 <title>Stylesheet Customization</title>
 
 <para>Ok, now you're nearly a docbook guru? You want to get right down to
  the entrails of the machinery? OK, hop on and enjoy the ride! Here are a few
  notes on how you should go about customizing the output. That means,
  changing how the pdf and html are written.</para>

  <sect2 id="xsl.directory">
  <title>File hierarchy</title>
  
  <para>The files for configuration are the following:</para>
  
  <itemizedlist>
   <listitem><para>
     <emphasis role="bold">common.xsl</emphasis> This is where all
     the common specifications are made, ie those that go and in pdf and in
     html.</para>
   </listitem>
   
   <listitem><para>
     <emphasis role="bold">pdf.xsl</emphasis> This is where all the
     pdf specific customizations are made</para>
   </listitem>
   
   <listitem><para>
     <emphasis role="bold">html.xsl</emphasis> This is where most 
     html specific customizations are made.</para>
   </listitem>
   
   <listitem><para>
     <emphasis role="bold">onehtml.xsl</emphasis> and
     <emphasis role="bold">chunkedhtml.xsl</emphasis>, specifics for html,
     the former on one page, "chunked", one file per chapter, for the 
     latter.</para>
   </listitem>
   
   <listitem><para>
     <emphasis role="bold">ProActive.css</emphasis> Which is yet another
     extra layer on top of the html output.  </para>
   </listitem>
   
  </itemizedlist>
  
 </sect2>
 
 <sect2>
  <title>What you can change</title>
  
  <para>Basically, in the customization layers, you have full control (just
   do what you want). The only thing is that each block (template,
   variable...) should be described by a comment. That will help later users.
   As customization can get cryptic, make a special effort!</para>
 </sect2>
 
 <sect2>
  <title>The Bible</title>
  
  <para>The book you want to have with you is the following: "DocBook XSL:
   The Complete Guide", Third Edition, by Bob Stayton, online version at
   <ulink url="http://www.sagehill.net">http://www.sagehill.net</ulink>.</para>
  
  <para>Have a look at the index if you just want to change a little
   something in the customization. Parse through it at least once if you
   intend to do some heavy editing. I have found everything I needed in this
   book, but sometimes in unexpected sections.</para>
 </sect2>
 
 
 <sect2 id="xsl.profiling">
  <title>Profiling</title>
  <para>If you want to write some stuff that should go in pdf but not html, or vice-versa, 
   you want to do some "profiling". This is very easy to do, as it was needed and tuned 
   for the processing stages. Add an "os" attribute to the sections you want to exclude, 
   specifying the wanted output format in which it should only appear.</para>
  <screen> &lt;para os="pdf"&gt; This paragraph only appears in pdf output! &lt;/para&gt;</screen>
  <para>(Comment) Using the "os" attribute to specify the output is not elegant. Agreed. But 
   in docbook there is no default attribute intended to express the expected output file format, 
   and using the "role" attribute is discouraged. </para>
 </sect2>
 
 <sect2 id="xsl.debugging">
  <title>The XSL debugging nightmare</title>
  
  <para>If you are editing the xsl stylesheets, and are having a hard time figuring
   out what's happening, don't panic! Use many messages 
   to find out what the values of the variables are at a given time:
   <screen><![CDATA[<xsl:message>
     <xsl:text> OK, in question.toc, id is </xsl:text> <xsl:copy-of select="$id" /> 
    </xsl:message>
    
    <xsl:for-each select="./@*">
     <xsl:message>
      <xsl:text> Attribute  <xsl:value-of select="name(.)"/> = <xsl:value-of select="."/>  </xsl:text> 
     </xsl:message>
    </xsl:for-each > ]]> </screen>
  </para>
  
  
  <para> You will very soon find that you still have to dig deeper into the templates, 
   and they certainly are not easy to follow. Here's a little helper:
   <screen>java -cp $CLASSPATH org.apache.xalan.xslt.Process -TT -xsl ...  -in ... -out ...</screen>
   This uses the specified templates with the xsl file specified, but tracing every 
   template called. Useful when you're wondering what's being called.
   I'm sorry but I have not found a way to trace the call tree of a method, 
   ie knowing exactly where it comes from. Have to do without!
  </para>
 </sect2>
 
 <sect2>
  <title>Todo list, provided by Denis</title>
  
  <orderedlist>
   
   <listitem>
    <para> Ensure no dead links exist (easy with wget --spider OR http://www.dead-links.com/ 
     for html, harder for the pdf).</para>
   </listitem>
   
   <listitem>
    <para> Create an index, and put the main words in it</para>
   </listitem>
   
   <listitem>
    <para> All important code examples should be wrapped in EXAMPLE tags  </para>
   </listitem>
   
  </orderedlist>
 </sect2>
 
 </sect1>


</chapter>