<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="viewDocbook.css"?>
<chapter id="VariableContract">
  <title>Packaging application for flexible deployment</title>

  <sect1>
    
    <title>Deploying a main for the portable launcher</title>
    
      <sect2 >
      <title>Principles</title>

      <para>The launcher allows users to launch applications directly from an
      XML descriptor file, without any script. The new XML descriptor is
      nearly the same as classical descriptor files, the syntax is only
      extended. The deployment will be done in two different phasis.</para>

      <para>first, a new node, a "main node" will be created and activated and
      then, it is this node that will deploy the rest of the
      application.</para>
    </sect2>

    <sect2 >
      <title>MainDefinition tag</title>

      <para>A new tag has been introduced, just before the component
      definition tag. This tag is named "mainDefinition" and its syntax is:</para>

      <screen>   &lt;mainDefinition id="mainID" class="theClassToLaunchContainingAMainMethod"&gt;
   &lt;arg value="param1"&gt; 
   &lt;arg value="param2"&gt;
   &lt;mapToVirtualNode value="main-Node"/&gt;
  &lt;/mainDefinition&gt;</screen>

      <para>Eventually, several mains might be defined so the <emphasis
      role="bold">id</emphasis> allows to identify all mainDefinitions.</para>

      <para>The <emphasis role="bold">class</emphasis> attribute is the path
      where can be found the class to launch.</para>

      <para><emphasis role="bold">This class MUST contain a main
      method.</emphasis></para>

      <para>Then any number of parameters can be declared in <emphasis
      role="bold">arg</emphasis> tags. The parameters will be given to the
      main method in the same order the were declared.</para>

      <para>And finally a <emphasis role="bold">mapToVirtualNode</emphasis>
      tag will link the main info to virtual node, declared with the same name
      in the virtualNodeDefinitions tag (in componentDefinition).</para>

      <screen>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;ProActiveDescriptor xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="DescriptorSchema.xsd"&gt;
   &lt;!-- &lt;security file="../../descriptors/c3dPolicy.xml"&gt;&lt;/security&gt; --&gt; 
   &lt; componentDefinition&gt;
    &lt; virtualNodesDefinition&gt;
     &lt; virtualNode name="Dispatcher"
 property="unique_singleAO"/&gt;
     &lt; virtualNode name="Renderer"/&gt;
    &lt; /virtualNodesDefinition&gt;
   &lt; /componentDefinition&gt;
   &lt; deployment&gt;
    &lt; register virtualNode="Dispatcher"/&gt;
    &lt; mapping&gt;
     &lt; map virtualNode="Dispatcher"&gt;
      &lt; jvmSet&gt;
       &lt; currentJVM/&gt;
      &lt; /jvmSet&gt;
     &lt; /map&gt;
     &lt; map virtualNode="Renderer"&gt;
      &lt; jvmSet&gt;
      &lt; vmName value="Jvm1"/&gt;
      &lt; vmName value="Jvm2"/&gt;
      &lt; vmName value="Jvm3"/&gt;
      &lt; vmName value="Jvm4"/&gt;
      &lt; /jvmSet&gt;
     &lt; /map&gt;
    &lt; /mapping&gt;
    &lt; jvms&gt;
     &lt; jvm name="Jvm1"&gt;
      &lt; creation&gt;
       &lt; processReference
 refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
     &lt; jvm name="Jvm2"&gt;
      &lt; creation&gt;
       &lt; processReference
 refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
      &lt; jvm name="Jvm3"&gt;
      &lt; creation&gt;
        &lt; processReference refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
     &lt; jvm name="Jvm4"&gt;
      &lt; creation&gt;
       &lt; processReference refid="localJVM"/&gt;
      &lt; /creation&gt;
     &lt; /jvm&gt;
    &lt; /jvms&gt;
   &lt; /deployment&gt;
   &lt; infrastructure&gt;
    &lt; processes&gt;
     &lt; processDefinition id="localJVM"&gt;
      &lt; jvmProcess class="org.objectweb.proactive.core.process.JVMNodeProcess"&gt;&lt;/jvmProcess&gt;
     &lt; /processDefinition&gt;
    &lt; /processes&gt;
   &lt; /infrastructure&gt;
  &lt;/ProActiveDescriptor&gt;</screen>
    </sect2>

    <sect2 >
      <title>API</title>

      <para>The Launcher class is located in the package <emphasis
      role="bold">org.objectweb.proactive.core.descriptor</emphasis>. To use
      it you will have to create a new instance of the launcher with the path
      of the XML descriptor (this descriptor must contain a <emphasis
      role="bold">mainDefinition tag</emphasis>). The constructor will parse
      the file and reify a ProActiveDescriptor. You only have to call the
      <emphasis role="bold">activate()</emphasis> method on the launcher
      instance to launch the application.</para>

      <para><emphasis role="underline">For
      example:</emphasis><literal>Launcher launcher = new Launcher
      ("myDescriptor.xml") ;</literal></para>

      <para><literal>launcher.activate() ;</literal></para>

      <para>you can also get the ProActiveDescriptor built by the launcher by
      calling the getDescriptor() method on the launcher instance.</para>

      <para><literal>ProActiveDescriptor pad = launcher.getDescriptor()
      ;</literal></para>
    </sect2>
      
    
  </sect1>



  <sect1 >
    <title>Variable Contracts for Descriptors</title>

    <sect2 >
      <title>Principle</title>

      <para>The objective of this feature is to allow the use of variables
      with XML descriptors. Variables can be defined: directly in the
      descriptor, using independent files, or inside the deploying
      application's code (with an API).</para>

      <para>The variable tags are usefull inside a descriptor because they can
      factorize frequent parameters. (For example, a variable like
      ${PROACTIVE_HOME} can be defined, set and used in an XML Descriptor.)
      But also, because they can be used to establish a contract between the
      Program and the Descriptor.</para>
    </sect2>

    <sect2  id="dbdoclet.id.VariableContract_html_variableTypes">
      <title>    Variable Types</title>

      <table>
        <title>Variable Types</title>

        <tgroup cols="4">
          <colspec align="center" />

          <thead>
            <row>
              <entry align="center">Type</entry>

              <entry align="center">Ability to set value</entry>

              <entry align="center">Ability to set empty value</entry>

              <entry align="center">Priority</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><emphasis
              role="bold">DescriptorVariable</emphasis></entry>

              <entry>Descriptor</entry>

              <entry>Program</entry>

              <entry>Descriptor</entry>
            </row>

            <row>
              <entry><emphasis role="bold">ProgramVariable</emphasis></entry>

              <entry>Program</entry>

              <entry>Descriptor</entry>

              <entry>Program</entry>
            </row>

            <row>
              <entry><emphasis
              role="bold">DescriptorDefaultVariable</emphasis></entry>

              <entry>Descriptor, Program</entry>

              <entry>-</entry>

              <entry>Program</entry>
            </row>

            <row>
              <entry><emphasis
              role="bold">ProgramDefaultVariable</emphasis></entry>

              <entry>Program, Descriptor</entry>

              <entry>-</entry>

              <entry>Descriptor</entry>
            </row>

            <row>
              <entry><emphasis
              role="bold">JavaPropertyVariable</emphasis></entry>

              <entry>Descriptor, Program</entry>

              <entry>-</entry>

              <entry>JavaProperty</entry>
            </row>

            <row>
              <entry><emphasis
              role="bold">JavaPropertyDescriptorDefault</emphasis></entry>

              <entry>JavaProperty, Descriptor, Program</entry>

              <entry>Program</entry>

              <entry>JavaProperty, Descriptor, Program</entry>
            </row>

            <row>
              <entry><emphasis
              role="bold">JavaPropertyProgramDefault</emphasis></entry>

              <entry>JavaProperty, Descriptor, Program</entry>

              <entry>Descriptor</entry>

              <entry>JavaProperty, Program, Descriptor</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Variables can be set in more than one place. When the value is set
      on multiple places, then the definition specified in the priority column
      will take precedence. In the priority column, items towards the left
      have more priority.</para>
    </sect2>

    <sect2  id="dbdoclet.id.VariableContract_html_variableTypesDesc">
      <title> Variable Types User Guide</title>

      <para>To help identify the user cases where the variable types might be
      useful, we have defined the concept of programmer and deployer. The
      programmer is the person writing the application code. The deployer
      corresponds to the responsible of writing the deployment descriptor. The
      variables represent rights and responsabilities between the two parties
      (contract) as specified in the following table:</para>

      <para><informaltable>
          <tgroup cols="3">
            <tbody>
              <row>
                <entry><para> <emphasis role="bold">Type</emphasis>
                </para></entry>

                <entry><para> <emphasis role="bold">Behavior</emphasis>
                </para></entry>

                <entry><para> <emphasis role="bold">When to use this
                type</emphasis> </para></entry>
              </row>

              <row>
                <entry><para> <emphasis
                role="bold">descriptorVariable</emphasis> </para></entry>

                <entry><para>The value has to be set in the descriptor, and
                cannot be specified in the program.</para></entry>

                <entry><para>If the deployer wants to use a value, without
                giving the possibility to the programmer to modify it. The
                programmer can define this variable to empty, to force the
                descriptor to set a value.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis role="bold">programVariable</emphasis>
                </para></entry>

                <entry><para>The value must be set in the program, and cannot
                be specified in the descriptor.</para></entry>

                <entry><para>If the programmer wants to use a value, without
                giving the possibility to the descriptor to modify it. The
                descriptor can define this variable to empty, to force the
                programmer to set a value.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis
                role="bold">descriptorDefaultVariable</emphasis>
                </para></entry>

                <entry><para>A default value must be specified in the
                descriptor. The programmer has the ability not to change the
                value in the program. Nevertheless, if the value is changed in
                the program, then this new value will have precedence over the
                one defined in the descriptor.</para></entry>

                <entry><para>If the programmer may override the default value,
                but the responsability of setting a default belongs to the
                deployer.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis
                role="bold">programDefaultVariable</emphasis> </para></entry>

                <entry><para>A default value must be specified in the program.
                The descriptor has the ability not to change the value.
                Nevertheless, if the value is changed in the descriptor, then
                this new value will have precedence over the one defined in
                the program.</para></entry>

                <entry><para>If the deployer may override the default value,
                but the responsability of setting a default belongs to the
                programmer.</para></entry>
              </row>

              <row>
                <entry><para> <emphasis
                role="bold">javaPropertyVariable</emphasis> </para></entry>

                <entry><para>Takes the value from the corresponding Java
                property.</para></entry>

                <entry><para>When a variable will only be known at runtime
                through the Java properties, and no default has to be provided
                by the descriptor or the application.</para></entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">javaPropertyDescriptorDefault</emphasis></entry>

                <entry>Takes the value from the corresponding java property. A
                default value can also be set from the descriptor or the
                program. If no property is found, the descriptor default value
                will override the program default value.</entry>

                <entry>When the descriptor sets a default value, that can be
                overrided at deployment using a java property.</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">javaPropertyProgramDefault</emphasis></entry>

                <entry>Takes the value from the corresponding java property. A
                defualt value can also be set from the program or the
                descriptor. If no property is found, the program default value
                will override the program default value</entry>

                <entry>When the program sets a default value, than can be
                overrided at deployment using a java property.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </sect2>

    <sect2 >
      <title>Variables Example</title>

      <sect3 >
        <title>Descriptor Variables</title>

        <indexterm><primary>Descriptor Variables</primary></indexterm>

        <para>All variables must be set in a variable section at the beginning
        of the descriptor file in the following way:</para>

        <screen>         &lt;variables&gt;
         &lt;<emphasis role="bold">descriptorVariable</emphasis> name="<emphasis
            role="bold">PROACTIVE_HOME</emphasis>" value="<emphasis
            role="bold">ProActive/dist/ProActive</emphasis>"/&gt;
         &lt;<emphasis role="bold">descriptorDefaultVariable</emphasis> name="<emphasis
            role="bold">NUMBER_OF_VIRTUAL_NODES</emphasis>" value="<emphasis
            role="bold">20</emphasis>"/&gt;
         &lt;<emphasis role="bold">programVariable</emphasis> name="<emphasis
            role="bold">VIRTUAL_NODE_NAME</emphasis>"/&gt;
         &lt;<emphasis role="bold">javaPropertyVariable</emphasis> name="<emphasis
            role="bold">java.home</emphasis>"/&gt;
         &lt;<emphasis role="bold">javaPropertyDescriptorDefault</emphasis> name="<emphasis
            role="bold">host.name</emphasis>" value="<emphasis role="bold">localhost</emphasis>"/&gt; 
         &lt;<emphasis role="bold">javaPropertyProgramDefault</emphasis> name="<emphasis
            role="bold">priority.queue</emphasis>"/&gt; 

         &lt;!-- Include external variables from files--&gt;
         &lt;<emphasis role="bold">includeXMLFile</emphasis> location="<emphasis
            role="bold">file.xml</emphasis>"/&gt;
         &lt;<emphasis role="bold">includePropertyFile</emphasis> location="<emphasis
            role="bold">file.properties</emphasis>"/&gt;
         &lt;/variables&gt;
         ...
         &lt;!-- Usage example--&gt;
         &lt;classpath&gt;
         &lt;absolutePath value="<emphasis role="bold">${USER_HOME}/${PROACTIVE_HOME}/ProActive.jar</emphasis>"/&gt;
         ...
         &lt;/classpath&gt;
         ...</screen>
      </sect3>

      <sect3 >
        <title>Program Variables</title>

        <screen>         XML_LOCATION="/home/user/descriptor.xml";
         VariableContract variableContract= new VariableContract();
         variableContract.setVariableFromProgram( "<emphasis role="bold">VIRTUAL_NODE_NAME</emphasis>", "<emphasis
            role="bold">testnode</emphasis>", <emphasis role="bold">VariableContractType.ProgramVariable</emphasis>);
         variableContract.setVariableFromProgram( "<emphasis role="bold">NUMBER_OF_VIRTUAL_NODES</emphasis>", "<emphasis
            role="bold">10</emphasis>", <emphasis role="bold">VariableContractType.DescriptorDefaultVariable</emphasis>);
         variableContract.setVariableFromProgram( "<emphasis role="bold">priority.queue</emphasis>", "<emphasis
            role="bold">vip</emphasis>", <emphasis role="bold">VariableContractType.JavaPropertyProgramDefault</emphasis>);
         ProActiveDescriptor pad = ProActive.getProactiveDescriptor(XML_LOCATION, variableContract);

         //Usage example
         VariableContract vc=pad.getVariableContract;
         String proActiveHome=vc.getValue("PROACTIVE_HOME");</screen>
      </sect3>
    </sect2>

    <sect2 >
      <title>External Variable Definitions Files</title>

      <sect3 >
        <title>XML Files</title>

        <para>Is built using XML property tags.</para>

        <para><emphasis role="bold">File: file.xml</emphasis></para>

        <screen>&lt;!-- Definition of the specific context --&gt;
&lt;variables&gt;
  &lt;<emphasis role="bold">descriptorVariable</emphasis> name="<emphasis
            role="bold">USER_HOME</emphasis>" value="<emphasis role="bold">/usr/home/team</emphasis>"/&gt;
  &lt;<emphasis role="bold">descriptorVariable</emphasis> name="<emphasis
            role="bold">PROACTIVE_HOME</emphasis>" value="<emphasis
            role="bold">ProActive/dist/ProActive</emphasis>"/&gt;
  &lt;<emphasis role="bold">descriptorVariable</emphasis> name="<emphasis
            role="bold">NUM_NODES</emphasis>" value="<emphasis role="bold">45</emphasis>"/&gt;
&lt;/variables&gt;                 </screen>
      </sect3>

      <sect3 >
        <title>Properties Files</title>

        <para>This approach uses <ulink
        url="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Properties.html#load(java.io.InputStream)">Sun
        microsystems properties file format</ulink>. The format is plain text
        with one definition per line in the format <emphasis
        role="bold">variable = value</emphasis>, as shown in the following
        example:</para>

        <para><emphasis role="bold">File: file.properties</emphasis></para>

        <screen># Definition of the specific context
USER_HOME = /usr/home/team
PROACTIVE_HOME = ProActive/dist/ProActive
NUM_NODES: 45                 </screen>

        <para>Variables defined in this format will be declared as <emphasis
        role="bold">DescriptorVariable</emphasis> type. Note that colon (:)
        can be used instead of equal (=).</para>
      </sect3>
    </sect2>

    <sect2 >
      <title>Program Variable API</title>

      <sect3 >
        <title>Relevant import packages</title>

        <screen>import org.objectweb.proactive.core.xml.VariableContract;
import org.objectweb.proactive.core.xml.VariableContractType;        </screen>
      </sect3>

      <sect3 >
        <title>Available Variable Types</title>

        <itemizedlist>
          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">DefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">DescriptorDefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">ProgramVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">ProgramDefaultVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">JavaPropertyVariable</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">JavaPropertyDescriptorDefault</emphasis></para>
          </listitem>

          <listitem>
            <para>VariableContractType.<emphasis
            role="bold">JavaPropertyProgramDefault</emphasis></para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 >
        <title>API</title>

        <para>The API for setting variables from the Program is shown below.
        The <emphasis role="bold">name</emphasis> corresponds to the variable
        name, and the <emphasis role="bold">value</emphasis> to the variable
        content. The <emphasis role="bold">type</emphasis> corresponds to a
        VariableContractType.</para>

        <screen>public void VariableContract.setVariableFromProgram( String <emphasis
            role="bold">name</emphasis>, String <emphasis role="bold">value</emphasis>, VariableContractType <emphasis
            role="bold">type</emphasis>);
public void VariableContract.setVariableFromProgram( HashMap <emphasis
            role="bold">map</emphasis>, VariableContractType <emphasis
            role="bold">type</emphasis>);
</screen>

        <para>The API for adding a multiple variables is shown above. The
        variable <emphasis role="bold">name</emphasis>/<emphasis
        role="bold">value</emphasis> pair is specified as the key/content of
        the HashMap.</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>