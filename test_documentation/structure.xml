<?xml version="1.0" encoding="UTF-8"?>
<chapter id="structure"><title>0.1 Structure of the API</title>
<!--  File: /home/irosenbe/PA_new_doc/docbook-tuto/doc-files/test_documentation/structure.html  -->
  
    <sect1 remap="h2">
      <title>Goals of the API</title>
      <itemizedlist>
        <listitem>
          <para> Benchmarks on ProActive</para>
        </listitem>
        <listitem>
          <para> Functional Tests framework</para>
        </listitem>
        <listitem>
          <para> Interlinked Tests</para>
        </listitem>
        <listitem>
          <para> Automatic results generation</para>
        </listitem>
</itemizedlist>
    </sect1>
    <sect1 remap="h2">
      <title>Functional Tests &amp; Benchmarks</title>
      <sect2 remap="h3">
        <title>Test definition</title>
        <para>A Test runs successfully of :</para>
        <itemizedlist>
          <listitem>
            <para> Its <emphasis role="bold">Pre-Conditions</emphasis> are verified</para>
          </listitem>
          <listitem>
            <para> Its <emphasis role="bold">action</emphasis> method runs with no Java Exception</para>
          </listitem>
          <listitem>
            <para> Its <emphasis role="bold">Post-Conditions</emphasis> are also verified</para>
          </listitem>
</itemizedlist>
      </sect2>
      <sect2 remap="h3">
        <title>Benchmark definition</title>
        <para>Benchmark is a Test, its result is a time.</para>
      </sect2>
      <sect2 remap="h3">
        <title>Interlinked Functional Tests</title>
        <para>First, we specify parents Tests.</para>
        <para>To do this, just overload Action method with needed inputs and outputs, after, with the Java
 reflection mechanism we found the first good Action method to execute the Test.</para>
        <sect3 remap="h4">
          <title>Mechanism in details</title>
          <para>In standalone mode the test runs with this method :</para>
          <screen>
<literal>
void action() throws Exception;
            </literal>
          </screen>
          <para>In interlinked mode, the developer must to add a similar method in his code Test :</para>
          <screen>
<literal>
A action(B toto, C tutu, &#8230;) throws Exception;
            </literal>
          </screen>
          <para>Where <emphasis>toto</emphasis> is the result output of the first parent of this test and <emphasis>tutu</emphasis> the
 result output of second parent, &#8230; <emphasis>A</emphasis> is the type of result output of this Test.</para>
          <sect4 remap="h5">
            <title>Reflection code</title>
            <para>Find the first action method :</para>
            <screen>
<literal>
 Method[] methods = getClass().getMethods();
            Method actionWithParams = null;
            for (int i = 0; i &lt; methods.length; i++) {
                if ((methods[i].getName().compareTo(&quot;action&quot;) == 0) &amp;&amp;
                        (methods[i].getReturnType().getName().compareTo(&quot;void&quot;) != 0)) {
                    actionWithParams = methods[i];
                    break;
                }
            }
              </literal>
            </screen>
            <para>Array of params type :</para>
            <screen>
<literal>
            if (actionWithParams != null) {
                Object[] args = null;
                if (tests != null) {
                    args = new Object[tests.length];
                    for (int i = 0; i &lt; tests.length; i++)
                        args[i] = tests[i].getOut();
                } else {
                    args = new Object[1];
                    args[0] = null;
                }
              </literal>
            </screen>
            <para>Call the method :</para>
            <screen>
<literal>
out = actionWithParams.invoke(this, args);
              </literal>
            </screen>
</sect4>
</sect3>
      </sect2>
    </sect1>
    <sect1 remap="h2">
      <title>Group</title>
      <para>What is a Group of Tests ?</para>
      <itemizedlist>
        <listitem>
          <para> Collection of Tests</para>
        </listitem>
</itemizedlist>
      <para>What is the role of a Group?</para>
      <itemizedlist>
        <listitem>
          <para> Initialise and cleanup all Tests</para>
        </listitem>
        <listitem>
          <para> Collect Results</para>
        </listitem>
        <listitem>
          <para> Add, remove, &#8230; Tests like a Java Collection</para>
        </listitem>
</itemizedlist>
    </sect1>
    <sect1 remap="h2">
      <title>Manager</title>
      <para>What is a Manager in Testsuite API ?</para>
      <itemizedlist>
        <listitem>
          <para> Collection of Groups</para>
        </listitem>
</itemizedlist>
      <para>What is the role of a Manager?</para>
      <itemizedlist>
        <listitem>
          <para> Initialise and launch all Tests</para>
        </listitem>
        <listitem>
          <para> Collect and format Results</para>
        </listitem>
</itemizedlist>
      <para>We have different types of Manager to better manage of specialised Tests or Benchmarks :</para>
      <itemizedlist>
        <listitem>
          <para> BenchmarkManager</para>
        </listitem>
        <listitem>
          <para> ProActiveBenchManager</para>
        </listitem>
        <listitem>
          <para> FunctionalTestManager</para>
        </listitem>
        <listitem>
          <para> ProActiveFuncTestManager</para>
        </listitem>
</itemizedlist>
    </sect1>
    <sect1 remap="h2">
      <title>Diagram of classes</title>
      <para>The follow image presents the main structure of the API :</para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/general.gif" format="GIF"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/general.svg" format="SVG"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/general.png" format="PNG"/>            </imageobject>
          </mediaobject>
        </informalfigure>
</para>
      <para>Classes details :</para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/details.gif" format="GIF"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/details.svg" format="SVG"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/details.png" format="PNG"/>            </imageobject>
          </mediaobject>
        </informalfigure>
</para>
      <para>General structure at runtime :</para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/execution.gif" format="GIF"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/execution.svg" format="SVG"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/execution.png" format="PNG"/>            </imageobject>
          </mediaobject>
        </informalfigure>
</para>
      <para>Test classes diagram :</para>
      <para>
        <informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/test.gif" format="GIF"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/test.svg" format="SVG"/>            </imageobject>
            <imageobject>
              <imagedata fileref="doc-files/test_documentation/Files/test.png" format="PNG"/>            </imageobject>
          </mediaobject>
        </informalfigure>
</para>
    </sect1>
  
</chapter>
